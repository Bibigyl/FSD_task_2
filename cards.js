!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=65)}([function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,a){"use strict";var i=[],o=n.document,s=Object.getPrototypeOf,l=i.slice,u=i.concat,d=i.push,c=i.indexOf,f={},h=f.toString,p=f.hasOwnProperty,m=p.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},w=function(e){return null!=e&&e===e.window},k={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,a,i=(n=n||o).createElement("script");if(i.text=e,t)for(r in k)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[h.call(e)]||"object":typeof e}var _=function(e,t){return new _.fn.init(e,t)},D=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function S(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!y(e)&&!w(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}_.fn=_.prototype={jquery:"3.4.1",constructor:_,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=_.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return _.each(this,e)},map:function(e){return this.pushStack(_.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:i.sort,splice:i.splice},_.extend=_.fn.extend=function(){var e,t,n,r,a,i,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||y(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(u&&r&&(_.isPlainObject(r)||(a=Array.isArray(r)))?(n=o[t],i=a&&!Array.isArray(n)?[]:a||_.isPlainObject(n)?n:{},a=!1,o[t]=_.extend(u,i,r)):void 0!==r&&(o[t]=r));return o},_.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=s(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(D,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?_.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(S(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return u.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=i[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var T=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,r,a,i,o,s,l,u,d,c,f,h,p,m,g,v,y,w,k="sizzle"+1*new Date,b=e.document,x=0,_=0,D=le(),S=le(),T=le(),M=le(),C=function(e,t){return e===t&&(c=!0),0},O={}.hasOwnProperty,j=[],P=j.pop,L=j.push,Y=j.push,E=j.slice,A=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",I="\\["+F+"*("+R+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+F+"*\\]",H=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",W=new RegExp(F+"+","g"),V=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),z=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),q=new RegExp(F+"|>"),B=new RegExp(H),$=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},oe=ke((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{Y.apply(j=E.call(b.childNodes),b.childNodes),j[b.childNodes.length].nodeType}catch(e){Y={apply:j.length?function(e,t){L.apply(e,E.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,a){var i,s,u,d,c,p,v,y=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!a&&((t?t.ownerDocument||t:b)!==h&&f(t),t=t||h,m)){if(11!==x&&(c=Q.exec(e)))if(i=c[1]){if(9===x){if(!(u=t.getElementById(i)))return r;if(u.id===i)return r.push(u),r}else if(y&&(u=y.getElementById(i))&&w(t,u)&&u.id===i)return r.push(u),r}else{if(c[2])return Y.apply(r,t.getElementsByTagName(e)),r;if((i=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return Y.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!M[e+" "]&&(!g||!g.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===x&&q.test(e)){for((d=t.getAttribute("id"))?d=d.replace(re,ae):t.setAttribute("id",d=k),s=(p=o(e)).length;s--;)p[s]="#"+d+" "+we(p[s]);v=p.join(","),y=ee.test(e)&&ve(t.parentNode)||t}try{return Y.apply(r,y.querySelectorAll(v)),r}catch(t){M(e,!0)}finally{d===k&&t.removeAttribute("id")}}}return l(e.replace(V,"$1"),t,r,a)}function le(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function ue(e){return e[k]=!0,e}function de(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue((function(t){return t=+t,ue((function(n,r){for(var a,i=e([],n.length,t),o=i.length;o--;)n[a=i[o]]&&(n[a]=!(r[a]=n[a]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,a,o=e?e.ownerDocument||e:b;return o!==h&&9===o.nodeType&&o.documentElement?(p=(h=o).documentElement,m=!i(h),b!==h&&(a=h.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",ie,!1):a.attachEvent&&a.attachEvent("onunload",ie)),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=de((function(e){return p.appendChild(e).id=k,!h.getElementsByName||!h.getElementsByName(k).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[a++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=K.test(h.querySelectorAll))&&(de((function(e){p.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+k+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||g.push(".#.+[+~]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=K.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&de((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(p.compareDocumentPosition),w=t||K.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return c=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===h||e.ownerDocument===b&&w(b,e)?-1:t===h||t.ownerDocument===b&&w(b,t)?1:d?A(d,e)-A(d,t):0:4&r?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,o=[e],s=[t];if(!a||!i)return e===h?-1:t===h?1:a?-1:i?1:d?A(d,e)-A(d,t):0;if(a===i)return fe(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?fe(o[r],s[r]):o[r]===b?-1:s[r]===b?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&f(e),n.matchesSelector&&m&&!M[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){M(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==h&&f(e),w(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==h&&f(e);var a=r.attrHandle[t.toLowerCase()],i=a&&O.call(r.attrHandle,t.toLowerCase())?a(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,ae)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],a=0,i=0;if(c=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(C),c){for(;t=e[i++];)t===e[i]&&(a=r.push(i));for(;a--;)e.splice(r[a],1)}return d=null,e},a=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&B.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=D[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&D(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=se.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var u,d,c,f,h,p,m=i!==o?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,w=!1;if(g){if(i){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?g.firstChild:g.lastChild],o&&y){for(w=(h=(u=(d=(c=(f=g)[k]||(f[k]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]||[])[0]===x&&u[1])&&u[2],f=h&&g.childNodes[h];f=++h&&f&&f[m]||(w=h=0)||p.pop();)if(1===f.nodeType&&++w&&f===t){d[e]=[x,h,w];break}}else if(y&&(w=h=(u=(d=(c=(f=t)[k]||(f[k]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]||[])[0]===x&&u[1]),!1===w)for(;(f=++h&&f&&f[m]||(w=h=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++w||(y&&((d=(c=f[k]||(f[k]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]=[x,w]),f!==t)););return(w-=a)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,i=a(e,t),o=i.length;o--;)e[r=A(e,i[o])]=!(n[r]=i[o])})):function(e){return a(e,0,n)}):a}},pseudos:{not:ue((function(e){var t=[],n=[],r=s(e.replace(V,"$1"));return r[k]?ue((function(e,t,n,a){for(var i,o=r(e,null,a,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))})):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:ue((function(e){return $.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}function we(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ke(e,t,n){var r=t.dir,a=t.next,i=a||r,o=n&&"parentNode"===i,s=_++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,a);return!1}:function(t,n,l){var u,d,c,f=[x,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(d=(c=t[k]||(t[k]={}))[t.uniqueID]||(c[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=d[i])&&u[0]===x&&u[1]===s)return f[2]=u[2];if(d[i]=f,f[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,a){for(var i,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),u&&t.push(s)));return o}function _e(e,t,n,r,a,i){return r&&!r[k]&&(r=_e(r)),a&&!a[k]&&(a=_e(a,i)),ue((function(i,o,s,l){var u,d,c,f=[],h=[],p=o.length,m=i||function(e,t,n){for(var r=0,a=t.length;r<a;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!i&&t?m:xe(m,f,e,s,l),v=n?a||(i?e:p||r)?[]:o:g;if(n&&n(g,v,s,l),r)for(u=xe(v,h),r(u,[],s,l),d=u.length;d--;)(c=u[d])&&(v[h[d]]=!(g[h[d]]=c));if(i){if(a||e){if(a){for(u=[],d=v.length;d--;)(c=v[d])&&u.push(g[d]=c);a(null,v=[],u,l)}for(d=v.length;d--;)(c=v[d])&&(u=a?A(i,c):f[d])>-1&&(i[u]=!(o[u]=c))}}else v=xe(v===o?v.splice(p,v.length):v),a?a(null,o,v,l):Y.apply(o,v)}))}function De(e){for(var t,n,a,i=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],l=o?1:0,d=ke((function(e){return e===t}),s,!0),c=ke((function(e){return A(t,e)>-1}),s,!0),f=[function(e,n,r){var a=!o&&(r||n!==u)||((t=n).nodeType?d(e,n,r):c(e,n,r));return t=null,a}];l<i;l++)if(n=r.relative[e[l].type])f=[ke(be(f),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[k]){for(a=++l;a<i&&!r.relative[e[a].type];a++);return _e(l>1&&be(f),l>1&&we(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(V,"$1"),n,l<a&&De(e.slice(l,a)),a<i&&De(e=e.slice(a)),a<i&&we(e))}f.push(n)}return be(f)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,o=se.tokenize=function(e,t){var n,a,i,o,s,l,u,d=S[e+" "];if(d)return t?0:d.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(o in n&&!(a=z.exec(s))||(a&&(s=s.slice(a[0].length)||s),l.push(i=[])),n=!1,(a=U.exec(s))&&(n=a.shift(),i.push({value:n,type:a[0].replace(V," ")}),s=s.slice(n.length)),r.filter)!(a=G[o].exec(s))||u[o]&&!(a=u[o](a))||(n=a.shift(),i.push({value:n,type:o,matches:a}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,l).slice(0)},s=se.compile=function(e,t){var n,a=[],i=[],s=T[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=De(t[n]))[k]?a.push(s):i.push(s);(s=T(e,function(e,t){var n=t.length>0,a=e.length>0,i=function(i,o,s,l,d){var c,p,g,v=0,y="0",w=i&&[],k=[],b=u,_=i||a&&r.find.TAG("*",d),D=x+=null==b?1:Math.random()||.1,S=_.length;for(d&&(u=o===h||o||d);y!==S&&null!=(c=_[y]);y++){if(a&&c){for(p=0,o||c.ownerDocument===h||(f(c),s=!m);g=e[p++];)if(g(c,o||h,s)){l.push(c);break}d&&(x=D)}n&&((c=!g&&c)&&v--,i&&w.push(c))}if(v+=y,n&&y!==v){for(p=0;g=t[p++];)g(w,k,o,s);if(i){if(v>0)for(;y--;)w[y]||k[y]||(k[y]=P.call(l));k=xe(k)}Y.apply(l,k),d&&!i&&k.length>0&&v+t.length>1&&se.uniqueSort(l)}return d&&(x=D,u=b),w};return n?ue(i):i}(i,a))).selector=e}return s},l=se.select=function(e,t,n,a){var i,l,u,d,c,f="function"==typeof e&&e,h=!a&&o(e=f.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=G.needsContext.test(e)?0:l.length;i--&&(u=l[i],!r.relative[d=u.type]);)if((c=r.find[d])&&(a=c(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(i,1),!(e=a.length&&we(l)))return Y.apply(n,a),n;break}}return(f||s(e,h))(a,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=k.split("").sort(C).join("")===k,n.detectDuplicates=!!c,f(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||ce(N,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);_.find=T,_.expr=T.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=T.uniqueSort,_.text=T.getText,_.isXMLDoc=T.isXML,_.contains=T.contains,_.escapeSelector=T.escape;var M=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&_(e).is(n))break;r.push(e)}return r},C=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=_.expr.match.needsContext;function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return y(t)?_.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?_.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?_.grep(e,(function(e){return c.call(t,e)>-1!==n})):_.filter(t,e,n)}_.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?_.find.matchesSelector(r,e)?[r]:[]:_.find.matches(e,_.grep(t,(function(e){return 1===e.nodeType})))},_.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(_(e).filter((function(){for(t=0;t<r;t++)if(_.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)_.find(e,a[t],n);return r>1?_.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&O.test(e)?_(e):e||[],!1).length}});var Y,E=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||Y,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:E.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof _?t[0]:t,_.merge(this,_.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),P.test(r[1])&&_.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=o.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(_):_.makeArray(e,this)}).prototype=_.fn,Y=_(o);var A=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function F(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}_.fn.extend({has:function(e){var t=_(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(_.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&_(e);if(!O.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?_.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(_(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),_.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return M(e,"parentNode")},parentsUntil:function(e,t,n){return M(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return M(e,"nextSibling")},prevAll:function(e){return M(e,"previousSibling")},nextUntil:function(e,t,n){return M(e,"nextSibling",n)},prevUntil:function(e,t,n){return M(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(j(e,"template")&&(e=e.content||e),_.merge([],e.childNodes))}},(function(e,t){_.fn[e]=function(n,r){var a=_.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=_.filter(r,a)),this.length>1&&(N[e]||_.uniqueSort(a),A.test(e)&&a.reverse()),this.pushStack(a)}}));var R=/[^\x20\t\r\n\f]+/g;function I(e){return e}function H(e){throw e}function W(e,t,n,r){var a;try{e&&y(a=e.promise)?a.call(e).done(t).fail(n):e&&y(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}_.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return _.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):_.extend({},e);var t,n,r,a,i=[],o=[],s=-1,l=function(){for(a=a||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,a&&(i=n?[]:"")},u={add:function(){return i&&(n&&!t&&(s=i.length-1,o.push(n)),function t(n){_.each(n,(function(n,r){y(r)?e.unique&&u.has(r)||i.push(r):r&&r.length&&"string"!==x(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return _.each(arguments,(function(e,t){for(var n;(n=_.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?_.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return a=o=[],i=n="",this},disabled:function(){return!i},lock:function(){return a=o=[],n||t||(i=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var t=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",a={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return _.Deferred((function(n){_.each(t,(function(t,r){var a=y(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,a){var i=0;function o(e,t,r,a){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<i)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?a?u.call(n,o(i,t,I,a),o(i,t,H,a)):(i++,u.call(n,o(i,t,I,a),o(i,t,H,a),o(i,t,I,t.notifyWith))):(r!==I&&(s=void 0,l=[n]),(a||t.resolveWith)(s,l))}},d=a?u:function(){try{u()}catch(n){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(n,d.stackTrace),e+1>=i&&(r!==H&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?d():(_.Deferred.getStackHook&&(d.stackTrace=_.Deferred.getStackHook()),n.setTimeout(d))}}return _.Deferred((function(n){t[0][3].add(o(0,n,y(a)?a:I,n.notifyWith)),t[1][3].add(o(0,n,y(e)?e:I)),t[2][3].add(o(0,n,y(r)?r:H))})).promise()},promise:function(e){return null!=e?_.extend(e,a):a}},i={};return _.each(t,(function(e,n){var o=n[2],s=n[5];a[n[1]]=o.add,s&&o.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=o.fireWith})),a.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),a=l.call(arguments),i=_.Deferred(),o=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?l.call(arguments):n,--t||i.resolveWith(r,a)}};if(t<=1&&(W(e,i.done(o(n)).resolve,i.reject,!t),"pending"===i.state()||y(a[n]&&a[n].then)))return i.then();for(;n--;)W(a[n],o(n),i.reject);return i.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&V.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},_.readyException=function(e){n.setTimeout((function(){throw e}))};var z=_.Deferred();function U(){o.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),_.ready()}_.fn.ready=function(e){return z.then(e).catch((function(e){_.readyException(e)})),this},_.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==e&&--_.readyWait>0||z.resolveWith(o,[_]))}}),_.ready.then=z.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?n.setTimeout(_.ready):(o.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var q=function(e,t,n,r,a,i,o){var s=0,l=e.length,u=null==n;if("object"===x(n))for(s in a=!0,n)q(e,t,s,n[s],!0,i,o);else if(void 0!==r&&(a=!0,y(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(_(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:u?t.call(e):l?t(e[0],n):i},B=/^-ms-/,$=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function Z(e){return e.replace(B,"ms-").replace($,G)}var J=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=_.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},J(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[Z(t)]=n;else for(r in t)a[Z(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||_.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!_.isEmptyObject(t)}};var K=new X,Q=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}_.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),_.fn.extend({data:function(e,t){var n,r,a,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(a=Q.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=Z(r.slice(5)),ne(i,r,a[r]));K.set(i,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){Q.set(this,e)})):q(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Q.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),_.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=_.queue(e,t),r=n.length,a=n.shift(),i=_._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,(function(){_.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:_.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),_.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?_.queue(this[0],e):void 0===t?this:this.each((function(){var n=_.queue(this,e,t);_._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&_.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){_.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=_.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=K.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=o.documentElement,se=function(e){return _.contains(e.ownerDocument,e)},le={composed:!0};oe.getRootNode&&(se=function(e){return _.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===_.css(e,"display")},de=function(e,t,n,r){var a,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in a=n.apply(e,r||[]),t)e.style[i]=o[i];return a};function ce(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return _.css(e,t,"")},l=s(),u=n&&n[3]||(_.cssNumber[t]?"":"px"),d=e.nodeType&&(_.cssNumber[t]||"px"!==u&&+l)&&ae.exec(_.css(e,t));if(d&&d[3]!==u){for(l/=2,u=u||d[3],d=+l||1;o--;)_.style(e,t,d+u),(1-i)*(1-(i=s()/l||.5))<=0&&(o=0),d/=i;d*=2,_.style(e,t,d+u),n=n||[]}return n&&(d=+d||+l||0,a=n[1]?d+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=d,r.end=a)),a}var fe={};function he(e){var t,n=e.ownerDocument,r=e.nodeName,a=fe[r];return a||(t=n.body.appendChild(n.createElement(r)),a=_.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),fe[r]=a,a)}function pe(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=K.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&ue(r)&&(a[i]=he(r))):"none"!==n&&(a[i]="none",K.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}_.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?_(this).show():_(this).hide()}))}});var me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&j(e,t)?_.merge([e],n):n}function ke(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var be,xe,_e=/<|&#?\w+;/;function De(e,t,n,r,a){for(var i,o,s,l,u,d,c=t.createDocumentFragment(),f=[],h=0,p=e.length;h<p;h++)if((i=e[h])||0===i)if("object"===x(i))_.merge(f,i.nodeType?[i]:i);else if(_e.test(i)){for(o=o||c.appendChild(t.createElement("div")),s=(ge.exec(i)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,o.innerHTML=l[1]+_.htmlPrefilter(i)+l[2],d=l[0];d--;)o=o.lastChild;_.merge(f,o.childNodes),(o=c.firstChild).textContent=""}else f.push(t.createTextNode(i));for(c.textContent="",h=0;i=f[h++];)if(r&&_.inArray(i,r)>-1)a&&a.push(i);else if(u=se(i),o=we(c.appendChild(i),"script"),u&&ke(o),n)for(d=0;i=o[d++];)ve.test(i.type||"")&&n.push(i);return c}be=o.createDocumentFragment().appendChild(o.createElement("div")),(xe=o.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),be.appendChild(xe),v.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Se=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Me=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Oe(){return!1}function je(e,t){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===t)}function Pe(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Pe(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=Oe;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return _().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=_.guid++)),e.each((function(){_.event.add(this,t,a,r,n)}))}function Le(e,t,n){n?(K.set(e,t,!1),_.event.add(e,t,{namespace:!1,handler:function(e){var r,a,i=K.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(_.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=l.call(arguments),K.set(this,t,i),r=n(this,t),this[t](),i!==(a=K.get(this,t))||r?K.set(this,t,!1):a={},i!==a)return e.stopImmediatePropagation(),e.preventDefault(),a.value}else i.length&&(K.set(this,t,{value:_.event.trigger(_.extend(i[0],_.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&_.event.add(e,t,Ce)}_.event={global:{},add:function(e,t,n,r,a){var i,o,s,l,u,d,c,f,h,p,m,g=K.get(e);if(g)for(n.handler&&(n=(i=n).handler,a=i.selector),a&&_.find.matchesSelector(oe,a),n.guid||(n.guid=_.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(t){return void 0!==_&&_.event.triggered!==t.type?_.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(R)||[""]).length;u--;)h=m=(s=Me.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(c=_.event.special[h]||{},h=(a?c.delegateType:c.bindType)||h,c=_.event.special[h]||{},d=_.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&_.expr.match.needsContext.test(a),namespace:p.join(".")},i),(f=l[h])||((f=l[h]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,r,p,o)||e.addEventListener&&e.addEventListener(h,o)),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),a?f.splice(f.delegateCount++,0,d):f.push(d),_.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,l,u,d,c,f,h,p,m,g=K.hasData(e)&&K.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(R)||[""]).length;u--;)if(h=m=(s=Me.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(c=_.event.special[h]||{},f=l[h=(r?c.delegateType:c.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=f.length;i--;)d=f[i],!a&&m!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||r&&r!==d.selector&&("**"!==r||!d.selector)||(f.splice(i,1),d.selector&&f.delegateCount--,c.remove&&c.remove.call(e,d));o&&!f.length&&(c.teardown&&!1!==c.teardown.call(e,p,g.handle)||_.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)_.event.remove(e,h+t[u],n,r,!0);_.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=_.event.fix(e),l=new Array(arguments.length),u=(K.get(this,"events")||{})[s.type]||[],d=_.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,s)){for(o=_.event.handlers.call(this,s,u),t=0;(a=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((_.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,a,i,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<l;n++)void 0===o[a=(r=t[n]).selector+" "]&&(o[a]=r.needsContext?_(a,this).index(u)>-1:_.find(a,this,null,[u]).length),o[a]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(_.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[_.expando]?e:new _.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&Le(t,"click",Ce),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&j(t,"input")&&Le(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&j(t,"input")&&K.get(t,"click")||j(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},_.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},_.Event=function(e,t){if(!(this instanceof _.Event))return new _.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&_.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(e,t){_.event.special[e]={setup:function(){return Le(this,e,je),!1},trigger:function(){return Le(this,e),!0},delegateType:t}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){_.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,i=e.handleObj;return a&&(a===r||_.contains(r,a))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),_.fn.extend({on:function(e,t,n,r){return Pe(this,e,t,n,r)},one:function(e,t,n,r){return Pe(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,_(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each((function(){_.event.remove(this,e,n,t)}))}});var Ye=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ee=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Fe(e,t){return j(e,"table")&&j(11!==t.nodeType?t:t.firstChild,"tr")&&_(e).children("tbody")[0]||e}function Re(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,r,a,i,o,s,l,u;if(1===t.nodeType){if(K.hasData(e)&&(i=K.access(e),o=K.set(t,i),u=i.events))for(a in delete o.handle,o.events={},u)for(n=0,r=u[a].length;n<r;n++)_.event.add(t,a,u[a][n]);Q.hasData(e)&&(s=Q.access(e),l=_.extend({},s),Q.set(t,l))}}function We(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ve(e,t,n,r){t=u.apply([],t);var a,i,o,s,l,d,c=0,f=e.length,h=f-1,p=t[0],m=y(p);if(m||f>1&&"string"==typeof p&&!v.checkClone&&Ae.test(p))return e.each((function(a){var i=e.eq(a);m&&(t[0]=p.call(this,a,i.html())),Ve(i,t,n,r)}));if(f&&(i=(a=De(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=i),i||r)){for(s=(o=_.map(we(a,"script"),Re)).length;c<f;c++)l=a,c!==h&&(l=_.clone(l,!0,!0),s&&_.merge(o,we(l,"script"))),n.call(e[c],l,c);if(s)for(d=o[o.length-1].ownerDocument,_.map(o,Ie),c=0;c<s;c++)l=o[c],ve.test(l.type||"")&&!K.access(l,"globalEval")&&_.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?_._evalUrl&&!l.noModule&&_._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Ne,""),l,d))}return e}function ze(e,t,n){for(var r,a=t?_.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||_.cleanData(we(r)),r.parentNode&&(n&&se(r)&&ke(we(r,"script")),r.parentNode.removeChild(r));return e}_.extend({htmlPrefilter:function(e){return e.replace(Ye,"<$1></$2>")},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),l=se(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||_.isXMLDoc(e)))for(o=we(s),r=0,a=(i=we(e)).length;r<a;r++)We(i[r],o[r]);if(t)if(n)for(i=i||we(e),o=o||we(s),r=0,a=i.length;r<a;r++)He(i[r],o[r]);else He(e,s);return(o=we(s,"script")).length>0&&ke(o,!l&&we(e,"script")),s},cleanData:function(e){for(var t,n,r,a=_.event.special,i=0;void 0!==(n=e[i]);i++)if(J(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)a[r]?_.event.remove(n,r):_.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),_.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return q(this,(function(e){return void 0===e?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ve(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Fe(this,e).appendChild(e)}))},prepend:function(){return Ve(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Fe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ve(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ve(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(_.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return _.clone(this,e,t)}))},html:function(e){return q(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ee.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=_.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(_.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ve(this,arguments,(function(t){var n=this.parentNode;_.inArray(this,e)<0&&(_.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){_.fn[e]=function(e){for(var n,r=[],a=_(e),i=a.length-1,o=0;o<=i;o++)n=o===i?this:this.clone(!0),_(a[o])[t](n),d.apply(r,n.get());return this.pushStack(r)}}));var Ue=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=new RegExp(ie.join("|"),"i");function $e(e,t,n){var r,a,i,o,s=e.style;return(n=n||qe(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||se(e)||(o=_.style(e,t)),!v.pixelBoxStyles()&&Ue.test(o)&&Be.test(t)&&(r=s.width,a=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=a,s.maxWidth=i)),void 0!==o?o+"":o}function Ge(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(d);var e=n.getComputedStyle(d);r="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",s=36===t(e.right),a=36===t(e.width),d.style.position="absolute",i=12===t(d.offsetWidth/3),oe.removeChild(u),d=null}}function t(e){return Math.round(parseFloat(e))}var r,a,i,s,l,u=o.createElement("div"),d=o.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,_.extend(v,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i}}))}();var Ze=["Webkit","Moz","ms"],Je=o.createElement("div").style,Xe={};function Ke(e){var t=_.cssProps[e]||Xe[e];return t||(e in Je?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in Je)return e}(e)||e)}var Qe=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function at(e,t,n,r,a,i){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=_.css(e,n+ie[o],!0,a)),r?("content"===n&&(l-=_.css(e,"padding"+ie[o],!0,a)),"margin"!==n&&(l-=_.css(e,"border"+ie[o]+"Width",!0,a))):(l+=_.css(e,"padding"+ie[o],!0,a),"padding"!==n?l+=_.css(e,"border"+ie[o]+"Width",!0,a):s+=_.css(e,"border"+ie[o]+"Width",!0,a));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function it(e,t,n){var r=qe(e),a=(!v.boxSizingReliable()||n)&&"border-box"===_.css(e,"boxSizing",!1,r),i=a,o=$e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(o)){if(!n)return o;o="auto"}return(!v.boxSizingReliable()&&a||"auto"===o||!parseFloat(o)&&"inline"===_.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===_.css(e,"boxSizing",!1,r),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+at(e,t,n||(a?"border":"content"),i,r,o)+"px"}function ot(e,t,n,r,a){return new ot.prototype.init(e,t,n,r,a)}_.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=Z(t),l=et.test(t),u=e.style;if(l||(t=Ke(s)),o=_.cssHooks[t]||_.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(a=o.get(e,!1,r))?a:u[t];"string"===(i=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=ce(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=a&&a[3]||(_.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var a,i,o,s=Z(t);return et.test(t)||(t=Ke(s)),(o=_.cssHooks[t]||_.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=$e(e,t,r)),"normal"===a&&t in nt&&(a=nt[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),_.each(["height","width"],(function(e,t){_.cssHooks[t]={get:function(e,n,r){if(n)return!Qe.test(_.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):de(e,tt,(function(){return it(e,t,r)}))},set:function(e,n,r){var a,i=qe(e),o=!v.scrollboxSize()&&"absolute"===i.position,s=(o||r)&&"border-box"===_.css(e,"boxSizing",!1,i),l=r?at(e,t,r,s,i):0;return s&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-at(e,t,"border",!1,i)-.5)),l&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=_.css(e,t)),rt(0,n,l)}}})),_.cssHooks.marginLeft=Ge(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-de(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(e,t){_.cssHooks[e+t]={expand:function(n){for(var r=0,a={},i="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+ie[r]+t]=i[r]||i[r-2]||i[0];return a}},"margin"!==e&&(_.cssHooks[e+t].set=rt)})),_.fn.extend({css:function(e,t){return q(this,(function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=qe(e),a=t.length;o<a;o++)i[t[o]]=_.css(e,t[o],!1,r);return i}return void 0!==n?_.style(e,t,n):_.css(e,t)}),e,t,arguments.length>1)}}),_.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||_.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(_.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=_.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=_.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){_.fx.step[e.prop]?_.fx.step[e.prop](e):1!==e.elem.nodeType||!_.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:_.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},_.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},_.fx=ot.prototype.init,_.fx.step={};var st,lt,ut=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function ct(){lt&&(!1===o.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,_.fx.interval),_.fx.tick())}function ft(){return n.setTimeout((function(){st=void 0})),st=Date.now()}function ht(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=ie[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function pt(e,t,n){for(var r,a=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function mt(e,t,n){var r,a,i=0,o=mt.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(a)return!1;for(var t=st||ft(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(r);return s.notifyWith(e,[u,r,n]),r<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:_.extend({},t),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var r=_.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),d=u.props;for(!function(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=Z(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=_.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}(d,u.opts.specialEasing);i<o;i++)if(r=mt.prefilters[i].call(u,e,d,u.opts))return y(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(d,pt,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,a=e.length;r<a;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,i,o,s,l,u,d,c="width"in t||"height"in t,f=this,h={},p=e.style,m=e.nodeType&&ue(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(o=_._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,f.always((function(){f.always((function(){o.unqueued--,_.queue(e,"fx").length||o.empty.fire()}))}))),t)if(a=t[r],ut.test(a)){if(delete t[r],i=i||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!g||void 0===g[r])continue;m=!0}h[r]=g&&g[r]||_.style(e,r)}if((l=!_.isEmptyObject(t))||!_.isEmptyObject(h))for(r in c&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=g&&g.display)&&(u=K.get(e,"display")),"none"===(d=_.css(e,"display"))&&(u?d=u:(pe([e],!0),u=e.style.display||u,d=_.css(e,"display"),pe([e]))),("inline"===d||"inline-block"===d&&null!=u)&&"none"===_.css(e,"float")&&(l||(f.done((function(){p.display=u})),null==u&&(d=p.display,u="none"===d?"":d)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:u}),i&&(g.hidden=!m),m&&pe([e],!0),f.done((function(){for(r in m||pe([e]),K.remove(e,"fxshow"),h)_.style(e,r,h[r])}))),l=pt(m?g[r]:0,r,f),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),_.speed=function(e,t,n){var r=e&&"object"==typeof e?_.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=_.isEmptyObject(e),i=_.speed(t,n,r),o=function(){var t=mt(this,_.extend({},e),i);(a||K.get(this,"finish"))&&t.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",i=_.timers,o=K.get(this);if(a)o[a]&&o[a].stop&&r(o[a]);else for(a in o)o[a]&&o[a].stop&&dt.test(a)&&r(o[a]);for(a=i.length;a--;)i[a].elem!==this||null!=e&&i[a].queue!==e||(i[a].anim.stop(n),t=!1,i.splice(a,1));!t&&n||_.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],i=_.timers,o=r?r.length:0;for(n.finish=!0,_.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(e,t){var n=_.fn[t];_.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ht(t,!0),e,r,a)}})),_.each({slideDown:ht("show"),slideUp:ht("hide"),slideToggle:ht("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){_.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),_.timers=[],_.fx.tick=function(){var e,t=0,n=_.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||_.fx.stop(),st=void 0},_.fx.timer=function(e){_.timers.push(e),_.fx.start()},_.fx.interval=13,_.fx.start=function(){lt||(lt=!0,ct())},_.fx.stop=function(){lt=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,t){return e=_.fx&&_.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var a=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(a)}}))},function(){var e=o.createElement("input"),t=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=o.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=_.expr.attrHandle;_.fn.extend({attr:function(e,t){return q(this,_.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){_.removeAttr(this,e)}))}}),_.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?_.prop(e,t,n):(1===i&&_.isXMLDoc(e)||(a=_.attrHooks[t.toLowerCase()]||(_.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void _.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=_.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&j(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(R);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?_.removeAttr(e,n):e.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=vt[t]||_.find.attr;vt[t]=function(e,t,r){var a,i,o=t.toLowerCase();return r||(i=vt[o],vt[o]=a,a=null!=n(e,t,r)?o:null,vt[o]=i),a}}));var yt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function kt(e){return(e.match(R)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}_.fn.extend({prop:function(e,t){return q(this,_.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[_.propFix[e]||e]}))}}),_.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&_.isXMLDoc(e)||(t=_.propFix[t]||t,a=_.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=_.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(_.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(e){var t,n,r,a,i,o,s,l=0;if(y(e))return this.each((function(t){_(this).addClass(e.call(this,t,bt(this)))}));if((t=xt(e)).length)for(;n=this[l++];)if(a=bt(n),r=1===n.nodeType&&" "+kt(a)+" "){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(s=kt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,a,i,o,s,l=0;if(y(e))return this.each((function(t){_(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[l++];)if(a=bt(n),r=1===n.nodeType&&" "+kt(a)+" "){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");a!==(s=kt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){_(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,a,i,o;if(r)for(a=0,i=_(this),o=xt(e);t=o[a++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+kt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var _t=/\r/g;_.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=y(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,_(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=_.map(a,(function(e){return null==e?"":e+""}))),(t=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=_.valHooks[a.type]||_.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(_t,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(e){var t=_.find.attr(e,"value");return null!=t?t:kt(_.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?i+1:a.length;for(r=i<0?l:o?i:0;r<l;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,"optgroup"))){if(t=_(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=_.makeArray(t),o=a.length;o--;)((r=a[o]).selected=_.inArray(_.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=_.inArray(_(e).val(),t)>-1}},v.checkOn||(_.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Dt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};_.extend(_.event,{trigger:function(e,t,r,a){var i,s,l,u,d,c,f,h,m=[r||o],g=p.call(e,"type")?e.type:e,v=p.call(e,"namespace")?e.namespace.split("."):[];if(s=h=l=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!Dt.test(g+_.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),d=g.indexOf(":")<0&&"on"+g,(e=e[_.expando]?e:new _.Event(g,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:_.makeArray(t,[e]),f=_.event.special[g]||{},a||!f.trigger||!1!==f.trigger.apply(r,t))){if(!a&&!f.noBubble&&!w(r)){for(u=f.delegateType||g,Dt.test(u+g)||(s=s.parentNode);s;s=s.parentNode)m.push(s),l=s;l===(r.ownerDocument||o)&&m.push(l.defaultView||l.parentWindow||n)}for(i=0;(s=m[i++])&&!e.isPropagationStopped();)h=s,e.type=i>1?u:f.bindType||g,(c=(K.get(s,"events")||{})[e.type]&&K.get(s,"handle"))&&c.apply(s,t),(c=d&&s[d])&&c.apply&&J(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,a||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(m.pop(),t)||!J(r)||d&&y(r[g])&&!w(r)&&((l=r[d])&&(r[d]=null),_.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,St),r[g](),e.isPropagationStopped()&&h.removeEventListener(g,St),_.event.triggered=void 0,l&&(r[d]=l)),e.result}},simulate:function(e,t,n){var r=_.extend(new _.Event,n,{type:e,isSimulated:!0});_.event.trigger(r,null,t)}}),_.fn.extend({trigger:function(e,t){return this.each((function(){_.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return _.event.trigger(e,t,n,!0)}}),v.focusin||_.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){_.event.simulate(t,e.target,_.event.fix(e))};_.event.special[t]={setup:function(){var r=this.ownerDocument||this,a=K.access(r,t);a||r.addEventListener(e,n,!0),K.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this,a=K.access(r,t)-1;a?K.access(r,t,a):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var Tt=n.location,Mt=Date.now(),Ct=/\?/;_.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||_.error("Invalid XML: "+e),t};var Ot=/\[\]$/,jt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function Yt(e,t,n,r){var a;if(Array.isArray(t))_.each(t,(function(t,a){n||Ot.test(e)?r(e,a):Yt(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==x(t))r(e,t);else for(a in t)Yt(e+"["+a+"]",t[a],n,r)}_.param=function(e,t){var n,r=[],a=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!_.isPlainObject(e))_.each(e,(function(){a(this.name,this.value)}));else for(n in e)Yt(n,e[n],t,a);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=_.prop(this,"elements");return e?_.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!_(this).is(":disabled")&&Lt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var Et=/%20/g,At=/#.*$/,Nt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,It=/^\/\//,Ht={},Wt={},Vt="*/".concat("*"),zt=o.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,i=t.toLowerCase().match(R)||[];if(y(n))for(;r=i[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var a={},i=e===Wt;function o(s){var l;return a[s]=!0,_.each(e[s]||[],(function(e,s){var u=s(t,n,r);return"string"!=typeof u||i||a[u]?i?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!a["*"]&&o("*")}function Bt(e,t){var n,r,a=_.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&_.extend(!0,e,r),e}zt.href=Tt.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Bt(Bt(e,_.ajaxSettings),t):Bt(_.ajaxSettings,e)},ajaxPrefilter:Ut(Ht),ajaxTransport:Ut(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,a,i,s,l,u,d,c,f,h,p=_.ajaxSetup({},t),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?_(m):_.event,v=_.Deferred(),y=_.Callbacks("once memory"),w=p.statusCode||{},k={},b={},x="canceled",D={readyState:0,getResponseHeader:function(e){var t;if(d){if(!s)for(s={};t=Ft.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return d?i:null},setRequestHeader:function(e,t){return null==d&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,k[e]=t),this},overrideMimeType:function(e){return null==d&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)D.always(e[D.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||x;return r&&r.abort(t),S(0,t),this}};if(v.promise(D),p.url=((e||p.url||Tt.href)+"").replace(It,Tt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){u=o.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=_.param(p.data,p.traditional)),qt(Ht,p,t,D),d)return D;for(f in(c=_.event&&p.global)&&0==_.active++&&_.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Rt.test(p.type),a=p.url.replace(At,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Et,"+")):(h=p.url.slice(a.length),p.data&&(p.processData||"string"==typeof p.data)&&(a+=(Ct.test(a)?"&":"?")+p.data,delete p.data),!1===p.cache&&(a=a.replace(Nt,"$1"),h=(Ct.test(a)?"&":"?")+"_="+Mt+++h),p.url=a+h),p.ifModified&&(_.lastModified[a]&&D.setRequestHeader("If-Modified-Since",_.lastModified[a]),_.etag[a]&&D.setRequestHeader("If-None-Match",_.etag[a])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&D.setRequestHeader("Content-Type",p.contentType),D.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Vt+"; q=0.01":""):p.accepts["*"]),p.headers)D.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(m,D,p)||d))return D.abort();if(x="abort",y.add(p.complete),D.done(p.success),D.fail(p.error),r=qt(Wt,p,t,D)){if(D.readyState=1,c&&g.trigger("ajaxSend",[D,p]),d)return D;p.async&&p.timeout>0&&(l=n.setTimeout((function(){D.abort("timeout")}),p.timeout));try{d=!1,r.send(k,S)}catch(e){if(d)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,o,s){var u,f,h,k,b,x=t;d||(d=!0,l&&n.clearTimeout(l),r=void 0,i=s||"",D.readyState=e>0?4:0,u=e>=200&&e<300||304===e,o&&(k=function(e,t,n){for(var r,a,i,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==l[0]&&l.unshift(i),n[i]}(p,D,o)),k=function(e,t,n,r){var a,i,o,s,l,u={},d=e.dataTypes.slice();if(d[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=d.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=d.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(o=u[l+" "+i]||u["* "+i]))for(a in u)if((s=a.split(" "))[1]===i&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[a]:!0!==u[a]&&(i=s[0],d.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(p,k,D,u),u?(p.ifModified&&((b=D.getResponseHeader("Last-Modified"))&&(_.lastModified[a]=b),(b=D.getResponseHeader("etag"))&&(_.etag[a]=b)),204===e||"HEAD"===p.type?x="nocontent":304===e?x="notmodified":(x=k.state,f=k.data,u=!(h=k.error))):(h=x,!e&&x||(x="error",e<0&&(e=0))),D.status=e,D.statusText=(t||x)+"",u?v.resolveWith(m,[f,x,D]):v.rejectWith(m,[D,x,h]),D.statusCode(w),w=void 0,c&&g.trigger(u?"ajaxSuccess":"ajaxError",[D,p,u?f:h]),y.fireWith(m,[D,x]),c&&(g.trigger("ajaxComplete",[D,p]),--_.active||_.event.trigger("ajaxStop")))}return D},getJSON:function(e,t,n){return _.get(e,t,n,"json")},getScript:function(e,t){return _.get(e,void 0,t,"script")}}),_.each(["get","post"],(function(e,t){_[t]=function(e,n,r,a){return y(n)&&(a=a||r,r=n,n=void 0),_.ajax(_.extend({url:e,type:t,dataType:a,data:n,success:r},_.isPlainObject(e)&&e))}})),_._evalUrl=function(e,t){return _.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){_.globalEval(e,t)}})},_.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=_(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){_(this).wrapInner(e.call(this,t))})):this.each((function(){var t=_(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){_(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(e){return!_.expr.pseudos.visible(e)},_.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Gt=_.ajaxSettings.xhr();v.cors=!!Gt&&"withCredentials"in Gt,v.ajax=Gt=!!Gt,_.ajaxTransport((function(e){var t,r;if(v.cors||Gt&&!e.crossDomain)return{send:function(a,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)s.setRequestHeader(o,a[o]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i($t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),_.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return _.globalEval(e),e}}}),_.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),_.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=_("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Zt,Jt=[],Xt=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Jt.pop()||_.expando+"_"+Mt++;return this[e]=!0,e}}),_.ajaxPrefilter("json jsonp",(function(e,t,r){var a,i,o,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+a):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return o||_.error(a+" was not called"),o[0]},e.dataTypes[0]="json",i=n[a],n[a]=function(){o=arguments},r.always((function(){void 0===i?_(n).removeProp(a):n[a]=i,e[a]&&(e.jsonpCallback=t.jsonpCallback,Jt.push(a)),o&&y(i)&&i(o[0]),o=i=void 0})),"script"})),v.createHTMLDocument=((Zt=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Zt.childNodes.length),_.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,t.head.appendChild(r)):t=o),i=!n&&[],(a=P.exec(e))?[t.createElement(a[1])]:(a=De([e],t,i),i&&i.length&&_(i).remove(),_.merge([],a.childNodes)));var r,a,i},_.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return s>-1&&(r=kt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),o.length>0&&_.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){i=arguments,o.html(r?_("<div>").append(_.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){_.fn[t]=function(e){return this.on(t,e)}})),_.expr.pseudos.animated=function(e){return _.grep(_.timers,(function(t){return e===t.elem})).length},_.offset={setOffset:function(e,t,n){var r,a,i,o,s,l,u=_.css(e,"position"),d=_(e),c={};"static"===u&&(e.style.position="relative"),s=d.offset(),i=_.css(e,"top"),l=_.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+l).indexOf("auto")>-1?(o=(r=d.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(l)||0),y(t)&&(t=t.call(e,n,_.extend({},s))),null!=t.top&&(c.top=t.top-s.top+o),null!=t.left&&(c.left=t.left-s.left+a),"using"in t?t.using.call(e,c):d.css(c)}},_.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){_.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===_.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===_.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=_(e).offset()).top+=_.css(e,"borderTopWidth",!0),a.left+=_.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-_.css(r,"marginTop",!0),left:t.left-a.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===_.css(e,"position");)e=e.offsetParent;return e||oe}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;_.fn[e]=function(r){return q(this,(function(e,r,a){var i;if(w(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===a)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:a,n?a:i.pageYOffset):e[r]=a}),e,r,arguments.length)}})),_.each(["top","left"],(function(e,t){_.cssHooks[t]=Ge(v.pixelPosition,(function(e,n){if(n)return n=$e(e,t),Ue.test(n)?_(e).position()[t]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(e,t){_.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){_.fn[r]=function(a,i){var o=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===i?"margin":"border");return q(this,(function(t,n,a){var i;return w(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===a?_.css(t,n,s):_.style(t,n,a,s)}),t,o?a:void 0,o)}}))})),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){_.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),_.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),_.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),_.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=l.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(l.call(arguments)))}).guid=e.guid=e.guid||_.guid++,a},_.holdReady=function(e){e?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=j,_.isFunction=y,_.isWindow=w,_.camelCase=Z,_.type=x,_.now=Date.now,_.isNumeric=function(e){var t=_.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return _}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Qt=n.$;return _.noConflict=function(e){return n.$===_&&(n.$=Qt),e&&n.jQuery===_&&(n.jQuery=Kt),_},a||(n.jQuery=n.$=_),_}))},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function l(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Yt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var t=p(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function g(e){var t=h(NaN);return null!=e?f(p(t),e):p(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var v=a.momentProperties=[];function y(e,t){var n,r,a;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=p(t)),s(t._locale)||(e._locale=t._locale),v.length>0)for(n=0;n<v.length;n++)s(a=t[r=v[n]])||(e[r]=a);return e}var w=!1;function k(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===w&&(w=!0,a.updateOffset(this),w=!1)}function b(e){return e instanceof k||null!=e&&null!=e._isAMomentObject}function x(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function _(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=x(t)),n}function D(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&_(e[r])!==_(t[r]))&&o++;return o+i}function S(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function T(e,t){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,i=[],o=0;o<arguments.length;o++){if(r="","object"==typeof arguments[o]){for(var s in r+="\n["+o+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[o];i.push(r)}S(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var M,C={};function O(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),C[e]||(S(t),C[e]=!0)}function j(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function P(e,t){var n,r=f({},e);for(n in t)c(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&o(e[n])&&(r[n]=f({},r[n]));return r}function L(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,M=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var Y={};function E(e,t){var n=e.toLowerCase();Y[n]=Y[n+"s"]=Y[t]=e}function A(e){return"string"==typeof e?Y[e]||Y[e.toLowerCase()]:void 0}function N(e){var t,n,r={};for(n in e)c(e,n)&&(t=A(n))&&(r[t]=e[n]);return r}var F={};function R(e,t){F[e]=t}function I(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var H=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,W=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,V={},z={};function U(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(z[e]=a),t&&(z[t[0]]=function(){return I(a.apply(this,arguments),t[1],t[2])}),n&&(z[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function q(e,t){return e.isValid()?(t=B(t,e.localeData()),V[t]=V[t]||function(e){var t,n,r,a=e.match(H);for(t=0,n=a.length;t<n;t++)z[a[t]]?a[t]=z[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=j(a[r])?a[r].call(t,e):a[r];return i}}(t),V[t](e)):e.localeData().invalidDate()}function B(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(W.lastIndex=0;n>=0&&W.test(e);)e=e.replace(W,r),W.lastIndex=0,n-=1;return e}var $=/\d/,G=/\d\d/,Z=/\d{3}/,J=/\d{4}/,X=/[+-]?\d{6}/,K=/\d\d?/,Q=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,ae=/\d+/,ie=/[+-]?\d+/,oe=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,le=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ue={};function de(e,t,n){ue[e]=j(t)?t:function(e,r){return e&&n?n:t}}function ce(e,t){return c(ue,e)?ue[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function pe(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),l(t)&&(r=function(e,n){n[t]=_(e)}),n=0;n<e.length;n++)he[e[n]]=r}function me(e,t){pe(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function ge(e,t,n){null!=t&&c(he,e)&&he[e](t,n._a,n,e)}var ve=0,ye=1,we=2,ke=3,be=4,xe=5,_e=6,De=7,Se=8;function Te(e){return Me(e)?366:365}function Me(e){return e%4==0&&e%100!=0||e%400==0}U("Y",0,0,(function(){var e=this.year();return e<=9999?""+e:"+"+e})),U(0,["YY",2],0,(function(){return this.year()%100})),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),E("year","y"),R("year",1),de("Y",ie),de("YY",K,G),de("YYYY",ne,J),de("YYYYY",re,X),de("YYYYYY",re,X),pe(["YYYYY","YYYYYY"],ve),pe("YYYY",(function(e,t){t[ve]=2===e.length?a.parseTwoDigitYear(e):_(e)})),pe("YY",(function(e,t){t[ve]=a.parseTwoDigitYear(e)})),pe("Y",(function(e,t){t[ve]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var Ce,Oe=je("FullYear",!0);function je(e,t){return function(n){return null!=n?(Le(this,e,n),a.updateOffset(this,t),this):Pe(this,e)}}function Pe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Le(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Me(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ye(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Ye(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?Me(e)?29:28:31-r%7%2}Ce=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},U("M",["MM",2],"Mo",(function(){return this.month()+1})),U("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),U("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),E("month","M"),R("month",8),de("M",K),de("MM",K,G),de("MMM",(function(e,t){return t.monthsShortRegex(e)})),de("MMMM",(function(e,t){return t.monthsRegex(e)})),pe(["M","MM"],(function(e,t){t[ye]=_(e)-1})),pe(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ye]=a:p(n).invalidMonth=e}));var Ee=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ae="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ne="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Fe(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Ce.call(this._shortMonthsParse,o))?a:null:-1!==(a=Ce.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Ce.call(this._shortMonthsParse,o))?a:-1!==(a=Ce.call(this._longMonthsParse,o))?a:null:-1!==(a=Ce.call(this._longMonthsParse,o))?a:-1!==(a=Ce.call(this._shortMonthsParse,o))?a:null}function Re(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=_(t);else if(!l(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ye(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ie(e){return null!=e?(Re(this,e),a.updateOffset(this,!0),this):Pe(this,"Month")}var He=le,We=le;function Ve(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),a[t]=fe(a[t]);for(t=0;t<24;t++)i[t]=fe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ze(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}function Ue(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function qe(e,t,n){var r=7+t-n;return-(7+Ue(e,0,r).getUTCDay()-t)%7+r-1}function Be(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+qe(e,r,a);return s<=0?o=Te(i=e-1)+s:s>Te(e)?(i=e+1,o=s-Te(e)):(i=e,o=s),{year:i,dayOfYear:o}}function $e(e,t,n){var r,a,i=qe(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+Ge(a=e.year()-1,t,n):o>Ge(e.year(),t,n)?(r=o-Ge(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Ge(e,t,n){var r=qe(e,t,n),a=qe(e+1,t,n);return(Te(e)-r+a)/7}function Ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),E("week","w"),E("isoWeek","W"),R("week",5),R("isoWeek",5),de("w",K),de("ww",K,G),de("W",K),de("WW",K,G),me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=_(e)})),U("d",0,"do","day"),U("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),U("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),U("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),E("day","d"),E("weekday","e"),E("isoWeekday","E"),R("day",11),R("weekday",11),R("isoWeekday",11),de("d",K),de("e",K),de("E",K),de("dd",(function(e,t){return t.weekdaysMinRegex(e)})),de("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),de("dddd",(function(e,t){return t.weekdaysRegex(e)})),me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),me(["d","e","E"],(function(e,t,n,r){t[r]=_(e)}));var Je="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Xe="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Qe(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Ce.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Ce.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Ce.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Ce.call(this._weekdaysParse,o))?a:-1!==(a=Ce.call(this._shortWeekdaysParse,o))?a:-1!==(a=Ce.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Ce.call(this._shortWeekdaysParse,o))?a:-1!==(a=Ce.call(this._weekdaysParse,o))?a:-1!==(a=Ce.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Ce.call(this._minWeekdaysParse,o))?a:-1!==(a=Ce.call(this._weekdaysParse,o))?a:-1!==(a=Ce.call(this._shortWeekdaysParse,o))?a:null}var et=le,tt=le,nt=le;function rt(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],l=[],u=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),o.push(r),s.push(a),l.push(i),u.push(r),u.push(a),u.push(i);for(o.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)s[t]=fe(s[t]),l[t]=fe(l[t]),u[t]=fe(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function at(){return this.hours()%12||12}function it(e,t){U(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function ot(e,t){return t._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,at),U("k",["kk",2],0,(function(){return this.hours()||24})),U("hmm",0,0,(function(){return""+at.apply(this)+I(this.minutes(),2)})),U("hmmss",0,0,(function(){return""+at.apply(this)+I(this.minutes(),2)+I(this.seconds(),2)})),U("Hmm",0,0,(function(){return""+this.hours()+I(this.minutes(),2)})),U("Hmmss",0,0,(function(){return""+this.hours()+I(this.minutes(),2)+I(this.seconds(),2)})),it("a",!0),it("A",!1),E("hour","h"),R("hour",13),de("a",ot),de("A",ot),de("H",K),de("h",K),de("k",K),de("HH",K,G),de("hh",K,G),de("kk",K,G),de("hmm",Q),de("hmmss",ee),de("Hmm",Q),de("Hmmss",ee),pe(["H","HH"],ke),pe(["k","kk"],(function(e,t,n){var r=_(e);t[ke]=24===r?0:r})),pe(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),pe(["h","hh"],(function(e,t,n){t[ke]=_(e),p(n).bigHour=!0})),pe("hmm",(function(e,t,n){var r=e.length-2;t[ke]=_(e.substr(0,r)),t[be]=_(e.substr(r)),p(n).bigHour=!0})),pe("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[ke]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[xe]=_(e.substr(a)),p(n).bigHour=!0})),pe("Hmm",(function(e,t,n){var r=e.length-2;t[ke]=_(e.substr(0,r)),t[be]=_(e.substr(r))})),pe("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[ke]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[xe]=_(e.substr(a))}));var st,lt=je("Hours",!0),ut={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ae,monthsShort:Ne,week:{dow:0,doy:6},weekdays:Je,weekdaysMin:Ke,weekdaysShort:Xe,meridiemParse:/[ap]\.?m?\.?/i},dt={},ct={};function ft(e){return e?e.toLowerCase().replace("_","-"):e}function ht(t){var r=null;if(!dt[t]&&void 0!==e&&e&&e.exports)try{r=st._abbr,n(22)("./"+t),pt(r)}catch(e){}return dt[t]}function pt(e,t){var n;return e&&((n=s(t)?gt(e):mt(e,t))?st=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),st._abbr}function mt(e,t){if(null!==t){var n,r=ut;if(t.abbr=e,null!=dt[e])O("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=dt[e]._config;else if(null!=t.parentLocale)if(null!=dt[t.parentLocale])r=dt[t.parentLocale]._config;else{if(null==(n=ht(t.parentLocale)))return ct[t.parentLocale]||(ct[t.parentLocale]=[]),ct[t.parentLocale].push({name:e,config:t}),null;r=n._config}return dt[e]=new L(P(r,t)),ct[e]&&ct[e].forEach((function(e){mt(e.name,e.config)})),pt(e),dt[e]}return delete dt[e],null}function gt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return st;if(!i(e)){if(t=ht(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=ft(e[i]).split("-")).length,n=(n=ft(e[i+1]))?n.split("-"):null;t>0;){if(r=ht(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&D(a,n,!0)>=t-1)break;t--}i++}return st}(e)}function vt(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[ye]<0||n[ye]>11?ye:n[we]<1||n[we]>Ye(n[ve],n[ye])?we:n[ke]<0||n[ke]>24||24===n[ke]&&(0!==n[be]||0!==n[xe]||0!==n[_e])?ke:n[be]<0||n[be]>59?be:n[xe]<0||n[xe]>59?xe:n[_e]<0||n[_e]>999?_e:-1,p(e)._overflowDayOfYear&&(t<ve||t>we)&&(t=we),p(e)._overflowWeeks&&-1===t&&(t=De),p(e)._overflowWeekday&&-1===t&&(t=Se),p(e).overflow=t),e}function yt(e,t,n){return null!=e?e:null!=t?t:n}function wt(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[we]&&null==e._a[ye]&&function(e){var t,n,r,a,i,o,s,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,o=4,n=yt(t.GG,e._a[ve],$e(Et(),1,4).year),r=yt(t.W,1),((a=yt(t.E,1))<1||a>7)&&(l=!0);else{i=e._locale._week.dow,o=e._locale._week.doy;var u=$e(Et(),i,o);n=yt(t.gg,e._a[ve],u.year),r=yt(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(l=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(l=!0)):a=i}r<1||r>Ge(n,i,o)?p(e)._overflowWeeks=!0:null!=l?p(e)._overflowWeekday=!0:(s=Be(n,r,a,i,o),e._a[ve]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=yt(e._a[ve],r[ve]),(e._dayOfYear>Te(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=Ue(o,0,e._dayOfYear),e._a[ye]=n.getUTCMonth(),e._a[we]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ke]&&0===e._a[be]&&0===e._a[xe]&&0===e._a[_e]&&(e._nextDay=!0,e._a[ke]=0),e._d=(e._useUTC?Ue:ze).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ke]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(p(e).weekdayMismatch=!0)}}var kt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,xt=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Dt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],St=/^\/?Date\((\-?\d+)/i;function Tt(e){var t,n,r,a,i,o,s=e._i,l=kt.exec(s)||bt.exec(s);if(l){for(p(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(l[1])){a=_t[t][0],r=!1!==_t[t][2];break}if(null==a)return void(e._isValid=!1);if(l[3]){for(t=0,n=Dt.length;t<n;t++)if(Dt[t][1].exec(l[3])){i=(l[2]||" ")+Dt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(l[4]){if(!xt.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),Pt(e)}else e._isValid=!1}var Mt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Ct(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var Ot={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function jt(e){var t,n,r,a,i,o,s,l=Mt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){var u=(t=l[4],n=l[3],r=l[2],a=l[5],i=l[6],o=l[7],s=[Ct(t),Ne.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],o&&s.push(parseInt(o,10)),s);if(!function(e,t,n){return!e||Xe.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],u,e))return;e._a=u,e._tzm=function(e,t,n){if(e)return Ot[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function Pt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],p(e).empty=!0;var t,n,r,i,o,s=""+e._i,l=s.length,u=0;for(r=B(e._f,e._locale).match(H)||[],t=0;t<r.length;t++)i=r[t],(n=(s.match(ce(i,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&p(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),u+=n.length),z[i]?(n?p(e).empty=!1:p(e).unusedTokens.push(i),ge(i,n,e)):e._strict&&!n&&p(e).unusedTokens.push(i);p(e).charsLeftOver=l-u,s.length>0&&p(e).unusedInput.push(s),e._a[ke]<=12&&!0===p(e).bigHour&&e._a[ke]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[ke]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[ke],e._meridiem),wt(e),vt(e)}else jt(e);else Tt(e)}function Lt(e){var t=e._i,n=e._f;return e._locale=e._locale||gt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new k(vt(t)):(u(t)?e._d=t:i(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Pt(t),m(t)&&(i+=p(t).charsLeftOver,i+=10*p(t).unusedTokens.length,p(t).score=i,(null==r||i<r)&&(r=i,n=t));f(e,n||t)}(e):n?Pt(e):function(e){var t=e._i;s(t)?e._d=new Date(a.now()):u(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=St.exec(e._i);null===t?(Tt(e),!1===e._isValid&&(delete e._isValid,jt(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=d(t.slice(0),(function(e){return parseInt(e,10)})),wt(e)):o(t)?function(e){if(!e._d){var t=N(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),wt(e)}}(e):l(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function Yt(e,t,n,r,a){var s,l={};return!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new k(vt(Lt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Et(e,t,n,r){return Yt(e,t,n,r,!1)}a.createFromInputFallback=T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var At=T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Et.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Nt=T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Et.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function Ft(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Et();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Rt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function It(e){var t=N(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,l=t.minute||0,u=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Ce.call(Rt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Rt.length;++r)if(e[Rt[r]]){if(n)return!1;parseFloat(e[Rt[r]])!==_(e[Rt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=gt(),this._bubble()}function Ht(e){return e instanceof It}function Wt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Vt(e,t){U(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+I(~~(e/60),2)+t+I(~~e%60,2)}))}Vt("Z",":"),Vt("ZZ",""),de("Z",se),de("ZZ",se),pe(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ut(se,e)}));var zt=/([\+\-]|\d\d)/gi;function Ut(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(zt)||["-",0,0],a=60*r[1]+_(r[2]);return 0===a?0:"+"===r[0]?a:-a}function qt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(b(e)||u(e)?e.valueOf():Et(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Et(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function $t(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Gt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Jt(e,t){var n,r,a,i,o,s,u=e,d=null;return Ht(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:l(e)?(u={},t?u[t]=e:u.milliseconds=e):(d=Gt.exec(e))?(n="-"===d[1]?-1:1,u={y:0,d:_(d[we])*n,h:_(d[ke])*n,m:_(d[be])*n,s:_(d[xe])*n,ms:_(Wt(1e3*d[_e]))*n}):(d=Zt.exec(e))?(n="-"===d[1]?-1:1,u={y:Xt(d[2],n),M:Xt(d[3],n),w:Xt(d[4],n),d:Xt(d[5],n),h:Xt(d[6],n),m:Xt(d[7],n),s:Xt(d[8],n)}):null==u?u={}:"object"==typeof u&&("from"in u||"to"in u)&&(i=Et(u.from),o=Et(u.to),a=i.isValid()&&o.isValid()?(o=qt(o,i),i.isBefore(o)?s=Kt(i,o):((s=Kt(o,i)).milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0},(u={}).ms=a.milliseconds,u.M=a.months),r=new It(u),Ht(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Xt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Kt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Qt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(O(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),en(this,Jt(n="string"==typeof n?+n:n,r),e),this}}function en(e,t,n,r){var i=t._milliseconds,o=Wt(t._days),s=Wt(t._months);e.isValid()&&(r=null==r||r,s&&Re(e,Pe(e,"Month")+s*n),o&&Le(e,"Date",Pe(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Jt.fn=It.prototype,Jt.invalid=function(){return Jt(NaN)};var tn=Qt(1,"add"),nn=Qt(-1,"subtract");function rn(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function an(e){var t;return void 0===e?this._locale._abbr:(null!=(t=gt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var on=T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function sn(){return this._locale}var ln=1e3,un=60*ln,dn=60*un,cn=3506328*dn;function fn(e,t){return(e%t+t)%t}function hn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-cn:new Date(e,t,n).valueOf()}function pn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-cn:Date.UTC(e,t,n)}function mn(e,t){U(0,[e,e.length],0,t)}function gn(e,t,n,r,a){var i;return null==e?$e(this,r,a).year:(t>(i=Ge(e,r,a))&&(t=i),vn.call(this,e,t,n,r,a))}function vn(e,t,n,r,a){var i=Be(e,t,n,r,a),o=Ue(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}U(0,["gg",2],0,(function(){return this.weekYear()%100})),U(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),E("weekYear","gg"),E("isoWeekYear","GG"),R("weekYear",1),R("isoWeekYear",1),de("G",ie),de("g",ie),de("GG",K,G),de("gg",K,G),de("GGGG",ne,J),de("gggg",ne,J),de("GGGGG",re,X),de("ggggg",re,X),me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=_(e)})),me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),U("Q",0,"Qo","quarter"),E("quarter","Q"),R("quarter",7),de("Q",$),pe("Q",(function(e,t){t[ye]=3*(_(e)-1)})),U("D",["DD",2],"Do","date"),E("date","D"),R("date",9),de("D",K),de("DD",K,G),de("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),pe(["D","DD"],we),pe("Do",(function(e,t){t[we]=_(e.match(K)[0])}));var yn=je("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),E("dayOfYear","DDD"),R("dayOfYear",4),de("DDD",te),de("DDDD",Z),pe(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=_(e)})),U("m",["mm",2],0,"minute"),E("minute","m"),R("minute",14),de("m",K),de("mm",K,G),pe(["m","mm"],be);var wn=je("Minutes",!1);U("s",["ss",2],0,"second"),E("second","s"),R("second",15),de("s",K),de("ss",K,G),pe(["s","ss"],xe);var kn,bn=je("Seconds",!1);for(U("S",0,0,(function(){return~~(this.millisecond()/100)})),U(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),U(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),U(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),U(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),U(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),U(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),E("millisecond","ms"),R("millisecond",16),de("S",te,$),de("SS",te,G),de("SSS",te,Z),kn="SSSS";kn.length<=9;kn+="S")de(kn,ae);function xn(e,t){t[_e]=_(1e3*("0."+e))}for(kn="S";kn.length<=9;kn+="S")pe(kn,xn);var _n=je("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var Dn=k.prototype;function Sn(e){return e}Dn.add=tn,Dn.calendar=function(e,t){var n=e||Et(),r=qt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(j(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Et(n)))},Dn.clone=function(){return new k(this)},Dn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=qt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=A(t)){case"year":i=rn(this,r)/12;break;case"month":i=rn(this,r);break;case"quarter":i=rn(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:x(i)},Dn.endOf=function(e){var t;if(void 0===(e=A(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?pn:hn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=dn-fn(t+(this._isUTC?0:this.utcOffset()*un),dn)-1;break;case"minute":t=this._d.valueOf(),t+=un-fn(t,un)-1;break;case"second":t=this._d.valueOf(),t+=ln-fn(t,ln)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Dn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=q(this,e);return this.localeData().postformat(t)},Dn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Et(e).isValid())?Jt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Dn.fromNow=function(e){return this.from(Et(),e)},Dn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Et(e).isValid())?Jt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Dn.toNow=function(e){return this.to(Et(),e)},Dn.get=function(e){return j(this[e=A(e)])?this[e]():this},Dn.invalidAt=function(){return p(this).overflow},Dn.isAfter=function(e,t){var n=b(e)?e:Et(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=A(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Dn.isBefore=function(e,t){var n=b(e)?e:Et(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=A(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Dn.isBetween=function(e,t,n,r){var a=b(e)?e:Et(e),i=b(t)?t:Et(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},Dn.isSame=function(e,t){var n,r=b(e)?e:Et(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=A(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Dn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Dn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Dn.isValid=function(){return m(this)},Dn.lang=on,Dn.locale=an,Dn.localeData=sn,Dn.max=Nt,Dn.min=At,Dn.parsingFlags=function(){return f({},p(this))},Dn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:F[n]});return t.sort((function(e,t){return e.priority-t.priority})),t}(e=N(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(j(this[e=A(e)]))return this[e](t);return this},Dn.startOf=function(e){var t;if(void 0===(e=A(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?pn:hn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=fn(t+(this._isUTC?0:this.utcOffset()*un),dn);break;case"minute":t=this._d.valueOf(),t-=fn(t,un);break;case"second":t=this._d.valueOf(),t-=fn(t,ln)}return this._d.setTime(t),a.updateOffset(this,!0),this},Dn.subtract=nn,Dn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Dn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Dn.toDate=function(){return new Date(this.valueOf())},Dn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?q(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):j(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",q(n,"Z")):q(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Dn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},Dn.toJSON=function(){return this.isValid()?this.toISOString():null},Dn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Dn.unix=function(){return Math.floor(this.valueOf()/1e3)},Dn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Dn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Dn.year=Oe,Dn.isLeapYear=function(){return Me(this.year())},Dn.weekYear=function(e){return gn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Dn.isoWeekYear=function(e){return gn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Dn.quarter=Dn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Dn.month=Ie,Dn.daysInMonth=function(){return Ye(this.year(),this.month())},Dn.week=Dn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Dn.isoWeek=Dn.isoWeeks=function(e){var t=$e(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Dn.weeksInYear=function(){var e=this.localeData()._week;return Ge(this.year(),e.dow,e.doy)},Dn.isoWeeksInYear=function(){return Ge(this.year(),1,4)},Dn.date=yn,Dn.day=Dn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Dn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Dn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Dn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Dn.hour=Dn.hours=lt,Dn.minute=Dn.minutes=wn,Dn.second=Dn.seconds=bn,Dn.millisecond=Dn.milliseconds=_n,Dn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ut(se,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Bt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?en(this,Jt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},Dn.utc=function(e){return this.utcOffset(0,e)},Dn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},Dn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ut(oe,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Dn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Et(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Dn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Dn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Dn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Dn.isUtc=$t,Dn.isUTC=$t,Dn.zoneAbbr=function(){return this._isUTC?"UTC":""},Dn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Dn.dates=T("dates accessor is deprecated. Use date instead.",yn),Dn.months=T("months accessor is deprecated. Use month instead",Ie),Dn.years=T("years accessor is deprecated. Use year instead",Oe),Dn.zone=T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Dn.isDSTShifted=T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),(e=Lt(e))._a){var t=e._isUTC?h(e._a):Et(e._a);this._isDSTShifted=this.isValid()&&D(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var Tn=L.prototype;function Mn(e,t,n,r){var a=gt(),i=h().set(r,t);return a[n](i,e)}function Cn(e,t,n){if(l(e)&&(t=e,e=void 0),e=e||"",null!=t)return Mn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Mn(e,r,n,"month");return a}function On(e,t,n,r){"boolean"==typeof e?(l(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,l(t)&&(n=t,t=void 0),t=t||"");var a,i=gt(),o=e?i._week.dow:0;if(null!=n)return Mn(t,(n+o)%7,r,"day");var s=[];for(a=0;a<7;a++)s[a]=Mn(t,(a+o)%7,r,"day");return s}Tn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return j(r)?r.call(t,n):r},Tn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,(function(e){return e.slice(1)})),this._longDateFormat[e])},Tn.invalidDate=function(){return this._invalidDate},Tn.ordinal=function(e){return this._ordinal.replace("%d",e)},Tn.preparse=Sn,Tn.postformat=Sn,Tn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return j(a)?a(e,t,n,r):a.replace(/%d/i,e)},Tn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return j(n)?n(t):n.replace(/%s/i,t)},Tn.set=function(e){var t,n;for(n in e)j(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Tn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ee).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Tn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ee.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Tn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return Fe.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Tn.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Ve.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=We),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Tn.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Ve.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=He),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Tn.week=function(e){return $e(e,this._week.dow,this._week.doy).week},Tn.firstDayOfYear=function(){return this._week.doy},Tn.firstDayOfWeek=function(){return this._week.dow},Tn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ze(n,this._week.dow):e?n[e.day()]:n},Tn.weekdaysMin=function(e){return!0===e?Ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Tn.weekdaysShort=function(e){return!0===e?Ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Tn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Qe.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Tn.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=et),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Tn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=tt),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Tn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=nt),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Tn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Tn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},pt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===_(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=T("moment.lang is deprecated. Use moment.locale instead.",pt),a.langData=T("moment.langData is deprecated. Use moment.localeData instead.",gt);var jn=Math.abs;function Pn(e,t,n,r){var a=Jt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Ln(e){return e<0?Math.floor(e):Math.ceil(e)}function Yn(e){return 4800*e/146097}function En(e){return 146097*e/4800}function An(e){return function(){return this.as(e)}}var Nn=An("ms"),Fn=An("s"),Rn=An("m"),In=An("h"),Hn=An("d"),Wn=An("w"),Vn=An("M"),zn=An("Q"),Un=An("y");function qn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Bn=qn("milliseconds"),$n=qn("seconds"),Gn=qn("minutes"),Zn=qn("hours"),Jn=qn("days"),Xn=qn("months"),Kn=qn("years"),Qn=Math.round,er={ss:44,s:45,m:45,h:22,d:26,M:11};function tr(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var nr=Math.abs;function rr(e){return(e>0)-(e<0)||+e}function ar(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=nr(this._milliseconds)/1e3,r=nr(this._days),a=nr(this._months);e=x(n/60),t=x(e/60),n%=60,e%=60;var i=x(a/12),o=a%=12,s=r,l=t,u=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var f=c<0?"-":"",h=rr(this._months)!==rr(c)?"-":"",p=rr(this._days)!==rr(c)?"-":"",m=rr(this._milliseconds)!==rr(c)?"-":"";return f+"P"+(i?h+i+"Y":"")+(o?h+o+"M":"")+(s?p+s+"D":"")+(l||u||d?"T":"")+(l?m+l+"H":"")+(u?m+u+"M":"")+(d?m+d+"S":"")}var ir=It.prototype;return ir.isValid=function(){return this._isValid},ir.abs=function(){var e=this._data;return this._milliseconds=jn(this._milliseconds),this._days=jn(this._days),this._months=jn(this._months),e.milliseconds=jn(e.milliseconds),e.seconds=jn(e.seconds),e.minutes=jn(e.minutes),e.hours=jn(e.hours),e.months=jn(e.months),e.years=jn(e.years),this},ir.add=function(e,t){return Pn(this,e,t,1)},ir.subtract=function(e,t){return Pn(this,e,t,-1)},ir.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=A(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Yn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(En(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},ir.asMilliseconds=Nn,ir.asSeconds=Fn,ir.asMinutes=Rn,ir.asHours=In,ir.asDays=Hn,ir.asWeeks=Wn,ir.asMonths=Vn,ir.asQuarters=zn,ir.asYears=Un,ir.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*_(this._months/12):NaN},ir._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,l=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Ln(En(s)+o),o=0,s=0),l.milliseconds=i%1e3,e=x(i/1e3),l.seconds=e%60,t=x(e/60),l.minutes=t%60,n=x(t/60),l.hours=n%24,o+=x(n/24),a=x(Yn(o)),s+=a,o-=Ln(En(a)),r=x(s/12),s%=12,l.days=o,l.months=s,l.years=r,this},ir.clone=function(){return Jt(this)},ir.get=function(e){return e=A(e),this.isValid()?this[e+"s"]():NaN},ir.milliseconds=Bn,ir.seconds=$n,ir.minutes=Gn,ir.hours=Zn,ir.days=Jn,ir.weeks=function(){return x(this.days()/7)},ir.months=Xn,ir.years=Kn,ir.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Jt(e).abs(),a=Qn(r.as("s")),i=Qn(r.as("m")),o=Qn(r.as("h")),s=Qn(r.as("d")),l=Qn(r.as("M")),u=Qn(r.as("y")),d=a<=er.ss&&["s",a]||a<er.s&&["ss",a]||i<=1&&["m"]||i<er.m&&["mm",i]||o<=1&&["h"]||o<er.h&&["hh",o]||s<=1&&["d"]||s<er.d&&["dd",s]||l<=1&&["M"]||l<er.M&&["MM",l]||u<=1&&["y"]||["yy",u];return d[2]=t,d[3]=+e>0,d[4]=n,tr.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},ir.toISOString=ar,ir.toString=ar,ir.toJSON=ar,ir.locale=an,ir.localeData=sn,ir.toIsoString=T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ar),ir.lang=on,U("X",0,0,"unix"),U("x",0,0,"valueOf"),de("x",ie),de("X",/[+-]?\d+(\.\d{1,3})?/),pe("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))})),pe("x",(function(e,t,n){n._d=new Date(_(e))})),a.version="2.24.0",t=Et,a.fn=Dn,a.min=function(){return Ft("isBefore",[].slice.call(arguments,0))},a.max=function(){return Ft("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return Et(1e3*e)},a.months=function(e,t){return Cn(e,t,"months")},a.isDate=u,a.locale=pt,a.invalid=g,a.duration=Jt,a.isMoment=b,a.weekdays=function(e,t,n){return On(e,t,n,"weekdays")},a.parseZone=function(){return Et.apply(null,arguments).parseZone()},a.localeData=gt,a.isDuration=Ht,a.monthsShort=function(e,t){return Cn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return On(e,t,n,"weekdaysMin")},a.defineLocale=mt,a.updateLocale=function(e,t){if(null!=t){var n,r,a=ut;null!=(r=ht(e))&&(a=r._config),t=P(a,t),(n=new L(t)).parentLocale=dt[e],dt[e]=n,pt(e)}else null!=dt[e]&&(null!=dt[e].parentLocale?dt[e]=dt[e].parentLocale:null!=dt[e]&&delete dt[e]);return dt[e]},a.locales=function(){return M(dt)},a.weekdaysShort=function(e,t,n){return On(e,t,n,"weekdaysShort")},a.normalizeUnits=A,a.relativeTimeRounding=function(e){return void 0===e?Qn:"function"==typeof e&&(Qn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==er[e]&&(void 0===t?er[e]:(er[e]=t,"s"===e&&(er.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Dn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(21)(e))},function(e,t,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),s=function(e,t){return t?t.querySelector(e):document.querySelector(e)},l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=s.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,d=0,c=[],f=n(5);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(w(r.parts[o],t))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(w(r.parts[o],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function m(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(e.insertAt.before,n);n.insertBefore(t,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return y(t,e.attrs),m(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function w(e,t){var n,r,a,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var o=d++;n=u||(u=v(t)),r=x.bind(null,n,o,!1),a=x.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),m(e,t),t}(t),r=D.bind(null,n,t),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=_.bind(null,n),a=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var o=n[a];(s=i[o.id]).refs--,r.push(s)}e&&h(p(e,t),t);for(a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var k,b=(k=[],function(e,t){return k[e]=t,k.filter(Boolean).join("\n")});function x(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function _(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function D(e,t,n){var r=n.css,a=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(r=f(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}},function(e,t,n){var r=n(4);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(e,t,n){"use strict";(function(e){var n="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},r=function(e,t,n,a,i,o,s,l,u){this.numeralDecimalMark=e||".",this.numeralIntegerScale=t>0?t:0,this.numeralDecimalScale=n>=0?n:2,this.numeralThousandsGroupStyle=a||r.groupStyle.thousand,this.numeralPositiveOnly=!!i,this.stripLeadingZeroes=!1!==o,this.prefix=s||""===s?s:"",this.signBeforePrefix=!!l,this.delimiter=u||""===u?u:",",this.delimiterRE=u?new RegExp("\\"+u,"g"):""};r.groupStyle={thousand:"thousand",lakh:"lakh",wan:"wan",none:"none"},r.prototype={getRawValue:function(e){return e.replace(this.delimiterRE,"").replace(this.numeralDecimalMark,".")},format:function(e){var t,n,a,i,o="";switch(e=e.replace(/[A-Za-z]/g,"").replace(this.numeralDecimalMark,"M").replace(/[^\dM-]/g,"").replace(/^\-/,"N").replace(/\-/g,"").replace("N",this.numeralPositiveOnly?"":"-").replace("M",this.numeralDecimalMark),this.stripLeadingZeroes&&(e=e.replace(/^(-)?0+(?=\d)/,"$1")),n="-"===e.slice(0,1)?"-":"",a=void 0!==this.prefix?this.signBeforePrefix?n+this.prefix:this.prefix+n:n,i=e,e.indexOf(this.numeralDecimalMark)>=0&&(i=(t=e.split(this.numeralDecimalMark))[0],o=this.numeralDecimalMark+t[1].slice(0,this.numeralDecimalScale)),"-"===n&&(i=i.slice(1)),this.numeralIntegerScale>0&&(i=i.slice(0,this.numeralIntegerScale)),this.numeralThousandsGroupStyle){case r.groupStyle.lakh:i=i.replace(/(\d)(?=(\d\d)+\d$)/g,"$1"+this.delimiter);break;case r.groupStyle.wan:i=i.replace(/(\d)(?=(\d{4})+$)/g,"$1"+this.delimiter);break;case r.groupStyle.thousand:i=i.replace(/(\d)(?=(\d{3})+$)/g,"$1"+this.delimiter)}return a+i.toString()+(this.numeralDecimalScale>0?o.toString():"")}};var a=r,i=function(e,t,n){this.date=[],this.blocks=[],this.datePattern=e,this.dateMin=t.split("-").reverse().map((function(e){return parseInt(e,10)})),2===this.dateMin.length&&this.dateMin.unshift(0),this.dateMax=n.split("-").reverse().map((function(e){return parseInt(e,10)})),2===this.dateMax.length&&this.dateMax.unshift(0),this.initBlocks()};i.prototype={initBlocks:function(){var e=this;e.datePattern.forEach((function(t){"Y"===t?e.blocks.push(4):e.blocks.push(2)}))},getISOFormatDate:function(){var e=this.date;return e[2]?e[2]+"-"+this.addLeadingZero(e[1])+"-"+this.addLeadingZero(e[0]):""},getBlocks:function(){return this.blocks},getValidatedDate:function(e){var t=this,n="";return e=e.replace(/[^\d]/g,""),t.blocks.forEach((function(r,a){if(e.length>0){var i=e.slice(0,r),o=i.slice(0,1),s=e.slice(r);switch(t.datePattern[a]){case"d":"00"===i?i="01":parseInt(o,10)>3?i="0"+o:parseInt(i,10)>31&&(i="31");break;case"m":"00"===i?i="01":parseInt(o,10)>1?i="0"+o:parseInt(i,10)>12&&(i="12")}n+=i,e=s}})),this.getFixedDateString(n)},getFixedDateString:function(e){var t,n,r,a=this,i=a.datePattern,o=[],s=0,l=0,u=0,d=0,c=0,f=0,h=!1;return 4===e.length&&"y"!==i[0].toLowerCase()&&"y"!==i[1].toLowerCase()&&(c=2-(d="d"===i[0]?0:2),t=parseInt(e.slice(d,d+2),10),n=parseInt(e.slice(c,c+2),10),o=this.getFixedDate(t,n,0)),8===e.length&&(i.forEach((function(e,t){switch(e){case"d":s=t;break;case"m":l=t;break;default:u=t}})),f=2*u,d=s<=u?2*s:2*s+2,c=l<=u?2*l:2*l+2,t=parseInt(e.slice(d,d+2),10),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(f,f+4),10),h=4===e.slice(f,f+4).length,o=this.getFixedDate(t,n,r)),4!==e.length||"y"!==i[0]&&"y"!==i[1]||(f=2-(c="m"===i[0]?0:2),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(f,f+2),10),h=2===e.slice(f,f+2).length,o=[0,n,r]),6!==e.length||"Y"!==i[0]&&"Y"!==i[1]||(f=2-.5*(c="m"===i[0]?0:4),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(f,f+4),10),h=4===e.slice(f,f+4).length,o=[0,n,r]),o=a.getRangeFixedDate(o),a.date=o,0===o.length?e:i.reduce((function(e,t){switch(t){case"d":return e+(0===o[0]?"":a.addLeadingZero(o[0]));case"m":return e+(0===o[1]?"":a.addLeadingZero(o[1]));case"y":return e+(h?a.addLeadingZeroForYear(o[2],!1):"");case"Y":return e+(h?a.addLeadingZeroForYear(o[2],!0):"")}}),"")},getRangeFixedDate:function(e){var t=this.datePattern,n=this.dateMin||[],r=this.dateMax||[];return!e.length||n.length<3&&r.length<3?e:t.find((function(e){return"y"===e.toLowerCase()}))&&0===e[2]?e:r.length&&(r[2]<e[2]||r[2]===e[2]&&(r[1]<e[1]||r[1]===e[1]&&r[0]<e[0]))?r:n.length&&(n[2]>e[2]||n[2]===e[2]&&(n[1]>e[1]||n[1]===e[1]&&n[0]>e[0]))?n:e},getFixedDate:function(e,t,n){return e=Math.min(e,31),t=Math.min(t,12),n=parseInt(n||0,10),(t<7&&t%2==0||t>8&&t%2==1)&&(e=Math.min(e,2===t?this.isLeapYear(n)?29:28:30)),[e,t,n]},isLeapYear:function(e){return e%4==0&&e%100!=0||e%400==0},addLeadingZero:function(e){return(e<10?"0":"")+e},addLeadingZeroForYear:function(e,t){return t?(e<10?"000":e<100?"00":e<1e3?"0":"")+e:(e<10?"0":"")+e}};var o=i,s=function(e,t){this.time=[],this.blocks=[],this.timePattern=e,this.timeFormat=t,this.initBlocks()};s.prototype={initBlocks:function(){var e=this;e.timePattern.forEach((function(){e.blocks.push(2)}))},getISOFormatTime:function(){var e=this.time;return e[2]?this.addLeadingZero(e[0])+":"+this.addLeadingZero(e[1])+":"+this.addLeadingZero(e[2]):""},getBlocks:function(){return this.blocks},getTimeFormatOptions:function(){return"12"===String(this.timeFormat)?{maxHourFirstDigit:1,maxHours:12,maxMinutesFirstDigit:5,maxMinutes:60}:{maxHourFirstDigit:2,maxHours:23,maxMinutesFirstDigit:5,maxMinutes:60}},getValidatedTime:function(e){var t=this,n="";e=e.replace(/[^\d]/g,"");var r=t.getTimeFormatOptions();return t.blocks.forEach((function(a,i){if(e.length>0){var o=e.slice(0,a),s=o.slice(0,1),l=e.slice(a);switch(t.timePattern[i]){case"h":parseInt(s,10)>r.maxHourFirstDigit?o="0"+s:parseInt(o,10)>r.maxHours&&(o=r.maxHours+"");break;case"m":case"s":parseInt(s,10)>r.maxMinutesFirstDigit?o="0"+s:parseInt(o,10)>r.maxMinutes&&(o=r.maxMinutes+"")}n+=o,e=l}})),this.getFixedTimeString(n)},getFixedTimeString:function(e){var t,n,r,a=this,i=a.timePattern,o=[],s=0,l=0,u=0,d=0,c=0,f=0;return 6===e.length&&(i.forEach((function(e,t){switch(e){case"s":s=2*t;break;case"m":l=2*t;break;case"h":u=2*t}})),f=u,c=l,d=s,t=parseInt(e.slice(d,d+2),10),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(f,f+2),10),o=this.getFixedTime(r,n,t)),4===e.length&&a.timePattern.indexOf("s")<0&&(i.forEach((function(e,t){switch(e){case"m":l=2*t;break;case"h":u=2*t}})),f=u,c=l,t=0,n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(f,f+2),10),o=this.getFixedTime(r,n,t)),a.time=o,0===o.length?e:i.reduce((function(e,t){switch(t){case"s":return e+a.addLeadingZero(o[2]);case"m":return e+a.addLeadingZero(o[1]);case"h":return e+a.addLeadingZero(o[0])}}),"")},getFixedTime:function(e,t,n){return n=Math.min(parseInt(n||0,10),60),t=Math.min(t,60),[e=Math.min(e,60),t,n]},addLeadingZero:function(e){return(e<10?"0":"")+e}};var l=s,u=function(e,t){this.delimiter=t||""===t?t:" ",this.delimiterRE=t?new RegExp("\\"+t,"g"):"",this.formatter=e};u.prototype={setFormatter:function(e){this.formatter=e},format:function(e){this.formatter.clear();for(var t,n="",r=!1,a=0,i=(e=(e=(e=e.replace(/[^\d+]/g,"")).replace(/^\+/,"B").replace(/\+/g,"").replace("B","+")).replace(this.delimiterRE,"")).length;a<i;a++)t=this.formatter.inputDigit(e.charAt(a)),/[\s()-]/g.test(t)?(n=t,r=!0):r||(n=t);return n=(n=n.replace(/[()]/g,"")).replace(/[\s-]/g,this.delimiter)}};var d=u,c={blocks:{uatp:[4,5,6],amex:[4,6,5],diners:[4,6,4],discover:[4,4,4,4],mastercard:[4,4,4,4],dankort:[4,4,4,4],instapayment:[4,4,4,4],jcb15:[4,6,5],jcb:[4,4,4,4],maestro:[4,4,4,4],visa:[4,4,4,4],mir:[4,4,4,4],unionPay:[4,4,4,4],general:[4,4,4,4]},re:{uatp:/^(?!1800)1\d{0,14}/,amex:/^3[47]\d{0,13}/,discover:/^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,diners:/^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,mastercard:/^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,dankort:/^(5019|4175|4571)\d{0,12}/,instapayment:/^63[7-9]\d{0,13}/,jcb15:/^(?:2131|1800)\d{0,11}/,jcb:/^(?:35\d{0,2})\d{0,12}/,maestro:/^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,mir:/^220[0-4]\d{0,12}/,visa:/^4\d{0,15}/,unionPay:/^62\d{0,14}/},getStrictBlocks:function(e){var t=e.reduce((function(e,t){return e+t}),0);return e.concat(19-t)},getInfo:function(e,t){var n=c.blocks,r=c.re;for(var a in t=!!t,r)if(r[a].test(e)){var i=n[a];return{type:a,blocks:t?this.getStrictBlocks(i):i}}return{type:"unknown",blocks:t?this.getStrictBlocks(n.general):n.general}}},f=c,h={noop:function(){},strip:function(e,t){return e.replace(t,"")},getPostDelimiter:function(e,t,n){if(0===n.length)return e.slice(-t.length)===t?t:"";var r="";return n.forEach((function(t){e.slice(-t.length)===t&&(r=t)})),r},getDelimiterREByDelimiter:function(e){return new RegExp(e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),"g")},getNextCursorPosition:function(e,t,n,r,a){return t.length===e?n.length:e+this.getPositionOffset(e,t,n,r,a)},getPositionOffset:function(e,t,n,r,a){var i,o,s;return i=this.stripDelimiters(t.slice(0,e),r,a),o=this.stripDelimiters(n.slice(0,e),r,a),0!==(s=i.length-o.length)?s/Math.abs(s):0},stripDelimiters:function(e,t,n){var r=this;if(0===n.length){var a=t?r.getDelimiterREByDelimiter(t):"";return e.replace(a,"")}return n.forEach((function(t){t.split("").forEach((function(t){e=e.replace(r.getDelimiterREByDelimiter(t),"")}))})),e},headStr:function(e,t){return e.slice(0,t)},getMaxLength:function(e){return e.reduce((function(e,t){return e+t}),0)},getPrefixStrippedValue:function(e,t,n,r,a,i,o){if(0===n)return e;if(r.slice(0,n)!==t)return o&&!r&&e?e:"";var s=this.stripDelimiters(r,a,i);return e.slice(0,n)!==t?s.slice(n):e.slice(n)},getFirstDiffIndex:function(e,t){for(var n=0;e.charAt(n)===t.charAt(n);)if(""===e.charAt(n++))return-1;return n},getFormattedValue:function(e,t,n,r,a,i){var o,s="",l=a.length>0;return 0===n?e:(t.forEach((function(t,u){if(e.length>0){var d=e.slice(0,t),c=e.slice(t);o=l?a[i?u-1:u]||o:r,i?(u>0&&(s+=o),s+=d):(s+=d,d.length===t&&u<n-1&&(s+=o)),e=c}})),s)},fixPrefixCursor:function(e,t,n,r){if(e){var a=e.value,i=n||r[0]||" ";if(e.setSelectionRange&&t&&!(t.length+i.length<a.length)){var o=2*a.length;setTimeout((function(){e.setSelectionRange(o,o)}),1)}}},checkFullSelection:function(e){try{return(window.getSelection()||document.getSelection()||{}).toString().length===e.length}catch(e){}return!1},setSelection:function(e,t,n){if(e===this.getActiveElement(n)&&!(e&&e.value.length<=t))if(e.createTextRange){var r=e.createTextRange();r.move("character",t),r.select()}else try{e.setSelectionRange(t,t)}catch(e){console.warn("The input element type does not support selection")}},getActiveElement:function(e){var t=e.activeElement;return t&&t.shadowRoot?this.getActiveElement(t.shadowRoot):t},isAndroid:function(){return navigator&&/android/i.test(navigator.userAgent)},isAndroidBackspaceKeydown:function(e,t){return!!(this.isAndroid()&&e&&t)&&t===e.slice(0,-1)}},p={assign:function(e,t){return t=t||{},(e=e||{}).creditCard=!!t.creditCard,e.creditCardStrictMode=!!t.creditCardStrictMode,e.creditCardType="",e.onCreditCardTypeChanged=t.onCreditCardTypeChanged||function(){},e.phone=!!t.phone,e.phoneRegionCode=t.phoneRegionCode||"AU",e.phoneFormatter={},e.time=!!t.time,e.timePattern=t.timePattern||["h","m","s"],e.timeFormat=t.timeFormat||"24",e.timeFormatter={},e.date=!!t.date,e.datePattern=t.datePattern||["d","m","Y"],e.dateMin=t.dateMin||"",e.dateMax=t.dateMax||"",e.dateFormatter={},e.numeral=!!t.numeral,e.numeralIntegerScale=t.numeralIntegerScale>0?t.numeralIntegerScale:0,e.numeralDecimalScale=t.numeralDecimalScale>=0?t.numeralDecimalScale:2,e.numeralDecimalMark=t.numeralDecimalMark||".",e.numeralThousandsGroupStyle=t.numeralThousandsGroupStyle||"thousand",e.numeralPositiveOnly=!!t.numeralPositiveOnly,e.stripLeadingZeroes=!1!==t.stripLeadingZeroes,e.signBeforePrefix=!!t.signBeforePrefix,e.numericOnly=e.creditCard||e.date||!!t.numericOnly,e.uppercase=!!t.uppercase,e.lowercase=!!t.lowercase,e.prefix=e.creditCard||e.date?"":t.prefix||"",e.noImmediatePrefix=!!t.noImmediatePrefix,e.prefixLength=e.prefix.length,e.rawValueTrimPrefix=!!t.rawValueTrimPrefix,e.copyDelimiter=!!t.copyDelimiter,e.initValue=void 0!==t.initValue&&null!==t.initValue?t.initValue.toString():"",e.delimiter=t.delimiter||""===t.delimiter?t.delimiter:t.date?"/":t.time?":":t.numeral?",":(t.phone," "),e.delimiterLength=e.delimiter.length,e.delimiterLazyShow=!!t.delimiterLazyShow,e.delimiters=t.delimiters||[],e.blocks=t.blocks||[],e.blocksLength=e.blocks.length,e.root="object"==typeof n&&n?n:window,e.document=t.document||e.root.document,e.maxLength=0,e.backspace=!1,e.result="",e.onValueChanged=t.onValueChanged||function(){},e}},m=function(e,t){var n=!1;if("string"==typeof e?(this.element=document.querySelector(e),n=document.querySelectorAll(e).length>1):void 0!==e.length&&e.length>0?(this.element=e[0],n=e.length>1):this.element=e,!this.element)throw new Error("[cleave.js] Please check the element");if(n)try{console.warn("[cleave.js] Multiple input fields matched, cleave.js will only take the first one.")}catch(e){}t.initValue=this.element.value,this.properties=m.DefaultProperties.assign({},t),this.init()};m.prototype={init:function(){var e=this.properties;e.numeral||e.phone||e.creditCard||e.time||e.date||0!==e.blocksLength||e.prefix?(e.maxLength=m.Util.getMaxLength(e.blocks),this.isAndroid=m.Util.isAndroid(),this.lastInputValue="",this.onChangeListener=this.onChange.bind(this),this.onKeyDownListener=this.onKeyDown.bind(this),this.onFocusListener=this.onFocus.bind(this),this.onCutListener=this.onCut.bind(this),this.onCopyListener=this.onCopy.bind(this),this.element.addEventListener("input",this.onChangeListener),this.element.addEventListener("keydown",this.onKeyDownListener),this.element.addEventListener("focus",this.onFocusListener),this.element.addEventListener("cut",this.onCutListener),this.element.addEventListener("copy",this.onCopyListener),this.initPhoneFormatter(),this.initDateFormatter(),this.initTimeFormatter(),this.initNumeralFormatter(),(e.initValue||e.prefix&&!e.noImmediatePrefix)&&this.onInput(e.initValue)):this.onInput(e.initValue)},initNumeralFormatter:function(){var e=this.properties;e.numeral&&(e.numeralFormatter=new m.NumeralFormatter(e.numeralDecimalMark,e.numeralIntegerScale,e.numeralDecimalScale,e.numeralThousandsGroupStyle,e.numeralPositiveOnly,e.stripLeadingZeroes,e.prefix,e.signBeforePrefix,e.delimiter))},initTimeFormatter:function(){var e=this.properties;e.time&&(e.timeFormatter=new m.TimeFormatter(e.timePattern,e.timeFormat),e.blocks=e.timeFormatter.getBlocks(),e.blocksLength=e.blocks.length,e.maxLength=m.Util.getMaxLength(e.blocks))},initDateFormatter:function(){var e=this.properties;e.date&&(e.dateFormatter=new m.DateFormatter(e.datePattern,e.dateMin,e.dateMax),e.blocks=e.dateFormatter.getBlocks(),e.blocksLength=e.blocks.length,e.maxLength=m.Util.getMaxLength(e.blocks))},initPhoneFormatter:function(){var e=this.properties;if(e.phone)try{e.phoneFormatter=new m.PhoneFormatter(new e.root.Cleave.AsYouTypeFormatter(e.phoneRegionCode),e.delimiter)}catch(e){throw new Error("[cleave.js] Please include phone-type-formatter.{country}.js lib")}},onKeyDown:function(e){var t=this.properties,n=e.which||e.keyCode,r=m.Util,a=this.element.value;this.hasBackspaceSupport=this.hasBackspaceSupport||8===n,!this.hasBackspaceSupport&&r.isAndroidBackspaceKeydown(this.lastInputValue,a)&&(n=8),this.lastInputValue=a;var i=r.getPostDelimiter(a,t.delimiter,t.delimiters);t.postDelimiterBackspace=!(8!==n||!i)&&i},onChange:function(){this.onInput(this.element.value)},onFocus:function(){var e=this.properties;m.Util.fixPrefixCursor(this.element,e.prefix,e.delimiter,e.delimiters)},onCut:function(e){m.Util.checkFullSelection(this.element.value)&&(this.copyClipboardData(e),this.onInput(""))},onCopy:function(e){m.Util.checkFullSelection(this.element.value)&&this.copyClipboardData(e)},copyClipboardData:function(e){var t=this.properties,n=m.Util,r=this.element.value,a="";a=t.copyDelimiter?r:n.stripDelimiters(r,t.delimiter,t.delimiters);try{e.clipboardData?e.clipboardData.setData("Text",a):window.clipboardData.setData("Text",a),e.preventDefault()}catch(e){}},onInput:function(e){var t=this.properties,n=m.Util,r=n.getPostDelimiter(e,t.delimiter,t.delimiters);return t.numeral||!t.postDelimiterBackspace||r||(e=n.headStr(e,e.length-t.postDelimiterBackspace.length)),t.phone?(!t.prefix||t.noImmediatePrefix&&!e.length?t.result=t.phoneFormatter.format(e):t.result=t.prefix+t.phoneFormatter.format(e).slice(t.prefix.length),void this.updateValueState()):t.numeral?(t.prefix&&t.noImmediatePrefix&&0===e.length?t.result="":t.result=t.numeralFormatter.format(e),void this.updateValueState()):(t.date&&(e=t.dateFormatter.getValidatedDate(e)),t.time&&(e=t.timeFormatter.getValidatedTime(e)),e=n.stripDelimiters(e,t.delimiter,t.delimiters),e=n.getPrefixStrippedValue(e,t.prefix,t.prefixLength,t.result,t.delimiter,t.delimiters,t.noImmediatePrefix),e=t.numericOnly?n.strip(e,/[^\d]/g):e,e=t.uppercase?e.toUpperCase():e,e=t.lowercase?e.toLowerCase():e,!t.prefix||t.noImmediatePrefix&&!e.length||(e=t.prefix+e,0!==t.blocksLength)?(t.creditCard&&this.updateCreditCardPropsByValue(e),e=n.headStr(e,t.maxLength),t.result=n.getFormattedValue(e,t.blocks,t.blocksLength,t.delimiter,t.delimiters,t.delimiterLazyShow),void this.updateValueState()):(t.result=e,void this.updateValueState()))},updateCreditCardPropsByValue:function(e){var t,n=this.properties,r=m.Util;r.headStr(n.result,4)!==r.headStr(e,4)&&(t=m.CreditCardDetector.getInfo(e,n.creditCardStrictMode),n.blocks=t.blocks,n.blocksLength=n.blocks.length,n.maxLength=r.getMaxLength(n.blocks),n.creditCardType!==t.type&&(n.creditCardType=t.type,n.onCreditCardTypeChanged.call(this,n.creditCardType)))},updateValueState:function(){var e=this,t=m.Util,n=e.properties;if(e.element){var r=e.element.selectionEnd,a=e.element.value,i=n.result;r=t.getNextCursorPosition(r,a,i,n.delimiter,n.delimiters),e.isAndroid?window.setTimeout((function(){e.element.value=i,t.setSelection(e.element,r,n.document,!1),e.callOnValueChanged()}),1):(e.element.value=i,t.setSelection(e.element,r,n.document,!1),e.callOnValueChanged())}},callOnValueChanged:function(){var e=this.properties;e.onValueChanged.call(this,{target:{value:e.result,rawValue:this.getRawValue()}})},setPhoneRegionCode:function(e){this.properties.phoneRegionCode=e,this.initPhoneFormatter(),this.onChange()},setRawValue:function(e){var t=this.properties;e=null!=e?e.toString():"",t.numeral&&(e=e.replace(".",t.numeralDecimalMark)),t.postDelimiterBackspace=!1,this.element.value=e,this.onInput(e)},getRawValue:function(){var e=this.properties,t=m.Util,n=this.element.value;return e.rawValueTrimPrefix&&(n=t.getPrefixStrippedValue(n,e.prefix,e.prefixLength,e.result,e.delimiter,e.delimiters)),n=e.numeral?e.numeralFormatter.getRawValue(n):t.stripDelimiters(n,e.delimiter,e.delimiters)},getISOFormatDate:function(){var e=this.properties;return e.date?e.dateFormatter.getISOFormatDate():""},getISOFormatTime:function(){var e=this.properties;return e.time?e.timeFormatter.getISOFormatTime():""},getFormattedValue:function(){return this.element.value},destroy:function(){this.element.removeEventListener("input",this.onChangeListener),this.element.removeEventListener("keydown",this.onKeyDownListener),this.element.removeEventListener("focus",this.onFocusListener),this.element.removeEventListener("cut",this.onCutListener),this.element.removeEventListener("copy",this.onCopyListener)},toString:function(){return"[Cleave Object]"}},m.NumeralFormatter=a,m.DateFormatter=o,m.TimeFormatter=l,m.PhoneFormatter=d,m.CreditCardDetector=f,m.Util=h,m.DefaultProperties=p,("object"==typeof n&&n?n:window).Cleave=m;var g=m;t.a=g}).call(this,n(26))},function(e,t,n){"use strict";n(8)},function(e,t,n){var r=n(9);r.keys().forEach(r)},function(e,t,n){var r={"./android-chrome-144x144.png":10,"./apple-touch-icon.png":11,"./browserconfig.xml":12,"./favicon-16x16.png":13,"./favicon-32x32.png":14,"./favicon.ico":15,"./mstile-150x150.png":16,"./safari-pinned-tab.svg":17,"./site.webmanifest":18};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=9},function(e,t,n){e.exports=n.p+"favicon/android-chrome-144x144.png"},function(e,t,n){e.exports=n.p+"favicon/apple-touch-icon.png"},function(e,t,n){e.exports=n.p+"favicon/browserconfig.xml"},function(e,t,n){e.exports=n.p+"favicon/favicon-16x16.png"},function(e,t,n){e.exports=n.p+"favicon/favicon-32x32.png"},function(e,t,n){e.exports=n.p+"favicon/favicon.ico"},function(e,t,n){e.exports=n.p+"favicon/mstile-150x150.png"},function(e,t,n){e.exports=n.p+"favicon/safari-pinned-tab.svg"},function(e,t,n){e.exports=n.p+"favicon/site.webmanifest"},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"Ð¼Ð¸Ð½ÑÑÐ°":"Ð¼Ð¸Ð½ÑÑÑ":e+" "+(r=+e,a={ss:t?"ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´":"ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´",mm:t?"Ð¼Ð¸Ð½ÑÑÐ°_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ":"Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ",hh:"ÑÐ°Ñ_ÑÐ°ÑÐ°_ÑÐ°ÑÐ¾Ð²",dd:"Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÐµÐ¹",MM:"Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÐ°_Ð¼ÐµÑÑÑÐµÐ²",yy:"Ð³Ð¾Ð´_Ð³Ð¾Ð´Ð°_Ð»ÐµÑ"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^ÑÐ½Ð²/i,/^ÑÐµÐ²/i,/^Ð¼Ð°Ñ/i,/^Ð°Ð¿Ñ/i,/^Ð¼Ð°[Ð¹Ñ]/i,/^Ð¸ÑÐ½/i,/^Ð¸ÑÐ»/i,/^Ð°Ð²Ð³/i,/^ÑÐµÐ½/i,/^Ð¾ÐºÑ/i,/^Ð½Ð¾Ñ/i,/^Ð´ÐµÐº/i];e.defineLocale("ru",{months:{format:"ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑÐ°_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑÐ°_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_"),standalone:"ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_")},monthsShort:{format:"ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.".split("_"),standalone:"ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°ÑÑ_Ð°Ð¿Ñ._Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.".split("_")},weekdays:{standalone:"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÐ°_ÑÑÐ±Ð±Ð¾ÑÐ°".split("_"),format:"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð±Ð¾ÑÑ".split("_"),isFormat:/\[ ?[ÐÐ²] ?(?:Ð¿ÑÐ¾ÑÐ»ÑÑ|ÑÐ»ÐµÐ´ÑÑÑÑÑ|ÑÑÑ)? ?\] ?dddd/},weekdaysShort:"Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),weekdaysMin:"Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,monthsShortRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,monthsStrictRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|Ð¼Ð°ÑÑÐ°?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ»[ÑÑ]|Ð°Ð²Ð³ÑÑÑÐ°?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ])/i,monthsShortStrictRegex:/^(ÑÐ½Ð²\.|ÑÐµÐ²Ñ?\.|Ð¼Ð°Ñ[Ñ.]|Ð°Ð¿Ñ\.|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ.]|Ð¸ÑÐ»[ÑÑ.]|Ð°Ð²Ð³\.|ÑÐµÐ½Ñ?\.|Ð¾ÐºÑ\.|Ð½Ð¾ÑÐ±?\.|Ð´ÐµÐº\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY Ð³.",LLL:"D MMMM YYYY Ð³., H:mm",LLLL:"dddd, D MMMM YYYY Ð³., H:mm"},calendar:{sameDay:"[Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ, Ð²] LT",nextDay:"[ÐÐ°Ð²ÑÑÐ°, Ð²] LT",lastDay:"[ÐÑÐµÑÐ°, Ð²] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[ÐÐ¾] dddd, [Ð²] LT":"[Ð] dddd, [Ð²] LT";switch(this.day()){case 0:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÐµÐµ] dddd, [Ð²] LT";case 1:case 2:case 4:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹] dddd, [Ð²] LT";case 3:case 5:case 6:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÑÑ] dddd, [Ð²] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[ÐÐ¾] dddd, [Ð²] LT":"[Ð] dddd, [Ð²] LT";switch(this.day()){case 0:return"[Ð Ð¿ÑÐ¾ÑÐ»Ð¾Ðµ] dddd, [Ð²] LT";case 1:case 2:case 4:return"[Ð Ð¿ÑÐ¾ÑÐ»ÑÐ¹] dddd, [Ð²] LT";case 3:case 5:case 6:return"[Ð Ð¿ÑÐ¾ÑÐ»ÑÑ] dddd, [Ð²] LT"}},sameElse:"L"},relativeTime:{future:"ÑÐµÑÐµÐ· %s",past:"%s Ð½Ð°Ð·Ð°Ð´",s:"Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÐ½Ð´",ss:t,m:t,mm:t,h:"ÑÐ°Ñ",hh:t,d:"Ð´ÐµÐ½Ñ",dd:t,M:"Ð¼ÐµÑÑÑ",MM:t,y:"Ð³Ð¾Ð´",yy:t},meridiemParse:/Ð½Ð¾ÑÐ¸|ÑÑÑÐ°|Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°/i,isPM:function(e){return/^(Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°)$/.test(e)},meridiem:function(e,t,n){return e<4?"Ð½Ð¾ÑÐ¸":e<12?"ÑÑÑÐ°":e<17?"Ð´Ð½Ñ":"Ð²ÐµÑÐµÑÐ°"},dayOfMonthOrdinalParse:/\d{1,2}-(Ð¹|Ð³Ð¾|Ñ)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-Ð¹";case"D":return e+"-Ð³Ð¾";case"w":case"W":return e+"-Ñ";default:return e}},week:{dow:1,doy:4}})}(n(1))},,function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./index.js":23};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=22},function(e,t){e.exports=null},function(e,t,n){var r,a,i;a=[n(0),n(1)],void 0===(i="function"==typeof(r=function(e,t){"use strict";e.dateRangePickerLanguages={default:{selected:"Selected:",day:"Day",days:"Days",apply:"Close","week-1":"mo","week-2":"tu","week-3":"we","week-4":"th","week-5":"fr","week-6":"sa","week-7":"su","week-number":"W","month-name":["january","february","march","april","may","june","july","august","september","october","november","december"],shortcuts:"Shortcuts","custom-values":"Custom Values",past:"Past",following:"Following",previous:"Previous","prev-week":"Week","prev-month":"Month","prev-year":"Year",next:"Next","next-week":"Week","next-month":"Month","next-year":"Year","less-than":"Date range should not be more than %d days","more-than":"Date range should not be less than %d days","default-more":"Please select a date range longer than %d days","default-single":"Please select a date","default-less":"Please select a date range less than %d days","default-range":"Please select a date range between %d and %d days","default-default":"Please select a date range",time:"Time",hour:"Hour",minute:"Minute"},id:{selected:"Terpilih:",day:"Hari",days:"Hari",apply:"Tutup","week-1":"sen","week-2":"sel","week-3":"rab","week-4":"kam","week-5":"jum","week-6":"sab","week-7":"min","week-number":"W","month-name":["januari","februari","maret","april","mei","juni","juli","agustus","september","oktober","november","desember"],shortcuts:"Pintas","custom-values":"Nilai yang ditentukan",past:"Yang Lalu",following:"Mengikuti",previous:"Sebelumnya","prev-week":"Minggu","prev-month":"Bulan","prev-year":"Tahun",next:"Selanjutnya","next-week":"Minggu","next-month":"Bulan","next-year":"Tahun","less-than":"Tanggal harus lebih dari %d hari","more-than":"Tanggal harus kurang dari %d hari","default-more":"Jarak tanggal harus lebih lama dari %d hari","default-single":"Silakan pilih tanggal","default-less":"Jarak rentang tanggal tidak boleh lebih lama dari %d hari","default-range":"Rentang tanggal harus antara %d dan %d hari","default-default":"Silakan pilih rentang tanggal",time:"Waktu",hour:"Jam",minute:"Menit"},az:{selected:"SeÃ§ildi:",day:" gÃ¼n",days:" gÃ¼n",apply:"tÉtbiq","week-1":"1","week-2":"2","week-3":"3","week-4":"4","week-5":"5","week-6":"6","week-7":"7","month-name":["yanvar","fevral","mart","aprel","may","iyun","iyul","avqust","sentyabr","oktyabr","noyabr","dekabr"],shortcuts:"QÄ±sayollar",past:"KeÃ§miÅ",following:"NÃ¶vbÉti",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"ÃncÉki hÉftÉ","prev-month":"ÃncÉki ay","prev-year":"ÃncÉki il",next:"&nbsp;&nbsp;&nbsp;","next-week":"NÃ¶vbÉti hÉftÉ","next-month":"NÃ¶vbÉti ay","next-year":"NÃ¶vbÉti il","less-than":"Tarix aralÄ±ÄÄ± %d gÃ¼ndÉn Ã§ox olmamalÄ±dÄ±r","more-than":"Tarix aralÄ±ÄÄ± %d gÃ¼ndÉn az olmamalÄ±dÄ±r","default-more":"%d gÃ¼ndÉn Ã§ox bir tarix seÃ§in","default-single":"Tarix seÃ§in","default-less":"%d gÃ¼ndÉn az bir tarix seÃ§in","default-range":"%d vÉ %d gÃ¼n aralÄ±ÄÄ±nda tarixlÉr seÃ§in","default-default":"Tarix aralÄ±ÄÄ± seÃ§in"},bg:{selected:"ÐÐ·Ð±ÑÐ°Ð½Ð¾:",day:"ÐÐµÐ½",days:"ÐÐ½Ð¸",apply:"ÐÐ°ÑÐ²Ð¾ÑÐ¸","week-1":"Ð¿Ð½","week-2":"Ð²Ñ","week-3":"ÑÑ","week-4":"ÑÑ","week-5":"Ð¿Ñ","week-6":"ÑÐ±","week-7":"Ð½Ð´","week-number":"Ð¡","month-name":["ÑÐ½ÑÐ°ÑÐ¸","ÑÐµÐ²ÑÑÐ°ÑÐ¸","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ð¹","ÑÐ½Ð¸","ÑÐ»Ð¸","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"],shortcuts:"ÐÑÐµÐºÐ¸ Ð¿ÑÑÐ¸ÑÐ°","custom-values":"ÐÐµÑÑÐ¾Ð½Ð°Ð»Ð¸Ð·Ð¸ÑÐ°Ð½Ð¸ ÑÑÐ¾Ð¹Ð½Ð¾ÑÑÐ¸",past:"ÐÐ¸Ð½Ð°Ð»",following:"Ð¡Ð»ÐµÐ´Ð²Ð°Ñ",previous:"ÐÑÐµÐ´Ð¸ÑÐµÐ½","prev-week":"Ð¡ÐµÐ´Ð¼Ð¸ÑÐ°","prev-month":"ÐÐµÑÐµÑ","prev-year":"ÐÐ¾Ð´Ð¸Ð½Ð°",next:"Ð¡Ð»ÐµÐ´Ð²Ð°Ñ","next-week":"Ð¡ÐµÐ´Ð¼Ð¸ÑÐ°","next-month":"ÐÐµÑÐµÑ","next-year":"ÐÐ¾Ð´Ð¸Ð½Ð°","less-than":"ÐÐµÑÐ¸Ð¾Ð´ÑÑ Ð¾Ñ Ð²ÑÐµÐ¼Ðµ Ð½Ðµ ÑÑÑÐ±Ð²Ð° Ð´Ð° Ðµ Ð¿Ð¾Ð²ÐµÑÐµ Ð¾Ñ %d Ð´Ð½Ð¸","more-than":"ÐÐµÑÐ¸Ð¾Ð´ÑÑ Ð¾Ñ Ð²ÑÐµÐ¼Ðµ Ð½Ðµ ÑÑÑÐ±Ð²Ð° Ð´Ð° Ðµ Ð¿Ð¾-Ð¼Ð°Ð»ÐºÐ¾ Ð¾Ñ %d Ð´Ð½Ð¸","default-more":"ÐÐ¾Ð»Ñ Ð¸Ð·Ð±ÐµÑÐµÑÐµ Ð¿ÐµÑÐ¸Ð¾Ð´ Ð¿Ð¾-Ð´ÑÐ»ÑÐ³ Ð¾Ñ %d Ð´Ð½Ð¸","default-single":"ÐÐ¾Ð»Ñ Ð¸Ð·Ð±ÐµÑÐµÑÐµ Ð´Ð°ÑÐ°","default-less":"ÐÐ¾Ð»Ñ Ð¸Ð·Ð±ÐµÑÐµÑÐµ Ð¿ÐµÑÐ¸Ð¾Ð´ Ð¿Ð¾-ÐºÑÑ Ð¾Ñ %d Ð´Ð½Ð¸","default-range":"ÐÐ¾Ð»Ñ Ð¸Ð·Ð±ÐµÑÐµÑÐµ Ð¿ÐµÑÐ¸Ð¾Ð´ Ð¼ÐµÐ¶Ð´Ñ %d Ð¸ %d Ð´Ð½Ð¸","default-default":"ÐÐ¾Ð»Ñ Ð¸Ð·Ð±ÐµÑÐµÑÐµ Ð¿ÐµÑÐ¸Ð¾Ð´",time:"ÐÑÐµÐ¼Ðµ",hour:"Ð§Ð°Ñ",minute:"ÐÐ¸Ð½ÑÑÐ°"},cn:{selected:"å·²éæ©:",day:"å¤©",days:"å¤©",apply:"ç¡®å®","week-1":"ä¸","week-2":"äº","week-3":"ä¸","week-4":"å","week-5":"äº","week-6":"å­","week-7":"æ¥","week-number":"å¨","month-name":["ä¸æ","äºæ","ä¸æ","åæ","äºæ","å­æ","ä¸æ","å«æ","ä¹æ","åæ","åä¸æ","åäºæ"],shortcuts:"å¿«æ·éæ©",past:"è¿å»",following:"å°æ¥",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"ä¸å¨","prev-month":"ä¸ä¸ªæ","prev-year":"å»å¹´",next:"&nbsp;&nbsp;&nbsp;","next-week":"ä¸å¨","next-month":"ä¸ä¸ªæ","next-year":"æå¹´","less-than":"æéæ¥æèå´ä¸è½å¤§äº%då¤©","more-than":"æéæ¥æèå´ä¸è½å°äº%då¤©","default-more":"è¯·éæ©å¤§äº%då¤©çæ¥æèå´","default-less":"è¯·éæ©å°äº%då¤©çæ¥æèå´","default-range":"è¯·éæ©%då¤©å°%då¤©çæ¥æèå´","default-single":"è¯·éæ©ä¸ä¸ªæ¥æ","default-default":"è¯·éæ©ä¸ä¸ªæ¥æèå´",time:"æ¶é´",hour:"å°æ¶",minute:"åé"},cz:{selected:"VybrÃ¡no:",day:"Den",days:"Dny",apply:"ZavÅÃ­t","week-1":"po","week-2":"Ãºt","week-3":"st","week-4":"Ät","week-5":"pÃ¡","week-6":"so","week-7":"ne","month-name":["leden","Ãºnor","bÅezen","duben","kvÄten","Äerven","Äervenec","srpen","zÃ¡ÅÃ­","ÅÃ­jen","listopad","prosinec"],shortcuts:"Zkratky",past:"po",following:"nÃ¡sledujÃ­cÃ­",previous:"pÅedchozÃ­","prev-week":"tÃ½den","prev-month":"mÄsÃ­c","prev-year":"rok",next:"dalÅ¡Ã­","next-week":"tÃ½den","next-month":"mÄsÃ­c","next-year":"rok","less-than":"Rozsah data by nemÄl bÃ½t vÄtÅ¡Ã­ neÅ¾ %d dnÅ¯","more-than":"Rozsah data by nemÄl bÃ½t menÅ¡Ã­ neÅ¾ %d dnÅ¯","default-more":"ProsÃ­m zvolte rozsah data vÄtÅ¡Ã­ neÅ¾ %d dnÅ¯","default-single":"ProsÃ­m zvolte datum","default-less":"ProsÃ­m zvolte rozsah data menÅ¡Ã­ neÅ¾ %d dnÅ¯","default-range":"ProsÃ­m zvolte rozsah data mezi %d a %d dny","default-default":"ProsÃ­m zvolte rozsah data"},de:{selected:"Auswahl:",day:"Tag",days:"Tage",apply:"SchlieÃen","week-1":"mo","week-2":"di","week-3":"mi","week-4":"do","week-5":"fr","week-6":"sa","week-7":"so","month-name":["januar","februar","mÃ¤rz","april","mai","juni","juli","august","september","oktober","november","dezember"],shortcuts:"Schnellwahl",past:"Vorherige",following:"Folgende",previous:"Vorherige","prev-week":"Woche","prev-month":"Monat","prev-year":"Jahr",next:"NÃ¤chste","next-week":"Woche","next-month":"Monat","next-year":"Jahr","less-than":"Datumsbereich darf nicht grÃ¶Ãer sein als %d Tage","more-than":"Datumsbereich darf nicht kleiner sein als %d Tage","default-more":"Bitte mindestens %d Tage auswÃ¤hlen","default-single":"Bitte ein Datum auswÃ¤hlen","default-less":"Bitte weniger als %d Tage auswÃ¤hlen","default-range":"Bitte einen Datumsbereich zwischen %d und %d Tagen auswÃ¤hlen","default-default":"Bitte ein Start- und Enddatum auswÃ¤hlen",Time:"Zeit",hour:"Stunde",minute:"Minute"},es:{selected:"Seleccionado:",day:"DÃ­a",days:"DÃ­as",apply:"Cerrar","week-1":"lu","week-2":"ma","week-3":"mi","week-4":"ju","week-5":"vi","week-6":"sa","week-7":"do","month-name":["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],shortcuts:"Accesos directos",past:"Pasado",following:"Siguiente",previous:"Anterior","prev-week":"Semana","prev-month":"Mes","prev-year":"AÃ±o",next:"Siguiente","next-week":"Semana","next-month":"Mes","next-year":"AÃ±o","less-than":"El rango no deberÃ­a ser mayor de %d dÃ­as","more-than":"El rango no deberÃ­a ser menor de %d dÃ­as","default-more":"Por favor selecciona un rango mayor a %d dÃ­as","default-single":"Por favor selecciona un dÃ­a","default-less":"Por favor selecciona un rango menor a %d dÃ­as","default-range":"Por favor selecciona un rango entre %d y %d dÃ­as","default-default":"Por favor selecciona un rango de fechas."},fr:{selected:"SÃ©lection:",day:"Jour",days:"Jours",apply:"Fermer","week-1":"lu","week-2":"ma","week-3":"me","week-4":"je","week-5":"ve","week-6":"sa","week-7":"di","month-name":["janvier","fÃ©vrier","mars","avril","mai","juin","juillet","aoÃ»t","septembre","octobre","novembre","dÃ©cembre"],shortcuts:"Raccourcis",past:"PassÃ©",following:"Suivant",previous:"PrÃ©cÃ©dent","prev-week":"Semaine","prev-month":"Mois","prev-year":"AnnÃ©e",next:"Suivant","next-week":"Semaine","next-month":"Mois","next-year":"AnnÃ©e","less-than":"L'intervalle ne doit pas Ãªtre supÃ©rieure Ã  %d jours","more-than":"L'intervalle ne doit pas Ãªtre infÃ©rieure Ã  %d jours","default-more":"Merci de choisir une intervalle supÃ©rieure Ã  %d jours","default-single":"Merci de choisir une date","default-less":"Merci de choisir une intervalle infÃ©rieure %d jours","default-range":"Merci de choisir une intervalle comprise entre %d et %d jours","default-default":"Merci de choisir une date"},hu:{selected:"KivÃ¡lasztva:",day:"Nap",days:"Nap",apply:"Ok","week-1":"h","week-2":"k","week-3":"sz","week-4":"cs","week-5":"p","week-6":"sz","week-7":"v","month-name":["januÃ¡r","februÃ¡r","mÃ¡rcius","Ã¡prilis","mÃ¡jus","jÃºnius","jÃºlius","augusztus","szeptember","oktÃ³ber","november","december"],shortcuts:"GyorsvÃ¡lasztÃ³",past:"MÃºlt",following:"KÃ¶vetkezÅ",previous:"ElÅzÅ","prev-week":"HÃ©t","prev-month":"HÃ³nap","prev-year":"Ãv",next:"KÃ¶vetkezÅ","next-week":"HÃ©t","next-month":"HÃ³nap","next-year":"Ãv","less-than":"A kivÃ¡lasztÃ¡s nem lehet tÃ¶bb %d napnÃ¡l","more-than":"A kivÃ¡lasztÃ¡s nem lehet tÃ¶bb %d napnÃ¡l","default-more":"VÃ¡lassz ki egy idÅszakot ami hosszabb mint %d nap","default-single":"VÃ¡lassz egy napot","default-less":"VÃ¡lassz ki egy idÅszakot ami rÃ¶videbb mint %d nap","default-range":"VÃ¡lassz ki egy %d - %d nap hosszÃº idÅszakot","default-default":"VÃ¡lassz ki egy idÅszakot"},it:{selected:"Selezionati:",day:"Giorno",days:"Giorni",apply:"Chiudi","week-1":"lu","week-2":"ma","week-3":"me","week-4":"gi","week-5":"ve","week-6":"sa","week-7":"do","month-name":["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"],shortcuts:"Scorciatoie",past:"Scorso",following:"Successivo",previous:"Precedente","prev-week":"Settimana","prev-month":"Mese","prev-year":"Anno",next:"Prossimo","next-week":"Settimana","next-month":"Mese","next-year":"Anno","less-than":"L'intervallo non dev'essere maggiore di %d giorni","more-than":"L'intervallo non dev'essere minore di %d giorni","default-more":"Seleziona un intervallo maggiore di %d giorni","default-single":"Seleziona una data","default-less":"Seleziona un intervallo minore di %d giorni","default-range":"Seleziona un intervallo compreso tra i %d e i %d giorni","default-default":"Seleziona un intervallo di date"},ko:{selected:"ê¸°ê°:",day:"ì¼",days:"ì¼ê°",apply:"ë«ê¸°","week-1":"ì","week-2":"í","week-3":"ì","week-4":"ëª©","week-5":"ê¸","week-6":"í ","week-7":"ì¼","week-number":"ì£¼","month-name":["1ì","2ì","3ì","4ì","5ì","6ì","7ì","8ì","9ì","10ì","11ì","12ì"],shortcuts:"ë¨ì¶í¤ë¤",past:"ì§ë(ì¤ëê¸°ì¤)",following:"ì´í(ì¤ëê¸°ì¤)",previous:"ì´ì ","prev-week":"1ì£¼","prev-month":"1ë¬","prev-year":"1ë",next:"ë¤ì","next-week":"1ì£¼","next-month":"1ë¬","next-year":"1ë","less-than":"ë ì§ ë²ìë %d ì¼ë³´ë¤ ë§ì ì ììµëë¤","more-than":"ë ì§ ë²ìë %d ì¼ë³´ë¤ ìì ì ììµëë¤","default-more":"ë ì§ ë²ìë¥¼ %d ì¼ë³´ë¤ ê¸¸ê² ì íí´ ì£¼ì¸ì","default-single":"ë ì§ë¥¼ ì íí´ ì£¼ì¸ì","default-less":"%d ì¼ë³´ë¤ ìì ë ì§ë¥¼ ì íí´ ì£¼ì¸ì","default-range":"%dì %d ì¼ ì¬ì´ì ë ì§ ë²ìë¥¼ ì íí´ ì£¼ì¸ì","default-default":"ë ì§ ë²ìë¥¼ ì íí´ ì£¼ì¸ì",time:"ìê°",hour:"ì",minute:"ë¶"},no:{selected:"Valgt:",day:"Dag",days:"Dager",apply:"Lukk","week-1":"ma","week-2":"ti","week-3":"on","week-4":"to","week-5":"fr","week-6":"lÃ¸","week-7":"sÃ¸","month-name":["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],shortcuts:"Snarveier","custom-values":"Egendefinerte Verdier",past:"Over",following:"FÃ¸lger",previous:"Forrige","prev-week":"Uke","prev-month":"MÃ¥ned","prev-year":"Ãr",next:"Neste","next-week":"Uke","next-month":"MÃ¥ned","next-year":"Ãr","less-than":"Datoperioden skal ikkje vÃ¦re lengre enn %d dager","more-than":"Datoperioden skal ikkje vÃ¦re kortere enn %d dager","default-more":"Vennligst velg ein datoperiode lengre enn %d dager","default-single":"Vennligst velg ein dato","default-less":"Vennligst velg ein datoperiode mindre enn %d dager","default-range":"Vennligst velg ein datoperiode mellom %d og %d dager","default-default":"Vennligst velg ein datoperiode",time:"Tid",hour:"Time",minute:"Minutter"},nl:{selected:"Geselecteerd:",day:"Dag",days:"Dagen",apply:"Ok","week-1":"ma","week-2":"di","week-3":"wo","week-4":"do","week-5":"vr","week-6":"za","week-7":"zo","month-name":["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],shortcuts:"Snelkoppelingen","custom-values":"Aangepaste waarden",past:"Verleden",following:"Komend",previous:"Vorige","prev-week":"Week","prev-month":"Maand","prev-year":"Jaar",next:"Volgende","next-week":"Week","next-month":"Maand","next-year":"Jaar","less-than":"Interval moet langer dan %d dagen zijn","more-than":"Interval mag niet minder dan %d dagen zijn","default-more":"Selecteer een interval langer dan %dagen","default-single":"Selecteer een datum","default-less":"Selecteer een interval minder dan %d dagen","default-range":"Selecteer een interval tussen %d en %d dagen","default-default":"Selecteer een interval",time:"Tijd",hour:"Uur",minute:"Minuut"},ru:{selected:"ÐÑÐ±ÑÐ°Ð½Ð¾:",day:"ÐÐµÐ½Ñ",days:"ÐÐ½ÐµÐ¹",apply:"ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ","week-1":"Ð¿Ð½","week-2":"Ð²Ñ","week-3":"ÑÑ","week-4":"ÑÑ","week-5":"Ð¿Ñ","week-6":"ÑÐ±","week-7":"Ð²Ñ","month-name":["ÑÐ½Ð²Ð°ÑÑ","ÑÐµÐ²ÑÐ°Ð»Ñ","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐµÐ»Ñ","Ð¼Ð°Ð¹","Ð¸ÑÐ½Ñ","Ð¸ÑÐ»Ñ","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ½ÑÑÐ±ÑÑ","Ð¾ÐºÑÑÐ±ÑÑ","Ð½Ð¾ÑÐ±ÑÑ","Ð´ÐµÐºÐ°Ð±ÑÑ"],shortcuts:"ÐÑÑÑÑÑÐ¹ Ð²ÑÐ±Ð¾Ñ","custom-values":"ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¸Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ñ",past:"ÐÑÐ¾ÑÐµÐ´ÑÐ¸Ðµ",following:"Ð¡Ð»ÐµÐ´ÑÑÑÐ¸Ðµ",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"ÐÐµÐ´ÐµÐ»Ñ","prev-month":"ÐÐµÑÑÑ","prev-year":"ÐÐ¾Ð´",next:"&nbsp;&nbsp;&nbsp;","next-week":"ÐÐµÐ´ÐµÐ»Ñ","next-month":"ÐÐµÑÑÑ","next-year":"ÐÐ¾Ð´","less-than":"ÐÐ¸Ð°Ð¿Ð°Ð·Ð¾Ð½ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð±Ð¾Ð»ÑÑÐµ %d Ð´Ð½ÐµÐ¹","more-than":"ÐÐ¸Ð°Ð¿Ð°Ð·Ð¾Ð½ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¼ÐµÐ½ÑÑÐµ %d Ð´Ð½ÐµÐ¹","default-more":"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° Ð²ÑÐ±ÐµÑÐ¸ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½ Ð±Ð¾Ð»ÑÑÐµ %d Ð´Ð½ÐµÐ¹","default-single":"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° Ð²ÑÐ±ÐµÑÐ¸ÑÐµ Ð´Ð°ÑÑ","default-less":"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° Ð²ÑÐ±ÐµÑÐ¸ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½ Ð¼ÐµÐ½ÑÑÐµ %d Ð´Ð½ÐµÐ¹","default-range":"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° Ð²ÑÐ±ÐµÑÐ¸ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½ Ð¼ÐµÐ¶Ð´Ñ %d Ð¸ %d Ð´Ð½ÑÐ¼Ð¸","default-default":"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° Ð²ÑÐ±ÐµÑÐ¸ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½",time:"ÐÑÐµÐ¼Ñ",hour:"Ð§Ð°ÑÑ",minute:"ÐÐ¸Ð½ÑÑÑ"},uk:{selected:"ÐÐ¸Ð±ÑÐ°Ð½Ð¾:",day:"ÐÐµÐ½Ñ",days:"ÐÐ½ÑÐ²",apply:"ÐÐ°ÑÑÐ¾ÑÑÐ²Ð°ÑÐ¸","week-1":"Ð¿Ð½","week-2":"Ð²Ñ","week-3":"ÑÑ","week-4":"ÑÑ","week-5":"Ð¿Ñ","week-6":"ÑÐ±","week-7":"Ð½Ð´","month-name":["ÑÑÑÐµÐ½Ñ","Ð»ÑÑÐ¸Ð¹","Ð±ÐµÑÐµÐ·ÐµÐ½Ñ","ÐºÐ²ÑÑÐµÐ½Ñ","ÑÑÐ°Ð²ÐµÐ½Ñ","ÑÐµÑÐ²ÐµÐ½Ñ","Ð»Ð¸Ð¿ÐµÐ½Ñ","ÑÐµÑÐ¿ÐµÐ½Ñ","Ð²ÐµÑÐµÑÐµÐ½Ñ","Ð¶Ð¾Ð²ÑÐµÐ½Ñ","Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´","Ð³ÑÑÐ´ÐµÐ½Ñ"],shortcuts:"Ð¨Ð²Ð¸Ð´ÐºÐ¸Ð¹ Ð²Ð¸Ð±ÑÑ","custom-values":"ÐÐ½Ð°ÑÐµÐ½Ð½Ñ ÐºÐ¾ÑÐ¸ÑÑÑÐ²Ð°ÑÐ°",past:"ÐÐ¸Ð½ÑÐ»Ñ",following:"ÐÐ°ÑÑÑÐ¿Ð½Ñ",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"Ð¢Ð¸Ð¶Ð´ÐµÐ½Ñ","prev-month":"ÐÑÑÑÑÑ","prev-year":"Ð ÑÐº",next:"&nbsp;&nbsp;&nbsp;","next-week":"Ð¢Ð¸Ð¶Ð´ÐµÐ½Ñ","next-month":"ÐÑÑÑÑÑ","next-year":"Ð ÑÐº","less-than":"ÐÑÐ°Ð¿Ð°Ð·Ð¾Ð½ Ð½Ðµ Ð¼Ð¾Ð¶Ðµ Ð±ÑÑÐ¸ Ð±ÑÐ»ÑÑ Ð½ÑÐ¶ %d Ð´Ð½ÑÐ²","more-than":"ÐÑÐ°Ð¿Ð°Ð·Ð¾Ð½ Ð½Ðµ Ð¼Ð¾Ð¶Ðµ Ð±ÑÑÐ¸ Ð¼ÐµÐ½ÑÑ Ð½ÑÐ¶ %d Ð´Ð½ÑÐ²","default-more":"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ° Ð²Ð¸Ð±ÐµÑÑÑÑ Ð´ÑÐ°Ð¿Ð°Ð·Ð¾Ð½ Ð±ÑÐ»ÑÑÐµ %d Ð´Ð½ÑÐ²","default-single":"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ° Ð²Ð¸Ð±ÐµÑÑÑÑ Ð´Ð°ÑÑ","default-less":"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ° Ð²Ð¸Ð±ÐµÑÑÑÑ Ð´ÑÐ°Ð¿Ð°Ð·Ð¾Ð½ Ð¼ÐµÐ½ÑÐµ %d Ð´Ð½ÑÐ²","default-range":"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ° Ð²Ð¸Ð±ÐµÑÑÑÑ Ð´ÑÐ°Ð¿Ð°Ð·Ð¾Ð½ Ð¼ÑÐ¶ %d ÑÐ° %d Ð´Ð½ÑÐ¼Ð¸","default-default":"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ° Ð²Ð¸Ð±ÐµÑÑÑÑ Ð´ÑÐ°Ð¿Ð°Ð·Ð¾Ð½",time:"Ð§Ð°Ñ",hour:"ÐÐ¾Ð´Ð¸Ð½Ð¸",minute:"Ð¥Ð²Ð¸Ð»Ð¸Ð½Ð¸"},pl:{selected:"Wybrany:",day:"DzieÅ",days:"Dni",apply:"Zamknij","week-1":"pon","week-2":"wt","week-3":"År","week-4":"czw","week-5":"pt","week-6":"so","week-7":"nd","month-name":["styczeÅ","luty","marzec","kwiecieÅ","maj","czerwiec","lipiec","sierpieÅ","wrzesieÅ","paÅºdziernik","listopad","grudzieÅ"],shortcuts:"SkrÃ³ty","custom-values":"Niestandardowe wartoÅci",past:"PrzeszÅe",following:"NastÄpne",previous:"Poprzednie","prev-week":"tydzieÅ","prev-month":"miesiÄc","prev-year":"rok",next:"NastÄpny","next-week":"tydzieÅ","next-month":"miesiÄc","next-year":"rok","less-than":"Okres nie powinien byÄ dÅuÅ¼szy niÅ¼ %d dni","more-than":"Okres nie powinien byÄ krÃ³tszy niÅ¼  %d ni","default-more":"Wybierz okres dÅuÅ¼szy niÅ¼ %d dni","default-single":"Wybierz datÄ","default-less":"Wybierz okres krÃ³tszy niÅ¼ %d dni","default-range":"Wybierz okres trwajÄcy od %d do %d dni","default-default":"Wybierz okres",time:"Czas",hour:"Godzina",minute:"Minuta"},se:{selected:"Vald:",day:"dag",days:"dagar",apply:"godkÃ¤nn","week-1":"ma","week-2":"ti","week-3":"on","week-4":"to","week-5":"fr","week-6":"lÃ¶","week-7":"sÃ¶","month-name":["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],shortcuts:"genvÃ¤gar","custom-values":"Anpassade vÃ¤rden",past:"Ã¶ver",following:"fÃ¶ljande",previous:"fÃ¶rra","prev-week":"vecka","prev-month":"mÃ¥nad","prev-year":"Ã¥r",next:"nÃ¤sta","next-week":"vecka","next-month":"mÃ¥ned","next-year":"Ã¥r","less-than":"Datumintervall bÃ¶r inte vara mindre Ã¤n %d dagar","more-than":"Datumintervall bÃ¶r inte vara mer Ã¤n %d dagar","default-more":"VÃ¤lj ett datumintervall lÃ¤ngre Ã¤n %d dagar","default-single":"VÃ¤lj ett datum","default-less":"VÃ¤lj ett datumintervall mindre Ã¤n %d dagar","default-range":"VÃ¤lj ett datumintervall mellan %d och %d dagar","default-default":"VÃ¤lj ett datumintervall",time:"tid",hour:"timme",minute:"minut"},pt:{selected:"Selecionado:",day:"Dia",days:"Dias",apply:"Fechar","week-1":"seg","week-2":"ter","week-3":"qua","week-4":"qui","week-5":"sex","week-6":"sab","week-7":"dom","week-number":"N","month-name":["janeiro","fevereiro","marÃ§o","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],shortcuts:"Atalhos","custom-values":"Valores Personalizados",past:"Passado",following:"Seguinte",previous:"Anterior","prev-week":"Semana","prev-month":"MÃªs","prev-year":"Ano",next:"PrÃ³ximo","next-week":"PrÃ³xima Semana","next-month":"PrÃ³ximo MÃªs","next-year":"PrÃ³ximo Ano","less-than":"O perÃ­odo selecionado nÃ£o deve ser maior que %d dias","more-than":"O perÃ­odo selecionado nÃ£o deve ser menor que %d dias","default-more":"Selecione um perÃ­odo superior a %d dias","default-single":"Selecione uma data","default-less":"Selecione um perÃ­odo inferior a %d dias","default-range":"Selecione um perÃ­odo de %d a %d dias","default-default":"Selecione um perÃ­odo",time:"Tempo",hour:"Hora",minute:"Minuto"},tc:{selected:"å·²é¸æ:",day:"å¤©",days:"å¤©",apply:"ç¢ºå®","week-1":"ä¸","week-2":"äº","week-3":"ä¸","week-4":"å","week-5":"äº","week-6":"å­","week-7":"æ¥","week-number":"å¨","month-name":["ä¸æ","äºæ","ä¸æ","åæ","äºæ","å­æ","ä¸æ","å«æ","ä¹æ","åæ","åä¸æ","åäºæ"],shortcuts:"å¿«éé¸æ",past:"éå»",following:"å°ä¾",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"ä¸é±","prev-month":"ä¸åæ","prev-year":"å»å¹´",next:"&nbsp;&nbsp;&nbsp;","next-week":"ä¸å¨","next-month":"ä¸åæ","next-year":"æå¹´","less-than":"æé¸æ¥æç¯åä¸è½å¤§æ¼%då¤©","more-than":"æé¸æ¥æç¯åä¸è½å°æ¼%då¤©","default-more":"è«é¸æå¤§æ¼%då¤©çæ¥æç¯å","default-less":"è«é¸æå°æ¼%då¤©çæ¥æç¯å","default-range":"è«é¸æ%då¤©å°%då¤©çæ¥æç¯å","default-single":"è«é¸æä¸åæ¥æ","default-default":"è«é¸æä¸åæ¥æç¯å",time:"æ¥æ",hour:"å°æ",minute:"åé"},ja:{selected:"é¸æãã¾ãã:",day:"æ¥",days:"æ¥ã",apply:"éãã","week-1":"æ","week-2":"ç«","week-3":"æ°´","week-4":"æ¨","week-5":"é","week-6":"å","week-7":"æ¥","month-name":["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"],shortcuts:"ã¯ã¤ãã¯é¸æ",past:"éå»",following:"å°æ¥",previous:"&nbsp;&nbsp;&nbsp;","prev-week":"åé±ã","prev-month":"åæ","prev-year":"æ¨å¹´",next:"&nbsp;&nbsp;&nbsp;","next-week":"æ¥é±","next-month":"æ¥æ","next-year":"æ¥å¹´","less-than":"æ¥ä»ã®ç¯å²ã¯ ï¼d æ¥ä»¥ä¸ã«ãã¹ãã§ã¯ããã¾ãã","more-than":"æ¥ä»ã®ç¯å²ã¯ ï¼d æ¥ãä¸åã£ã¦ã¯ããã¾ãã","default-more":"ï¼d æ¥ãããé·ãæéãé¸æãã¦ãã ãã","default-less":"ï¼d æ¥æªæºã®æéãé¸æãã¦ãã ãã","default-range":"ï¼d ã¨ï¼ dæ¥ã®éã®æ¥ä»ç¯å²ãé¸æãã¦ãã ãã","default-single":"æ¥ä»ãé¸æãã¦ãã ãã","default-default":"æ¥ä»ç¯å²ãé¸æãã¦ãã ãã",time:"æé",hour:"æé",minute:"å"},da:{selected:"Valgt:",day:"Dag",days:"Dage",apply:"Luk","week-1":"ma","week-2":"ti","week-3":"on","week-4":"to","week-5":"fr","week-6":"lÃ¶","week-7":"sÃ¶","month-name":["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"],shortcuts:"genveje","custom-values":"Brugerdefinerede vÃ¦rdier",past:"Forbi",following:"FÃ¸lgende",previous:"Forrige","prev-week":"uge","prev-month":"mÃ¥nad","prev-year":"Ã¥r",next:"NÃ¦ste","next-week":"NÃ¦ste uge","next-month":"NÃ¦ste mÃ¥ned","next-year":"NÃ¦ste Ã¥r","less-than":"Dato interval bÃ¸r ikke vÃ¦re med end %d dage","more-than":"Dato interval bÃ¸r ikke vÃ¦re mindre end %d dage","default-more":"VÃ¦lg datointerval lÃ¦ngere end %d dage","default-single":"VÃ¦lg dato","default-less":"VÃ¦lg datointerval mindre end %d dage","default-range":"VÃ¦lg datointerval mellem %d og %d dage","default-default":"VÃ¦lg datointerval",time:"tid",hour:"time",minute:"minut"},fi:{selected:"Valittu:",day:"PÃ¤ivÃ¤",days:"PÃ¤ivÃ¤Ã¤",apply:"Sulje","week-1":"ma","week-2":"ti","week-3":"ke","week-4":"to","week-5":"pe","week-6":"la","week-7":"su","week-number":"V","month-name":["tammikuu","helmikuu","maaliskuu","huhtikuu","toukokuu","kesÃ¤kuu","heinÃ¤kuu","elokuu","syyskuu","lokakuu","marraskuu","joulukuu"],shortcuts:"Pikavalinnat","custom-values":"Mukautetut Arvot",past:"Menneet",following:"Tulevat",previous:"Edellinen","prev-week":"Viikko","prev-month":"Kuukausi","prev-year":"Vuosi",next:"Seuraava","next-week":"Viikko","next-month":"Kuukausi","next-year":"Vuosi","less-than":"Aikajakson tulisi olla vÃ¤hemmÃ¤n kuin %d pÃ¤ivÃ¤Ã¤","more-than":"Aikajakson ei tulisi olla vÃ¤hempÃ¤Ã¤ kuin %d pÃ¤ivÃ¤Ã¤","default-more":"Valitse pidempi aikajakso kuin %d pÃ¤ivÃ¤Ã¤","default-single":"Valitse pÃ¤ivÃ¤","default-less":"Valitse lyhyempi aikajakso kuin %d pÃ¤ivÃ¤Ã¤","default-range":"Valitse aikajakso %d ja %d pÃ¤ivÃ¤n vÃ¤liltÃ¤","default-default":"Valitse aikajakso",time:"Aika",hour:"Tunti",minute:"Minuutti"},cat:{selected:"Seleccionats:",day:"Dia",days:"Dies",apply:"Tanca","week-1":"Dl","week-2":"Dm","week-3":"Dc","week-4":"Dj","week-5":"Dv","week-6":"Ds","week-7":"Dg","week-number":"S","month-name":["gener","febrer","marÃ§","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],shortcuts:"DreÃ§eres","custom-values":"Valors personalitzats",past:"Passat",following:"Futur",previous:"Anterior","prev-week":"Setmana","prev-month":"Mes","prev-year":"Any",next:"SegÃ¼ent","next-week":"Setmana","next-month":"Mes","next-year":"Any","less-than":"El perÃ­ode no hauria de ser de mÃ©s de %d dies","more-than":"El perÃ­ode no hauria de ser de menys de %d dies","default-more":"Perfavor selecciona un perÃ­ode mÃ©s gran de %d dies","default-single":"Perfavor selecciona una data","default-less":"Perfavor selecciona un perÃ­ode de menys de %d dies","default-range":"Perfavor selecciona un perÃ­ode d'entre %d i %d dies","default-default":"Perfavor selecciona un perÃ­ode",time:"Temps",hour:"Hora",minute:"Minut"}},e.fn.dateRangePicker=function(n){n||(n={}),(n=e.extend(!0,{autoClose:!1,format:"YYYY-MM-DD",separator:" to ",language:"auto",startOfWeek:"sunday",getValue:function(){return e(this).val()},setValue:function(t){e(this).attr("readonly")||e(this).is(":disabled")||t==e(this).val()||e(this).val(t)},startDate:!1,endDate:!1,time:{enabled:!1},minDays:0,maxDays:0,showShortcuts:!1,shortcuts:{},customShortcuts:[],inline:!1,container:"body",alwaysOpen:!1,singleDate:!1,lookBehind:!1,batchMode:!1,duration:200,stickyMonths:!1,dayDivAttrs:[],dayTdAttrs:[],selectForward:!1,selectBackward:!1,applyBtnClass:"",singleMonth:"auto",hoveringTooltip:function(e,t,n){return e>1?e+" "+Z("days"):""},showTopbar:!0,swapTime:!1,showWeekNumbers:!1,getWeekNumber:function(e){return t(e).format("w")},customOpenAnimation:null,customCloseAnimation:null,customArrowPrevSymbol:null,customArrowNextSymbol:null,monthSelect:!1,yearSelect:!1},n)).start=!1,n.end=!1,n.startWeek=!1,n.isTouchDevice="ontouchstart"in window||navigator.msMaxTouchPoints,n.isTouchDevice&&(n.hoveringTooltip=!1),"auto"==n.singleMonth&&(n.singleMonth=e(window).width()<480),n.singleMonth&&(n.stickyMonths=!1),n.showTopbar||(n.autoClose=!0),n.startDate&&"string"==typeof n.startDate&&(n.startDate=t(n.startDate,n.format).toDate()),n.endDate&&"string"==typeof n.endDate&&(n.endDate=t(n.endDate,n.format).toDate()),n.yearSelect&&"boolean"==typeof n.yearSelect&&(n.yearSelect=function(e){return[e-5,e+5]});var r,a,i=function(){if("auto"==n.language){var t=navigator.language?navigator.language:navigator.browserLanguage;return t&&(t=t.toLowerCase())in e.dateRangePickerLanguages?e.dateRangePickerLanguages[t]:e.dateRangePickerLanguages.default}return n.language&&n.language in e.dateRangePickerLanguages?e.dateRangePickerLanguages[n.language]:e.dateRangePickerLanguages.default}(),o=!1,s=this,l=e(s).get(0);return e(this).off(".datepicker").on("click.datepicker",(function(e){r.is(":visible")||d(n.duration)})).on("change.datepicker",(function(e){c()})).on("keyup.datepicker",(function(){try{clearTimeout(a)}catch(e){}a=setTimeout((function(){c()}),2e3)})),function(){var a=this;if(e(this).data("date-picker-opened"))I();else{e(this).data("date-picker-opened",!0),(r=function(){var t,r='<div class="date-picker-wrapper';n.extraClass&&(r+=" "+n.extraClass+" "),n.singleDate&&(r+=" single-date "),n.showShortcuts||(r+=" no-shortcuts "),n.showTopbar||(r+=" no-topbar "),n.customTopBar&&(r+=" custom-topbar "),r+='">',n.showTopbar&&(r+='<div class="drp_top-bar">',n.customTopBar?("function"==typeof n.customTopBar&&(n.customTopBar=n.customTopBar()),r+='<div class="custom-top">'+n.customTopBar+"</div>"):(r+='<div class="normal-top"><span class="selection-top">'+Z("selected")+' </span> <b class="start-day">...</b>',n.singleDate||(r+=' <span class="separator-day">'+n.separator+'</span> <b class="end-day">...</b> <i class="selected-days">(<span class="selected-days-num">3</span> '+Z("days")+")</i>"),r+="</div>",r+='<div class="error-top">error</div><div class="default-top">default</div>'),r+='<input type="button" class="apply-btn disabled'+(t="",!0===n.autoClose&&(t+=" hide"),""!==n.applyBtnClass&&(t+=" "+n.applyBtnClass),t)+'" value="'+Z("apply")+'" />',r+="</div>");var a=n.showWeekNumbers?6:5,i="&lt;";n.customArrowPrevSymbol&&(i=n.customArrowPrevSymbol);var o="&gt;";if(n.customArrowNextSymbol&&(o=n.customArrowNextSymbol),r+='<div class="month-wrapper">   <table class="month1" cellspacing="0" border="0" cellpadding="0">       <thead>           <tr class="caption">               <th>                   <span class="prev">'+i+'                   </span>               </th>               <th colspan="'+a+'" class="month-name">               </th>               <th>'+(n.singleDate||!n.stickyMonths?'<span class="next">'+o+"</span>":"")+'               </th>           </tr>           <tr class="week-name">'+q()+"       </thead>       <tbody></tbody>   </table>",!n.singleMonth&&(r+='<div class="gap">'+function(){for(var e=['<div class="gap-top-mask"></div><div class="gap-bottom-mask"></div><div class="gap-lines">'],t=0;t<20;t++)e.push('<div class="gap-line"><div class="gap-1"></div><div class="gap-2"></div><div class="gap-3"></div></div>');return e.push("</div>"),e.join("")}()+'</div><table class="month2" cellspacing="0" border="0" cellpadding="0">   <thead>   <tr class="caption">       <th>'+(n.stickyMonths?"":'<span class="prev">'+i+"</span>")+'       </th>       <th colspan="'+a+'" class="month-name">       </th>       <th>           <span class="next">'+o+'</span>       </th>   </tr>   <tr class="week-name">'+q()+"   </thead>   <tbody></tbody></table>"),r+='<div class="dp-clearfix"></div><div class="time"><div class="time1"></div>',n.singleDate||(r+='<div class="time2"></div>'),r+='</div><div class="dp-clearfix"></div></div>',r+='<div class="calendar__footer">',n.showShortcuts){r+='<div class="shortcuts"><b>'+Z("shortcuts")+"</b>";var s=n.shortcuts;if(s){var l;if(s["prev-days"]&&s["prev-days"].length>0){r+='&nbsp;<span class="prev-days">'+Z("past");for(var u=0;u<s["prev-days"].length;u++)l=s["prev-days"][u],l+=s["prev-days"][u]>1?Z("days"):Z("day"),r+=' <a href="javascript:;" shortcut="day,-'+s["prev-days"][u]+'">'+l+"</a>";r+="</span>"}if(s["next-days"]&&s["next-days"].length>0){for(r+='&nbsp;<span class="next-days">'+Z("following"),u=0;u<s["next-days"].length;u++)l=s["next-days"][u],l+=s["next-days"][u]>1?Z("days"):Z("day"),r+=' <a href="javascript:;" shortcut="day,'+s["next-days"][u]+'">'+l+"</a>";r+="</span>"}if(s.prev&&s.prev.length>0){for(r+='&nbsp;<span class="prev-buttons">'+Z("previous"),u=0;u<s.prev.length;u++)l=Z("prev-"+s.prev[u]),r+=' <a href="javascript:;" shortcut="prev,'+s.prev[u]+'">'+l+"</a>";r+="</span>"}if(s.next&&s.next.length>0){for(r+='&nbsp;<span class="next-buttons">'+Z("next"),u=0;u<s.next.length;u++)l=Z("next-"+s.next[u]),r+=' <a href="javascript:;" shortcut="next,'+s.next[u]+'">'+l+"</a>";r+="</span>"}}if(n.customShortcuts)for(u=0;u<n.customShortcuts.length;u++){var d=n.customShortcuts[u];r+='&nbsp;<span class="custom-shortcut"><a href="javascript:;" shortcut="custom">'+d.name+"</a></span>"}r+="</div>"}if(n.showCustomValues&&(r+='<div class="customValues"><b>'+(n.customValueLabel||Z("custom-values"))+"</b>",n.customValues))for(u=0;u<n.customValues.length;u++){var c=n.customValues[u];r+='&nbsp;<span class="custom-value"><a href="javascript:;" custom="'+c.value+'">'+c.name+"</a></span>"}return e(r+="</div></div>")}().hide()).append('<div class="date-range-length-tip"></div>'),e(n.container).append(r),n.inline?r.addClass("inline-wrapper"):u(),n.alwaysOpen&&r.find(".apply-btn").hide();var i=J();if(X(i),n.time.enabled)if(n.startDate&&n.endDate||n.start&&n.end)A(t(n.start||n.startDate).toDate(),"time1"),A(t(n.end||n.endDate).toDate(),"time2");else{var s=n.defaultEndTime?n.defaultEndTime:i;A(i,"time1"),A(s,"time2")}var d="";d=n.singleDate?Z("default-single"):n.minDays&&n.maxDays?Z("default-range"):n.minDays?Z("default-more"):n.maxDays?Z("default-less"):Z("default-default"),r.find(".default-top").html(d.replace(/\%d/,n.minDays).replace(/\%d/,n.maxDays)),n.singleMonth?r.addClass("single-month"):r.addClass("two-months"),setTimeout((function(){h(),o=!0}),0),r.click((function(e){e.stopPropagation()})),e(document).on("click.datepicker",K),r.find(".next").click((function(){var t,r;n.stickyMonths?(t=z(n.month1),B(r=z(n.month2))||!n.singleDate&&W(t,r)>=0||(L(t,"month1"),L(r,"month2"),P())):function(t){var r=e(t).parents("table").hasClass("month2"),a=r?n.month2:n.month1;a=z(a),!n.singleMonth&&!n.singleDate&&!r&&W(a,n.month2)>=0||B(a)||(L(a,r?"month2":"month1"),R())}(this)})),r.find(".prev").click((function(){var t,r;n.stickyMonths?(t=U(n.month1),r=U(n.month2),B(t)||!n.singleDate&&W(r,t)<=0||(L(r,"month2"),L(t,"month1"),P())):function(t){var r=e(t).parents("table").hasClass("month2"),a=r?n.month2:n.month1;a=U(a),r&&W(a,n.month1)<=0||B(a)||(L(a,r?"month2":"month1"),R())}(this)})),r.attr("unselectable","on").css("user-select","none").on("selectstart",(function(e){return e.preventDefault(),!1})),r.find(".apply-btn").click((function(){I();var t=F(new Date(n.start))+n.separator+F(new Date(n.end));e(a).trigger("datepicker-apply",{value:t,date1:new Date(n.start),date2:new Date(n.end)})})),r.find("[custom]").click((function(){var t=e(this).attr("custom");n.start=!1,n.end=!1,r.find(".day.checked").removeClass("checked"),r.find(".day.checked").parent().removeClass("td-checked"),n.setValue.call(l,t),T(),M(!0),P(),n.autoClose&&I()})),r.find("[shortcut]").click((function(){var t,r=e(this).attr("shortcut"),a=new Date,i=!1;if(-1!=r.indexOf("day")){var o=parseInt(r.split(",",2)[1],10);i=new Date((new Date).getTime()+864e5*o),a=new Date(a.getTime()+864e5*(o>0?1:-1))}else if(-1!=r.indexOf("week")){var s;for(s=1==(t=-1!=r.indexOf("prev,")?-1:1)?"monday"==n.startOfWeek?1:0:"monday"==n.startOfWeek?0:6,a=new Date(a.getTime()-864e5);a.getDay()!=s;)a=new Date(a.getTime()+864e5*t);i=new Date(a.getTime()+864e5*t*6)}else if(-1!=r.indexOf("month"))(i=1==(t=-1!=r.indexOf("prev,")?-1:1)?z(a):U(a)).setDate(1),(a=z(i)).setDate(1),a=new Date(a.getTime()-864e5);else if(-1!=r.indexOf("year"))t=-1!=r.indexOf("prev,")?-1:1,(i=new Date).setFullYear(a.getFullYear()+t),i.setMonth(0),i.setDate(1),a.setFullYear(a.getFullYear()+t),a.setMonth(11),a.setDate(31);else if("custom"==r){var l=e(this).html();if(n.customShortcuts&&n.customShortcuts.length>0)for(var u=0;u<n.customShortcuts.length;u++){var d=n.customShortcuts[u];if(d.name==l){var c;if((c=d.dates.call())&&2==c.length&&(i=c[0],a=c[1]),c&&1==c.length){var f=c[0];L(f,"month1"),L(z(f),"month2"),R()}break}}}i&&a&&(O(i,a),T())})),r.find(".time1 input[type=range]").on("change touchmove",(function(t){var n=t.target;g("time1","hour"==n.name?e(n).val().replace(/^(\d{1})$/,"0$1"):void 0,"minute"==n.name?e(n).val().replace(/^(\d{1})$/,"0$1"):void 0)})),r.find(".time2 input[type=range]").on("change touchmove",(function(t){var n=t.target;g("time2","hour"==n.name?e(n).val().replace(/^(\d{1})$/,"0$1"):void 0,"minute"==n.name?e(n).val().replace(/^(\d{1})$/,"0$1"):void 0)}))}}.call(this),n.alwaysOpen&&d(0),e(this).data("dateRangePicker",{setStart:function(e){return"string"==typeof e&&(e=t(e,n.format).toDate()),n.end=!1,j(e),this},setEnd:function(e,r){var a=new Date;return a.setTime(n.start),"string"==typeof e&&(e=t(e,n.format).toDate()),O(a,e,r),this},setDateRange:function(e,r,a){"string"==typeof e&&"string"==typeof r&&(e=t(e,n.format).toDate(),r=t(r,n.format).toDate()),O(e,r,a)},clear:function(){n.start=!1,n.end=!1,r.find(".day.checked").removeClass("checked last-date-selected first-date-selected").parent().removeClass("td-checked td-last-date-selected td-first-date-selected td-hovering"),n.setValue.call(l,""),T(),M(),P()},close:I,open:d,redraw:H,getDatePicker:function(){return r},resetMonthsView:X,destroy:function(){e(s).off(".datepicker"),e(s).data("dateRangePicker",""),e(s).data("date-picker-opened",null),r.remove(),e(window).off("resize.datepicker",u),e(document).off("click.datepicker",K)}}),e(window).on("resize.datepicker",u),this;function u(){if(!n.inline){var t=e(s).offset();if("relative"==e(n.container).css("position")){var a=e(n.container).offset(),i=Math.max(0,t.left+r.outerWidth()-e("body").width()+16);r.css({top:t.top-a.top+e(s).outerHeight()+4,left:t.left-a.left-i})}else t&&(t.left<460?r.css({top:t.top+e(s).outerHeight()+parseInt(e("body").css("border-top")||0,10),left:t.left}):r.css({top:t.top+e(s).outerHeight()+parseInt(e("body").css("border-top")||0,10),left:t.left+e(s).width()-r.width()-16}))}}function d(t){H(),c(),n.customOpenAnimation?n.customOpenAnimation.call(r.get(0),(function(){e(s).trigger("datepicker-opened",{relatedTarget:r})})):r.slideDown(t,(function(){e(s).trigger("datepicker-opened",{relatedTarget:r})})),e(s).trigger("datepicker-open",{relatedTarget:r}),R(),h(),u()}function c(){var e=n.getValue.call(l),r=e?e.split(n.separator):"";if(r&&(1==r.length&&n.singleDate||r.length>=2)){var a=n.format;a.match(/Do/)&&(a=a.replace(/Do/,"D"),r[0]=r[0].replace(/(\d+)(th|nd|st)/,"$1"),r.length>=2&&(r[1]=r[1].replace(/(\d+)(th|nd|st)/,"$1"))),o=!1,r.length>=2?O(f(r[0],a,t.locale(n.language)),f(r[1],a,t.locale(n.language))):1==r.length&&n.singleDate&&j(f(r[0],a,t.locale(n.language))),o=!0}}function f(e,n,r){return t(e,n,r).isValid()?t(e,n,r).toDate():t().toDate()}function h(){var e=r.find(".gap").css("margin-left");e&&(e=parseInt(e));var t=r.find(".month1").width(),n=r.find(".gap").width()+(e?2*e:0),a=r.find(".month2").width();r.find(".month-wrapper").width(t+n+a)}function p(e,n){r.find("."+e+" input[type=range].hour-range").val(t(n).hours()),r.find("."+e+" input[type=range].minute-range").val(t(n).minutes()),g(e,t(n).format("HH"),t(n).format("mm"))}function m(e,r){n[e]=parseInt(t(parseInt(r)).startOf("day").add(t(n[e+"Time"]).format("HH"),"h").add(t(n[e+"Time"]).format("mm"),"m").valueOf())}function g(e,a,i){switch(a&&r.find("."+e+" .hour-val").text(a),i&&r.find("."+e+" .minute-val").text(i),e){case"time1":n.start&&o("start",t(n.start)),o("startTime",t(n.startTime||t().valueOf()));break;case"time2":n.end&&o("end",t(n.end)),o("endTime",t(n.endTime||t().valueOf()))}function o(e,t){var r=t.format("HH"),o=t.format("mm");n[e]=t.startOf("day").add(a||r,"h").add(i||o,"m").valueOf()}T(),M(),P()}function v(e){var r=e;return"week-range"===n.batchMode?r="monday"===n.startOfWeek?t(parseInt(e)).startOf("isoweek").valueOf():t(parseInt(e)).startOf("week").valueOf():"month-range"===n.batchMode&&(r=t(parseInt(e)).startOf("month").valueOf()),r}function y(e){var r=e;return"week-range"===n.batchMode?r="monday"===n.startOfWeek?t(parseInt(e)).endOf("isoweek").valueOf():t(parseInt(e)).endOf("week").valueOf():"month-range"===n.batchMode&&(r=t(parseInt(e)).endOf("month").valueOf()),r}function w(r){if(!r.hasClass("invalid")){var a=r.attr("time");if(r.addClass("checked"),r.parent().addClass("td-checked"),n.singleDate?(n.start=a,n.end=!1):"week"===n.batchMode?"monday"===n.startOfWeek?(n.start=t(parseInt(a)).startOf("isoweek").valueOf(),n.end=t(parseInt(a)).endOf("isoweek").valueOf()):(n.end=t(parseInt(a)).endOf("week").valueOf(),n.start=t(parseInt(a)).startOf("week").valueOf()):"workweek"===n.batchMode?(n.start=t(parseInt(a)).day(1).valueOf(),n.end=t(parseInt(a)).day(5).valueOf()):"weekend"===n.batchMode?(n.start=t(parseInt(a)).day(6).valueOf(),n.end=t(parseInt(a)).day(7).valueOf()):"month"===n.batchMode?(n.start=t(parseInt(a)).startOf("month").valueOf(),n.end=t(parseInt(a)).endOf("month").valueOf()):n.start&&n.end||!n.start&&!n.end?(n.start=v(a),n.end=!1):n.start&&(n.end=y(a),n.time.enabled&&m("end",n.end)),n.time.enabled&&(n.start&&m("start",n.start),n.end&&m("end",n.end)),!n.singleDate&&n.start&&n.end&&n.start>n.end){var i=n.end;n.end=y(n.start),n.start=v(i),n.time.enabled&&n.swapTime&&(p("time1",n.start),p("time2",n.end))}n.start=parseInt(n.start),n.end=parseInt(n.end),_(),n.start&&!n.end&&(e(s).trigger("datepicker-first-date-selected",{date1:new Date(n.start)}),x(r)),b(),T(),M(),P(),S()}}function k(e){if(e=parseInt(e,10),n.startDate&&V(e,n.startDate)<0)return!1;if(n.endDate&&V(e,n.endDate)>0)return!1;if(n.start&&!n.end&&!n.singleDate){if(n.maxDays>0&&C(e,n.start)>n.maxDays)return!1;if(n.minDays>0&&C(e,n.start)<n.minDays)return!1;if(n.selectForward&&e<n.start)return!1;if(n.selectBackward&&e>n.start)return!1;if(n.beforeShowDay&&"function"==typeof n.beforeShowDay){for(var t=!0,r=e;C(r,n.start)>1;){if(!n.beforeShowDay(new Date(r))[0]){t=!1;break}if(Math.abs(r-n.start)<864e5)break;r>n.start&&(r-=864e5),r<n.start&&(r+=864e5)}if(!t)return!1}}return!0}function b(){return r.find(".day.invalid.tmp").removeClass("tmp invalid").addClass("valid"),n.start&&!n.end&&r.find(".day.toMonth.valid").each((function(){k(parseInt(e(this).attr("time"),10))?e(this).addClass("valid tmp").removeClass("invalid"):e(this).addClass("invalid tmp").removeClass("valid")})),!0}function x(t){var a=parseInt(t.attr("time")),i="";if(t.hasClass("has-tooltip")&&t.attr("data-tooltip"))i='<span class="tooltip-content">'+t.attr("data-tooltip")+"</span>";else if(!t.hasClass("invalid"))if(n.singleDate)r.find(".day.hovering").removeClass("hovering"),t.addClass("hovering"),t.parent().addClass("td-hovering");else if(r.find(".day").each((function(){var t=parseInt(e(this).attr("time"));n.start,n.end,t==a?(e(this).addClass("hovering"),e(this).parent().addClass("td-hovering")):(e(this).removeClass("hovering"),e(this).parent().removeClass("td-hovering")),n.start&&!n.end&&(n.start<t&&a>=t||n.start>t&&a<=t)?(e(this).addClass("hovering"),e(this).parent().addClass("td-hovering")):(e(this).removeClass("hovering"),e(this).parent().removeClass("td-hovering"))})),n.start&&!n.end){var o=C(a,n.start);n.hoveringTooltip&&("function"==typeof n.hoveringTooltip?i=n.hoveringTooltip(o,n.start,a):!0===n.hoveringTooltip&&o>1&&(i=o+" "+Z("days")))}if(i){var s=t.offset(),l=r.offset(),u=s.left-l.left,d=s.top-l.top;u+=t.width()/2;var c=r.find(".date-range-length-tip"),f=c.css({visibility:"hidden",display:"none"}).html(i).width(),h=c.height();u-=f/2,d-=h,setTimeout((function(){c.css({left:u,top:d,display:"block",visibility:"visible"})}),10)}else r.find(".date-range-length-tip").hide()}function _(){r.find(".day.hovering").removeClass("hovering"),r.find(".date-range-length-tip").hide()}function D(e){var r=e.val(),a=e.attr("name"),i=e.parents("table").hasClass("month1")?"month1":"month2",o="month1"===i?"month2":"month1",s=!!n.startDate&&t(n.startDate),l=!!n.endDate&&t(n.endDate),u=t(n[i])[a](r);s&&u.isSameOrBefore(s)&&(u=s.add("month2"===i?1:0,"month")),l&&u.isSameOrAfter(l)&&(u=l.add(n.singleMonth||"month1"!==i?0:-1,"month")),L(u,i),"month1"===i?(n.stickyMonths||t(u).isSameOrAfter(n[o],"month"))&&L(t(u).add(1,"month"),o):(n.stickyMonths||t(u).isSameOrBefore(n[o],"month"))&&L(t(u).add(-1,"month"),o),R()}function S(){!0===n.singleDate?o&&n.start&&n.autoClose&&I():o&&n.start&&n.end&&n.autoClose&&I()}function T(){var e=Math.ceil((n.end-n.start)/864e5)+1;n.singleDate?n.start&&!n.end?r.find(".drp_top-bar").removeClass("error").addClass("normal"):r.find(".drp_top-bar").removeClass("error").removeClass("normal"):n.maxDays&&e>n.maxDays?(n.start=!1,n.end=!1,r.find(".day").removeClass("checked"),r.find(".day").parent().removeClass("td-checked"),r.find(".drp_top-bar").removeClass("normal").addClass("error").find(".error-top").html(Z("less-than").replace("%d",n.maxDays))):n.minDays&&e<n.minDays?(n.start=!1,n.end=!1,r.find(".day").removeClass("checked"),r.find(".day").parent().removeClass("td-checked"),r.find(".drp_top-bar").removeClass("normal").addClass("error").find(".error-top").html(Z("more-than").replace("%d",n.minDays))):n.start||n.end?r.find(".drp_top-bar").removeClass("error").addClass("normal"):r.find(".drp_top-bar").removeClass("error").removeClass("normal"),n.singleDate&&n.start&&!n.end||!n.singleDate&&n.start&&n.end?r.find(".apply-btn").removeClass("disabled"):r.find(".apply-btn").addClass("disabled"),n.batchMode&&(n.start&&n.startDate&&V(n.start,n.startDate)<0||n.end&&n.endDate&&V(n.end,n.endDate)>0)&&(n.start=!1,n.end=!1,r.find(".day").removeClass("checked"),r.find(".day").parent().removeClass("td-checked"))}function M(t,a){var i;r.find(".start-day").html("..."),r.find(".end-day").html("..."),r.find(".selected-days").hide(),n.start&&r.find(".start-day").html(F(new Date(parseInt(n.start)))),n.end&&r.find(".end-day").html(F(new Date(parseInt(n.end)))),n.start&&n.singleDate?(r.find(".apply-btn").removeClass("disabled"),i=F(new Date(n.start)),n.setValue.call(l,i,F(new Date(n.start)),F(new Date(n.end))),o&&!a&&e(s).trigger("datepicker-change",{value:i,date1:new Date(n.start)})):n.start&&n.end?(r.find(".selected-days").show().find(".selected-days-num").html(C(n.end,n.start)),r.find(".apply-btn").removeClass("disabled"),i=F(new Date(n.start))+n.separator+F(new Date(n.end)),n.setValue.call(l,i,F(new Date(n.start)),F(new Date(n.end))),o&&!a&&e(s).trigger("datepicker-change",{value:i,date1:new Date(n.start),date2:new Date(n.end)})):t?r.find(".apply-btn").removeClass("disabled"):r.find(".apply-btn").addClass("disabled")}function C(e,n){return Math.abs(t(e).diff(t(n),"d"))+1}function O(e,t,r){if(e.getTime()>t.getTime()){var a=t;t=e,e=a,a=null}var i=!0;if(n.startDate&&V(e,n.startDate)<0&&(i=!1),n.endDate&&V(t,n.endDate)>0&&(i=!1),!i)return L(n.startDate,"month1"),L(z(n.startDate),"month2"),void R();n.start=e.getTime(),n.end=t.getTime(),n.time.enabled&&(p("time1",e),p("time2",t)),(n.stickyMonths||V(e,t)>0&&0===W(e,t))&&(n.lookBehind?e=U(t):t=z(e)),n.stickyMonths&&!1!==n.endDate&&W(t,n.endDate)>0&&(e=U(e),t=U(t)),n.stickyMonths||0===W(e,t)&&(n.lookBehind?e=U(t):t=z(e)),L(e,"month1"),L(t,"month2"),R(),T(),M(!1,r),S()}function j(e){var t=!0;n.startDate&&V(e,n.startDate)<0&&(t=!1),n.endDate&&V(e,n.endDate)>0&&(t=!1),t?(n.start=e.getTime(),n.time.enabled&&p("time1",e),L(e,"month1"),!0!==n.singleMonth&&L(z(e),"month2"),R(),M(),S()):L(n.startDate,"month1")}function P(){(n.start||n.end)&&(r.find(".day").each((function(){var r=parseInt(e(this).attr("time")),a=n.start,i=n.end;n.time.enabled&&(r=t(r).startOf("day").valueOf(),a=t(a||t().valueOf()).startOf("day").valueOf(),i=t(i||t().valueOf()).startOf("day").valueOf()),n.start&&n.end&&i>=r&&a<=r||n.start&&!n.end&&t(a).format("YYYY-MM-DD")==t(r).format("YYYY-MM-DD")?(e(this).addClass("checked"),e(this).parent().addClass("td-checked")):(e(this).removeClass("checked"),e(this).parent().removeClass("td-checked")),n.start&&t(a).format("YYYY-MM-DD")==t(r).format("YYYY-MM-DD")?(e(this).addClass("first-date-selected"),e(this).parent().addClass("td-first-date-selected")):(e(this).removeClass("first-date-selected"),e(this).parent().removeClass("td-first-date-selected")),n.end&&t(i).format("YYYY-MM-DD")==t(r).format("YYYY-MM-DD")?(e(this).addClass("last-date-selected"),e(this).parent().addClass("td-last-date-selected")):(e(this).removeClass("last-date-selected"),e(this).parent().removeClass("td-last-date-selected"))})),r.find(".week-number").each((function(){e(this).attr("data-start-time")==n.startWeek&&e(this).addClass("week-number-selected")})))}function L(a,i){var o=function(e,r){var a=(e=t(e)).get("month"),i='<div class="month-element">'+N(a)+"</div>";if(!n.monthSelect)return i;var o=!!n.startDate&&t(n.startDate).add(n.singleMonth||"month2"!==r?0:1,"month"),s=!!n.endDate&&t(n.endDate).add(n.singleMonth||"month1"!==r?0:-1,"month"),l=o&&e.isSame(o,"year")?o.get("month"):0,u=s&&e.isSame(s,"year")?s.get("month"):11,d=Math.min(l,a),c=Math.max(u,a);return d===c?i:E("month",Y({minSelectable:l,maxSelectable:u,minVisible:d,maxVisible:c},a,(function(e){return N(e)})))}(a=t(a).toDate(),i),s=function(e,r){var a=(e=t(e)).get("year"),i='<div class="month-element">'+a+"</div>";if(!n.yearSelect)return i;var o=n.yearSelect&&"function"==typeof n.yearSelect,s=!!n.startDate&&t(n.startDate).add(n.singleMonth||"month2"!==r?0:1,"month"),l=!!n.endDate&&t(n.endDate).add(n.singleMonth||"month1"!==r?0:-1,"month"),u=o?n.yearSelect(a):n.yearSelect.slice(),d=s?Math.max(u[0],s.get("year")):Math.min(u[0],a),c=l?Math.min(u[1],l.get("year")):Math.max(u[1],a),f=Math.min(d,a),h=Math.max(c,a);return f===h?i:E("year",Y({minSelectable:d,maxSelectable:c,minVisible:f,maxVisible:h},a))}(a,i);r.find("."+i+" .month-name").html(o+" "+s),r.find("."+i+" tbody").html(function(e){var r=[];e.setDate(1),new Date(e.getTime()-864e5);var a,i,o=new Date,s=e.getDay();if(0===s&&"monday"===n.startOfWeek&&(s=7),s>0)for(var l=s;l>0;l--){var u=new Date(e.getTime()-864e5*l);i=k(u.getTime()),n.startDate&&V(u,n.startDate)<0&&(i=!1),n.endDate&&V(u,n.endDate)>0&&(i=!1),r.push({date:u,type:"lastMonth",day:u.getDate(),time:u.getTime(),valid:i})}var d=e.getMonth();for(l=0;l<40;l++)a=t(e).add(l,"days").toDate(),i=k(a.getTime()),n.startDate&&V(a,n.startDate)<0&&(i=!1),n.endDate&&V(a,n.endDate)>0&&(i=!1),r.push({date:a,type:a.getMonth()==d?"toMonth":"nextMonth",day:a.getDate(),time:a.getTime(),valid:i});for(var c=[],f=0;f<6&&"nextMonth"!=r[7*f].type;f++){for(c.push("<tr>"),u=0;u<7;u++){var h="monday"==n.startOfWeek?u+1:u;a=r[7*f+h];var p=t(a.time).format("L")==t(o).format("L");if(a.extraClass="",a.tooltip="",a.valid&&n.beforeShowDay&&"function"==typeof n.beforeShowDay){var m=n.beforeShowDay(t(a.time).toDate());a.valid=m[0],a.extraClass=m[1]||"",a.tooltip=m[2]||"",""!==a.tooltip&&(a.extraClass+=" has-tooltip ")}var g={time:a.time,"data-tooltip":a.tooltip,class:"day "+a.type+" "+a.extraClass+" "+(a.valid?"valid":"invalid")+" "+(p?"real-today":"")};0===u&&n.showWeekNumbers&&c.push('<td><div class="week-number" data-start-time="'+a.time+'">'+n.getWeekNumber(a.date)+"</div></td>"),c.push("<td "+$({},n.dayTdAttrs,a)+"><div "+$(g,n.dayDivAttrs,a)+">"+G(a.time,a.day)+"</div></td>")}c.push("</tr>")}return c.join("")}(a)),n[i]=a,b(),r.find(".day").off("click").click((function(t){w(e(this))})),r.find(".day").off("mouseenter").mouseenter((function(t){x(e(this))})),r.find(".day").off("mouseleave").mouseleave((function(e){r.find(".date-range-length-tip").hide(),n.singleDate&&_()})),r.find(".week-number").off("click").click((function(a){var i,o,s,l;i=e(this),l=parseInt(i.attr("data-start-time"),10),n.startWeek?(r.find(".week-number-selected").removeClass("week-number-selected"),o=new Date(l<n.startWeek?l:n.startWeek),s=new Date(l<n.startWeek?n.startWeek:l),n.startWeek=!1,n.start=t(o).day("monday"==n.startOfWeek?1:0).valueOf(),n.end=t(s).day("monday"==n.startOfWeek?7:6).valueOf()):(n.startWeek=l,i.addClass("week-number-selected"),o=new Date(l),n.start=t(o).day("monday"==n.startOfWeek?1:0).valueOf(),n.end=t(o).day("monday"==n.startOfWeek?7:6).valueOf()),b(),T(),M(),P(),S()})),r.find(".month").off("change").change((function(t){D(e(this))})),r.find(".year").off("change").change((function(t){D(e(this))}))}function Y(e,t,n){var r=[];n=n||function(e){return e};for(var a=e.minVisible;a<=e.maxVisible;a++)r.push({value:a,text:n(a),selected:a===t,disabled:a<e.minSelectable||a>e.maxSelectable});return r}function E(e,t){for(var n,r='<div class="select-wrapper"><select class="'+e+'" name="'+e+'">',a=0,i=t.length;a<i;a++){var o=t[a];r+='<option value="'+o.value+'"'+(o.selected?" selected":"")+(o.disabled?" disabled":"")+">"+o.text+"</option>",o.selected&&(n=o.text)}return r+="</select>"+n+"</div>"}function A(e,t){r.find("."+t).append("<div><span>"+Z("Time")+': <span class="hour-val">00</span>:<span class="minute-val">00</span></span></div><div class="hour"><label>'+Z("Hour")+': <input type="range" class="hour-range" name="hour" min="0" max="23"></label></div><div class="minute"><label>'+Z("Minute")+': <input type="range" class="minute-range" name="minute" min="0" max="59"></label></div>'),p(t,e)}function N(e){return Z("month-name")[e]}function F(e){return t(e).format(n.format)}function R(){P();var e=parseInt(t(n.month1).format("YYYYMM")),a=parseInt(t(n.month2).format("YYYYMM")),i=Math.abs(e-a);i>1&&89!=i?r.addClass("has-gap").removeClass("no-gap").find(".gap").css("visibility","visible"):r.removeClass("has-gap").addClass("no-gap").find(".gap").css("visibility","hidden");var o=r.find("table.month1").height(),s=r.find("table.month2").height();r.find(".gap").height(Math.max(o,s)+10)}function I(){if(!n.alwaysOpen){var t=function(){e(s).data("date-picker-opened",!1),e(s).trigger("datepicker-closed",{relatedTarget:r})};n.customCloseAnimation?n.customCloseAnimation.call(r.get(0),t):e(r).slideUp(n.duration,t),e(s).trigger("datepicker-close",{relatedTarget:r})}}function H(){L(n.month1,"month1"),L(n.month2,"month2")}function W(e,n){var r=parseInt(t(e).format("YYYYMM"))-parseInt(t(n).format("YYYYMM"));return r>0?1:0===r?0:-1}function V(e,n){var r=parseInt(t(e).format("YYYYMMDD"))-parseInt(t(n).format("YYYYMMDD"));return r>0?1:0===r?0:-1}function z(e){return t(e).add(1,"months").toDate()}function U(e){return t(e).add(-1,"months").toDate()}function q(){var e=n.showWeekNumbers?"<th>"+Z("week-number")+"</th>":"";return"monday"==n.startOfWeek?e+"<th>"+Z("week-1")+"</th><th>"+Z("week-2")+"</th><th>"+Z("week-3")+"</th><th>"+Z("week-4")+"</th><th>"+Z("week-5")+"</th><th>"+Z("week-6")+"</th><th>"+Z("week-7")+"</th>":e+"<th>"+Z("week-7")+"</th><th>"+Z("week-1")+"</th><th>"+Z("week-2")+"</th><th>"+Z("week-3")+"</th><th>"+Z("week-4")+"</th><th>"+Z("week-5")+"</th><th>"+Z("week-6")+"</th>"}function B(e){return e=t(e),!(!n.startDate||!e.endOf("month").isBefore(n.startDate))||!(!n.endDate||!e.startOf("month").isAfter(n.endDate))}function $(t,n,r){var a=e.extend(!0,{},t);e.each(n,(function(e,t){var n=t(r);for(var i in n)a.hasOwnProperty(i)?a[i]+=n[i]:a[i]=n[i]}));var i="";for(var o in a)a.hasOwnProperty(o)&&(i+=o+'="'+a[o]+'" ');return i}function G(e,t){return n.showDateFilter&&"function"==typeof n.showDateFilter?n.showDateFilter(e,t):t}function Z(t){var n=t.toLowerCase(),r=t in i?i[t]:n in i?i[n]:null,a=e.dateRangePickerLanguages.default;return null==r&&(r=t in a?a[t]:n in a?a[n]:""),r}function J(){var e=n.defaultTime?n.defaultTime:new Date;return n.lookBehind?(n.startDate&&W(e,n.startDate)<0&&(e=z(t(n.startDate).toDate())),n.endDate&&W(e,n.endDate)>0&&(e=t(n.endDate).toDate())):(n.startDate&&W(e,n.startDate)<0&&(e=t(n.startDate).toDate()),n.endDate&&W(z(e),n.endDate)>0&&(e=U(t(n.endDate).toDate()))),n.singleDate&&(n.startDate&&W(e,n.startDate)<0&&(e=t(n.startDate).toDate()),n.endDate&&W(e,n.endDate)>0&&(e=t(n.endDate).toDate())),e}function X(e){e||(e=J()),n.lookBehind?(L(U(e),"month1"),L(e,"month2")):(L(e,"month1"),L(z(e),"month2")),n.singleDate&&L(e,"month1"),P(),R()}function K(e){}}})?r.apply(t,a):r)||(e.exports=i)},function(e,t,n){"use strict";(function(e){var t=n(6);e(document).ready((function(){e(".js-text-field.text-field_masked input").each((function(){var n={};if(e(this).attr("data-type")){var r=e(this).attr("data-type");n[r]=!0;try{n[r+"Pattern"]=!!e(this).attr("data-pattern")&&JSON.parse(e(this).attr("data-pattern"))}catch(e){console.warn(e.stack)}}n.delimiter=!!e(this).attr("data-delimiter")&&e(this).attr("data-delimiter");try{n.blocks=!!e(this).attr("data-blocks")&&JSON.parse(e(this).attr("data-blocks"))}catch(e){console.warn(e.stack)}new t.a(e(this),n)}))}))}).call(this,n(0))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){e(document).ready((function(){e(".js-counted-item__operation").each((function(){e(this).on("click",(function(){var t=e(this).closest(".js-counted-item"),n=t.find(".js-counted-item__value"),r=1*n.text(),a=t.find(".js-counted-item__text").text();e(this).hasClass("counted-item__operation_disabled")||(e(this).hasClass("js-counted-item__operation_dec")?(r-=1,n.text(r),0==r&&e(this).addClass("counted-item__operation_disabled"),98==r&&e(this).parent().find(".js-counted-item__operation_inc").removeClass("counted-item__operation_disabled")):(r+=1,n.text(r),99==r&&e(this).addClass("counted-item__operation_disabled"),1==r&&e(this).parent().find(".js-counted-item__operation_dec").removeClass("counted-item__operation_disabled")),a=0==r?"":r+" "+a,t.attr("data-counted-item",a))}))})),document.querySelectorAll(".js-counted-item").forEach((function(e){var t=e.querySelector(".js-counted-item__value"),n=e.querySelector(".js-counted-item__operation_dec");new MutationObserver((function(){e.hasAttribute("data-clear")&&(t.textContent="0",n.classList.add("counted-item__operation_disabled"),e.setAttribute("data-counted-item",""),e.removeAttribute("data-clear"))})).observe(e,{attributes:!0})}))}))}).call(this,n(0))},function(e,t,n){(function(e){e(document).ready((function(){e(".js-dropdown__arrow").each((function(){e(this).on("click",(function(){var t=e(this).closest(".js-dropdown");t.children(".js-dropdown__popup").slideToggle(200,"linear"),t.toggleClass("dropdown_open")}))})),e(".js-dropdown__action_clear").each((function(){e(this).on("click",(function(){e(this).closest(".js-dropdown").find(".js-dropdown__item-data").each((function(){e(this).attr("data-clear",!0)})),e(this).addClass("dropdown__action_hidden")}))})),e(".js-dropdown__action_apply").each((function(){e(this).on("click",(function(){e(this).closest(".js-dropdown").find(".js-dropdown__popup").slideToggle(200,"linear").parent().toggleClass("dropdown_open")}))})),document.querySelectorAll(".js-dropdown").forEach((function(e){var t=e.querySelectorAll(".js-dropdown__item-data"),n=e.querySelector(".js-dropdown__text"),r=e.querySelector(".js-dropdown__action_clear"),a=e.getAttribute("data-initial-text"),i="",o=new MutationObserver((function(){var e;t.forEach((function(t){e=t.getAttribute("data-counted-item"),i=""!=e?i+e+", ":i})),i.slice(0,-2)?(r&&r.classList.remove("dropdown__action_hidden"),i=i.slice(0,-2)):(r&&r.classList.add("dropdown__action_hidden"),i=a),n.textContent=i,i=""}));t.forEach((function(e){o.observe(e,{attributes:!0})}))}))}))}).call(this,n(0))},,function(e,t,n){(function(e){e(document).ready((function(){e(".js-date-dropdown").each((function(){var t=e(this),n=t.find(".js-date-dropdown__date_order_first input"),r=t.find(".js-date-dropdown__date_order_last input"),a=t.find(".js-date-dropdown__calendar"),i=t.find(".js-date-dropdown__date_order_first").attr("data-date")||!1,o=t.find(".js-date-dropdown__date_order_last").attr("data-date")||!1,s=t.attr("data-language"),l=t.attr("data-button-to-clear"),u=t.attr("data-button-to-apply");if(t.dateRangePicker({language:s,singleMonth:!0,showShortcuts:!1,showTopbar:!0,startOfWeek:"monday",format:"DD.MM.YYYY",hoveringTooltip:!1,setValue:function(e,t,a){n.val(t),r.val(a)},inline:!0,customArrowPrevSymbol:'<div class="calendar__arrow js-calendar__arrow"><i class="material-icons">arrow_back</i></div>',customArrowNextSymbol:'<div class="calendar__arrow js-calendar__arrow"><i class="material-icons">arrow_forward</i></div>',container:a}),t.bind("datepicker-opened",(function(){a.addClass(".date-dropdown__calendar_open"),t.find(".js-calendar__icon-link_action_clear").click((function(e){e.stopPropagation(),t.data("dateRangePicker").clear()})),t.find(".js-calendar__icon-link_action_apply").click((function(e){e.stopPropagation(),t.data("dateRangePicker").close(),a.removeClass(".date-dropdown__calendar_open")})),t.find(".date-dropdown__arrow").click((function(e){a.hasClass(".date-dropdown__calendar_open")&&(e.stopPropagation(),t.data("dateRangePicker").close(),a.removeClass(".date-dropdown__calendar_open"))}))})),a.find(".date-picker-wrapper").append('<button class="icon-link calendar__icon-link_action_clear js-calendar__icon-link_action_clear" type="button">'+l+'</button><button class="icon-link icon-link_primary calendar__icon-link_action_apply js-calendar__icon-link_action_apply" type="button">'+u+"</button>"),i&&o)try{t.data("dateRangePicker").setDateRange(i,o)}catch(e){console.warn("Wrong date format")}function d(){if(n.val()&&r.val())try{t.data("dateRangePicker").setDateRange(n.val(),r.val()),t.data("dateRangePicker").close()}catch(e){console.warn("Incorrect dates")}}function c(e){13==e.keyCode&&d()}n.on("blur",d),r.on("blur",d),n.on("keypress",c),r.on("keypress",c)}))}))}).call(this,n(0))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t),function(e){n(3),n(66),n(24);var t=n(1),r=n.n(t);n(19),n(7),n(25),n(27),n(28),n(30);r.a.locale("ru"),e(document).ready((function(){e(".js-cards__calendar").dateRangePicker({language:"ru",singleMonth:!0,showShortcuts:!1,showTopbar:!1,startOfWeek:"monday",hoveringTooltip:!1,customArrowPrevSymbol:'<div class="calendar__arrow arrow"><i class="material-icons">arrow_back</i></div>',customArrowNextSymbol:'<div class="calendar__arrow arrow"><i class="material-icons">arrow_forward</i></div>',inline:!0,container:".calendar-wrap",alwaysOpen:!0}),e(".calendar-wrap").find(".date-picker-wrapper").append('<button class="icon-link calendar__icon-link_action_clear js-calendar__icon-link_action_clear">ÐÑÐ¸ÑÑÐ¸ÑÑ</button><button class="icon-link icon-link_primary calendar__icon-link_action_apply js-calendar__icon-link_action_apply">ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ</button>'),e(".js-cards__calendar").data("dateRangePicker").setDateRange("2019/08/19","2019/08/23"),e(".js-cards__calendar-wrap .js-calendar__icon-link_action_clear").click((function(t){t.stopPropagation(),e(".js-cards__calendar").data("dateRangePicker").clear()}))}))}.call(this,n(0))},function(e,t,n){var r=n(67);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L21vbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvbWFpbi5zY3NzP2E5ODMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xlYXZlLmpzL2Rpc3QvY2xlYXZlLWVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Zhdmljb24vZmF2aWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9mYXZpY29uL2FuZHJvaWQtY2hyb21lLTE0NHgxNDQucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvZmF2aWNvbi9hcHBsZS10b3VjaC1pY29uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Zhdmljb24vYnJvd3NlcmNvbmZpZy54bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9mYXZpY29uL2Zhdmljb24tMTZ4MTYucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvZmF2aWNvbi9mYXZpY29uLTMyeDMyLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Zhdmljb24vZmF2aWNvbi5pY28iLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9mYXZpY29uL21zdGlsZS0xNTB4MTUwLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Zhdmljb24vc2FmYXJpLXBpbm5lZC10YWIuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvZmF2aWNvbi9zaXRlLndlYm1hbmlmZXN0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3J1LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VtcHR5LW1vZHVsZSBzeW5jIG5vbnJlY3Vyc2l2ZSBqcyQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VtcHR5LW1vZHVsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LWRhdGUtcmFuZ2UtcGlja2VyL2Rpc3QvanF1ZXJ5LmRhdGVyYW5nZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzLWJhc2UvdGV4dC1maWVsZC90ZXh0LWZpZWxkLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy1iYXNlL2NvdW50ZWQtaXRlbS9jb3VudGVkLWl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy1iYXNlL2Ryb3Bkb3duL2Ryb3Bkb3duLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MtYmFzZS9kYXRlLWRyb3Bkb3duL2RhdGUtZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL2NhcmRzL2NhcmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9jYXJkcy9jYXJkcy5zY3NzPzFhOGIiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJjb25jYXQiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImxlbmd0aCIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsImhhcyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwic3dhcCIsIm9sZCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsImhvb2tDYWxsYmFjayIsInNvbWUiLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJyZXMiLCJoYXNPd25Qcm9wIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwibWVyaWRpZW0iLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiaXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJfZCIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwibW9tZW50UHJvcGVydGllcyIsImNvcHlDb25maWciLCJmcm9tIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsImFic0Zsb29yIiwibnVtYmVyIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibWluIiwibGVuZ3RoRGlmZiIsImFicyIsImRpZmZzIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiRnVuY3Rpb24iLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsImFsaWFzZXMiLCJhZGRVbml0QWxpYXMiLCJzaG9ydGhhbmQiLCJsb3dlckNhc2UiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRQcm9wIiwibm9ybWFsaXplZElucHV0IiwicHJpb3JpdGllcyIsImFkZFVuaXRQcmlvcml0eSIsInByaW9yaXR5IiwiemVyb0ZpbGwiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInBvdyIsInN1YnN0ciIsImZvcm1hdHRpbmdUb2tlbnMiLCJsb2NhbEZvcm1hdHRpbmdUb2tlbnMiLCJmb3JtYXRGdW5jdGlvbnMiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImFkZEZvcm1hdFRva2VuIiwicGFkZGVkIiwib3JkaW5hbCIsImxvY2FsZURhdGEiLCJmb3JtYXRNb21lbnQiLCJleHBhbmRGb3JtYXQiLCJhcnJheSIsIm1vbSIsIm91dHB1dCIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImludmFsaWREYXRlIiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibG9uZ0RhdGVGb3JtYXQiLCJsYXN0SW5kZXgiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFdvcmQiLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInJlZ2V4RXNjYXBlIiwicDEiLCJwMiIsInAzIiwicDQiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJZRUFSIiwiTU9OVEgiLCJEQVRFIiwiSE9VUiIsIk1JTlVURSIsIlNFQ09ORCIsIk1JTExJU0VDT05EIiwiV0VFSyIsIldFRUtEQVkiLCJkYXlzSW5ZZWFyIiwieWVhciIsImlzTGVhcFllYXIiLCJ5IiwicGFyc2VUd29EaWdpdFllYXIiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJtb250aCIsImRhdGUiLCJkYXlzSW5Nb250aCIsIngiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsIl9tb250aHNSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJjcmVhdGVEYXRlIiwiaCIsIk0iLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsImRheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla09mZnNldCIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJkYXkiLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkZCIsIk1NIiwieXkiLCJtZXJpZGllbVBhcnNlIiwibG9jYWxlcyIsImxvY2FsZUZhbWlsaWVzIiwibm9ybWFsaXplTG9jYWxlIiwibG9hZExvY2FsZSIsIm9sZExvY2FsZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsIl9jb25maWciLCJwYXJlbnRMb2NhbGUiLCJmb3JFYWNoIiwibmFtZXMiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZGVmYXVsdHMiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsIm5vd1ZhbHVlIiwiX3VzZVVUQyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImN1cnJlbnREYXRlQXJyYXkiLCJ3ZWVrWWVhciIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiY3VyV2VlayIsImdnIiwiX2RheU9mWWVhciIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9uZXh0RGF5IiwiZ2V0RGF5Iiwic2V0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4IiwiY29uZmlnRnJvbUlTTyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJwYXJzZWRBcnJheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJob3VyIiwiaXNQbSIsIm1lcmlkaWVtSG91ciIsIm1lcmlkaWVtRml4V3JhcCIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY29uZmlnRnJvbVN0cmluZyIsIm1pbnV0ZSIsIm1pbGxpc2Vjb25kIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImsiLCJpc09iamVjdEVtcHR5IiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJEdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJpc29XZWVrIiwiZGF5cyIsIm1pbGxpc2Vjb25kcyIsInVuaXRIYXNEZWNpbWFsIiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJzaWduIiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJpc1V0YyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJjcmVhdGVEdXJhdGlvbiIsImRpZmZSZXMiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJuZXdMb2NhbGVEYXRhIiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJNU19QRVJfU0VDT05EIiwiTVNfUEVSX01JTlVURSIsIk1TX1BFUl9IT1VSIiwiTVNfUEVSXzQwMF9ZRUFSUyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImlzb1dlZWtZZWFyIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsInBhcnNlTXMiLCJnZXRTZXRNaWxsaXNlY29uZCIsInByZVBhcnNlUG9zdEZvcm1hdCIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvT2JqZWN0IiwidG9EYXRlIiwidG9JU09TdHJpbmciLCJrZWVwT2Zmc2V0Iiwiem9uZSIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiZmllbGQiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJfY2FsZW5kYXIiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwiX21vbnRoc1BhcnNlRXhhY3QiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiX3dlZWtkYXlzIiwiX3dlZWtkYXlzTWluIiwiX3dlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiY2hhckF0IiwiaXNMb3dlciIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiZGF5c1RvTW9udGhzIiwibW9udGhzVG9EYXlzIiwibWFrZUFzIiwiYWxpYXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwicmVsYXRpdmVUaW1lJDEiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJpdGVtIiwiZG9tU3R5bGUiLCJyZWZzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJwYXJ0IiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJ1cGRhdGUiLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJzdHJpbmdpZnkiLCJibG9iIiwib2xkU3JjIiwibG9jYWxzIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIk51bWVyYWxGb3JtYXR0ZXIiLCJudW1lcmFsRGVjaW1hbE1hcmsiLCJudW1lcmFsSW50ZWdlclNjYWxlIiwibnVtZXJhbERlY2ltYWxTY2FsZSIsIm51bWVyYWxUaG91c2FuZHNHcm91cFN0eWxlIiwibnVtZXJhbFBvc2l0aXZlT25seSIsInN0cmlwTGVhZGluZ1plcm9lcyIsInNpZ25CZWZvcmVQcmVmaXgiLCJkZWxpbWl0ZXIiLCJncm91cFN0eWxlIiwidGhvdXNhbmQiLCJkZWxpbWl0ZXJSRSIsImxha2giLCJ3YW4iLCJub25lIiwiZ2V0UmF3VmFsdWUiLCJwYXJ0U2lnbiIsInBhcnRTaWduQW5kUHJlZml4IiwicGFydEludGVnZXIiLCJwYXJ0RGVjaW1hbCIsIk51bWVyYWxGb3JtYXR0ZXJfMSIsIkRhdGVGb3JtYXR0ZXIiLCJkYXRlUGF0dGVybiIsImRhdGVNaW4iLCJkYXRlTWF4IiwiYmxvY2tzIiwiaW5pdEJsb2NrcyIsImdldElTT0Zvcm1hdERhdGUiLCJhZGRMZWFkaW5nWmVybyIsImdldEJsb2NrcyIsImdldFZhbGlkYXRlZERhdGUiLCJzdWIiLCJzdWIwIiwicmVzdCIsImdldEZpeGVkRGF0ZVN0cmluZyIsImRheUluZGV4IiwibW9udGhJbmRleCIsInllYXJJbmRleCIsImRheVN0YXJ0SW5kZXgiLCJtb250aFN0YXJ0SW5kZXgiLCJ5ZWFyU3RhcnRJbmRleCIsImZ1bGxZZWFyRG9uZSIsImdldEZpeGVkRGF0ZSIsImdldFJhbmdlRml4ZWREYXRlIiwicmVkdWNlIiwicHJldmlvdXMiLCJhZGRMZWFkaW5nWmVyb0ZvclllYXIiLCJmdWxsWWVhck1vZGUiLCJEYXRlRm9ybWF0dGVyXzEiLCJUaW1lRm9ybWF0dGVyIiwidGltZVBhdHRlcm4iLCJnZXRJU09Gb3JtYXRUaW1lIiwiZ2V0VGltZUZvcm1hdE9wdGlvbnMiLCJtYXhIb3VyRmlyc3REaWdpdCIsIm1heEhvdXJzIiwibWF4TWludXRlc0ZpcnN0RGlnaXQiLCJtYXhNaW51dGVzIiwiZ2V0VmFsaWRhdGVkVGltZSIsInRpbWVGb3JtYXRPcHRpb25zIiwiZ2V0Rml4ZWRUaW1lU3RyaW5nIiwic2Vjb25kSW5kZXgiLCJtaW51dGVJbmRleCIsImhvdXJJbmRleCIsInNlY29uZFN0YXJ0SW5kZXgiLCJtaW51dGVTdGFydEluZGV4IiwiaG91clN0YXJ0SW5kZXgiLCJnZXRGaXhlZFRpbWUiLCJUaW1lRm9ybWF0dGVyXzEiLCJQaG9uZUZvcm1hdHRlciIsImZvcm1hdHRlciIsInNldEZvcm1hdHRlciIsInBob25lTnVtYmVyIiwiY2xlYXIiLCJ2YWxpZGF0ZWQiLCJpTWF4IiwiaW5wdXREaWdpdCIsIlBob25lRm9ybWF0dGVyXzEiLCJDcmVkaXRDYXJkRGV0ZWN0b3IiLCJ1YXRwIiwiYW1leCIsImRpbmVycyIsImRpc2NvdmVyIiwibWFzdGVyY2FyZCIsImRhbmtvcnQiLCJpbnN0YXBheW1lbnQiLCJqY2IxNSIsImpjYiIsIm1hZXN0cm8iLCJ2aXNhIiwibWlyIiwidW5pb25QYXkiLCJnZW5lcmFsIiwicmUiLCJnZXRTdHJpY3RCbG9ja3MiLCJibG9jayIsImdldEluZm8iLCJzdHJpY3RNb2RlIiwibWF0Y2hlZEJsb2NrcyIsIkNyZWRpdENhcmREZXRlY3Rvcl8xIiwiVXRpbF8xIiwic3RyaXAiLCJnZXRQb3N0RGVsaW1pdGVyIiwiZGVsaW1pdGVycyIsIm1hdGNoZWREZWxpbWl0ZXIiLCJnZXREZWxpbWl0ZXJSRUJ5RGVsaW1pdGVyIiwiZ2V0TmV4dEN1cnNvclBvc2l0aW9uIiwicHJldlBvcyIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJnZXRQb3NpdGlvbk9mZnNldCIsIm9sZFJhd1ZhbHVlIiwibmV3UmF3VmFsdWUiLCJsZW5ndGhPZmZzZXQiLCJzdHJpcERlbGltaXRlcnMiLCJoZWFkU3RyIiwic3RyIiwiZ2V0TWF4TGVuZ3RoIiwiZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZSIsInByZWZpeExlbmd0aCIsInByZXZSZXN1bHQiLCJub0ltbWVkaWF0ZVByZWZpeCIsInByZXZWYWx1ZSIsImdldEZpcnN0RGlmZkluZGV4IiwiZ2V0Rm9ybWF0dGVkVmFsdWUiLCJibG9ja3NMZW5ndGgiLCJkZWxpbWl0ZXJMYXp5U2hvdyIsImN1cnJlbnREZWxpbWl0ZXIiLCJtdWx0aXBsZURlbGltaXRlcnMiLCJmaXhQcmVmaXhDdXJzb3IiLCJhcHBlbmRpeCIsInNldFNlbGVjdGlvblJhbmdlIiwiY2hlY2tGdWxsU2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwic2V0U2VsZWN0aW9uIiwiZWxlbWVudCIsImdldEFjdGl2ZUVsZW1lbnQiLCJjcmVhdGVUZXh0UmFuZ2UiLCJyYW5nZSIsIm1vdmUiLCJzaGFkb3dSb290IiwiaXNBbmRyb2lkIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNBbmRyb2lkQmFja3NwYWNlS2V5ZG93biIsImxhc3RJbnB1dFZhbHVlIiwiY3VycmVudElucHV0VmFsdWUiLCJEZWZhdWx0UHJvcGVydGllc18xIiwiYXNzaWduIiwiY3JlZGl0Q2FyZCIsImNyZWRpdENhcmRTdHJpY3RNb2RlIiwiY3JlZGl0Q2FyZFR5cGUiLCJvbkNyZWRpdENhcmRUeXBlQ2hhbmdlZCIsInBob25lIiwicGhvbmVSZWdpb25Db2RlIiwicGhvbmVGb3JtYXR0ZXIiLCJ0aW1lRm9ybWF0dGVyIiwiZGF0ZUZvcm1hdHRlciIsIm51bWVyYWwiLCJudW1lcmljT25seSIsInVwcGVyY2FzZSIsInJhd1ZhbHVlVHJpbVByZWZpeCIsImNvcHlEZWxpbWl0ZXIiLCJpbml0VmFsdWUiLCJkZWxpbWl0ZXJMZW5ndGgiLCJjb21tb25qc0dsb2JhbCIsIm1heExlbmd0aCIsImJhY2tzcGFjZSIsIm9uVmFsdWVDaGFuZ2VkIiwiQ2xlYXZlIiwiaGFzTXVsdGlwbGVFbGVtZW50cyIsIkRlZmF1bHRQcm9wZXJ0aWVzIiwicHBzIiwiVXRpbCIsIm9uQ2hhbmdlTGlzdGVuZXIiLCJvbkNoYW5nZSIsIm9uS2V5RG93bkxpc3RlbmVyIiwib25LZXlEb3duIiwib25Gb2N1c0xpc3RlbmVyIiwib25Gb2N1cyIsIm9uQ3V0TGlzdGVuZXIiLCJvbkN1dCIsIm9uQ29weUxpc3RlbmVyIiwib25Db3B5IiwiaW5pdFBob25lRm9ybWF0dGVyIiwiaW5pdERhdGVGb3JtYXR0ZXIiLCJpbml0VGltZUZvcm1hdHRlciIsImluaXROdW1lcmFsRm9ybWF0dGVyIiwib25JbnB1dCIsIm51bWVyYWxGb3JtYXR0ZXIiLCJBc1lvdVR5cGVGb3JtYXR0ZXIiLCJoYXNCYWNrc3BhY2VTdXBwb3J0IiwicG9zdERlbGltaXRlciIsInBvc3REZWxpbWl0ZXJCYWNrc3BhY2UiLCJjb3B5Q2xpcGJvYXJkRGF0YSIsImlucHV0VmFsdWUiLCJ0ZXh0VG9Db3B5IiwiY2xpcGJvYXJkRGF0YSIsInNldERhdGEiLCJwb3N0RGVsaW1pdGVyQWZ0ZXIiLCJ1cGRhdGVWYWx1ZVN0YXRlIiwidXBkYXRlQ3JlZGl0Q2FyZFByb3BzQnlWYWx1ZSIsImNyZWRpdENhcmRJbmZvIiwiZW5kUG9zIiwic2VsZWN0aW9uRW5kIiwiY2FsbE9uVmFsdWVDaGFuZ2VkIiwicmF3VmFsdWUiLCJzZXRQaG9uZVJlZ2lvbkNvZGUiLCJzZXRSYXdWYWx1ZSIsImRlc3Ryb3kiLCJDbGVhdmVfMSIsImZhdmljb25zQ29udGV4dCIsInJlcXVpcmUiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIm1vbWVudCIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJmb3JtcyIsInN0YW5kYWxvbmUiLCJsb25nTW9udGhzUGFyc2UiLCJzaG9ydE1vbnRoc1BhcnNlIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4Iiwid2VicGFja1BvbHlmaWxsIiwicGF0aHMiLCJkYXRlUmFuZ2VQaWNrZXJMYW5ndWFnZXMiLCJkYXRlUmFuZ2VQaWNrZXIiLCJhdXRvQ2xvc2UiLCJsYW5ndWFnZSIsInN0YXJ0T2ZXZWVrIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJlbmFibGVkIiwibWluRGF5cyIsIm1heERheXMiLCJzaG93U2hvcnRjdXRzIiwic2hvcnRjdXRzIiwiY3VzdG9tU2hvcnRjdXRzIiwiaW5saW5lIiwiYWx3YXlzT3BlbiIsInNpbmdsZURhdGUiLCJsb29rQmVoaW5kIiwiYmF0Y2hNb2RlIiwic3RpY2t5TW9udGhzIiwiZGF5RGl2QXR0cnMiLCJkYXlUZEF0dHJzIiwic2VsZWN0Rm9yd2FyZCIsInNlbGVjdEJhY2t3YXJkIiwiYXBwbHlCdG5DbGFzcyIsInNpbmdsZU1vbnRoIiwiaG92ZXJpbmdUb29sdGlwIiwiaG92ZXJpbmdUaW1lIiwidHJhbnNsYXRlIiwic2hvd1RvcGJhciIsInN3YXBUaW1lIiwic2hvd1dlZWtOdW1iZXJzIiwiZ2V0V2Vla051bWJlciIsImN1c3RvbU9wZW5BbmltYXRpb24iLCJjdXN0b21DbG9zZUFuaW1hdGlvbiIsImN1c3RvbUFycm93UHJldlN5bWJvbCIsImN1c3RvbUFycm93TmV4dFN5bWJvbCIsIm1vbnRoU2VsZWN0IiwieWVhclNlbGVjdCIsInN0YXJ0V2VlayIsImlzVG91Y2hEZXZpY2UiLCJtc01heFRvdWNoUG9pbnRzIiwiZG9tQ2hhbmdlVGltZXIiLCJsYW5ndWFnZXMiLCJicm93c2VyTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZXMiLCJpbml0aWF0ZWQiLCJzZWxmRG9tIiwiY2hlY2tBbmRTZXREZWZhdWx0VmFsdWUiLCJjbG9zZURhdGVQaWNrZXIiLCJrbGFzcyIsImV4dHJhQ2xhc3MiLCJjdXN0b21Ub3BCYXIiLCJfY29sc3BhbiIsImFycm93UHJldiIsImFycm93TmV4dCIsImdldFdlZWtIZWFkIiwiZ2V0R2FwSFRNTCIsInNoIiwic2hvd0N1c3RvbVZhbHVlcyIsImN1c3RvbVZhbHVlTGFiZWwiLCJjdXN0b21WYWx1ZXMiLCJjcmVhdGVEb20iLCJjYWxjUG9zaXRpb24iLCJkZWZhdWx0VGltZSIsImdldERlZmF1bHRUaW1lIiwicmVzZXRNb250aHNWaWV3Iiwic2hvd1RpbWUiLCJkZWZhdWx0RW5kVGltZSIsImRlZmF1bHRUb3BUZXh0IiwidXBkYXRlQ2FsZW5kYXJXaWR0aCIsIm91dHNpZGVDbGlja0Nsb3NlIiwibmV4dE1vbnRoMSIsIm5leHRNb250aDIiLCJuZXh0TW9udGgiLCJtb250aDEiLCJpc01vbnRoT3V0T2ZCb3VuZHMiLCJtb250aDIiLCJjb21wYXJlX21vbnRoIiwic2hvd01vbnRoIiwic2hvd1NlbGVjdGVkRGF5cyIsImlzTW9udGgyIiwic2hvd0dhcCIsImdvdG9OZXh0TW9udGgiLCJwcmV2TW9udGgxIiwicHJldk1vbnRoMiIsInByZXZNb250aCIsImdvdG9QcmV2TW9udGgiLCJkYXRlUmFuZ2UiLCJnZXREYXRlU3RyaW5nIiwidmFsdWVOYW1lIiwiY2hlY2tTZWxlY3Rpb25WYWxpZCIsInNob3dTZWxlY3RlZEluZm8iLCJzaG9ydGN1dCIsInN0b3BEYXkiLCJzZXREYXRlIiwibW92ZXRvZGF0ZSIsInNldERhdGVSYW5nZSIsInNldFN0YXJ0IiwiZDEiLCJzZXRTaW5nbGVEYXRlIiwic2V0RW5kIiwiZDIiLCJzaWxlbnQiLCJjbG9zZSIsInJlZHJhdyIsInJlZHJhd0RhdGVQaWNrZXIiLCJnZXREYXRlUGlja2VyIiwiY29udGFpbmVyT2Zmc2V0IiwibGVmdEluZGVudCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImFuaW1hdGlvblRpbWUiLCJfX2RlZmF1bHRfc3RyaW5nIiwiX19fZm9ybWF0IiwiZ2V0VmFsaWRWYWx1ZSIsImdhcE1hcmdpbiIsIncxIiwidzIiLCJ3MyIsInJlbmRlclRpbWUiLCJjaGFuZ2VUaW1lIiwic2V0UmFuZ2UiLCJlbmRUaW1lIiwidGltZVBvaW50IiwiaGFuZGxlU3RhcnQiLCJoYW5kbGVFbmQiLCJkYXlDbGlja2VkIiwiY2xlYXJIb3ZlcmluZyIsImRheUhvdmVyaW5nIiwidXBkYXRlU2VsZWN0YWJsZVJhbmdlIiwiYXV0b2Nsb3NlIiwiaXNWYWxpZFRpbWUiLCJjb21wYXJlX2RheSIsImNvdW50RGF5cyIsImJlZm9yZVNob3dEYXkiLCJ2YWxpZCIsInRpbWVUbXAiLCJob3ZlclRpbWUiLCJ0b29sdGlwIiwicG9zRGF5IiwicG9zQm94IiwiX2xlZnQiLCJfdG9wIiwiJHRpcCIsImRhdGVDaGFuZ2VkIiwib3Bwb3NpdGVUeXBlIiwibmV3RGF0ZSIsImZvcmNlVmFsaWQiLCJkYXRlMSIsImRhdGUyIiwibW9udGhFbGVtZW50IiwiY3VycmVudE1vbnRoIiwibm9uU2VsZWN0YWJsZU1vbnRoIiwibmFtZU1vbnRoIiwibWluU2VsZWN0YWJsZU1vbnRoIiwibWF4U2VsZWN0YWJsZU1vbnRoIiwibWluVmlzaWJsZU1vbnRoIiwibWF4VmlzaWJsZU1vbnRoIiwiZ2VuZXJhdGVTZWxlY3QiLCJnZW5lcmF0ZVNlbGVjdERhdGEiLCJtaW5TZWxlY3RhYmxlIiwibWF4U2VsZWN0YWJsZSIsIm1pblZpc2libGUiLCJtYXhWaXNpYmxlIiwiZ2VuZXJhdGVNb250aEVsZW1lbnQiLCJ5ZWFyRWxlbWVudCIsImN1cnJlbnRZZWFyIiwiaXNZZWFyRnVuY3Rpb24iLCJtaW5TZWxlY3RhYmxlWWVhciIsIm1heFNlbGVjdGFibGVZZWFyIiwibWluVmlzaWJsZVllYXIiLCJtYXhWaXNpYmxlWWVhciIsImdlbmVyYXRlWWVhckVsZW1lbnQiLCJ0b2RheSIsImRheU9mV2VlayIsInRvTW9udGgiLCJfZGF5IiwiaGlnaGxpZ2h0VG9kYXkiLCJfciIsInRvZGF5RGl2QXR0ciIsImF0dHJpYnV0ZXNDYWxsYmFja3MiLCJzaG93RGF5SFRNTCIsImNyZWF0ZU1vbnRoSFRNTCIsIndlZWtOdW1iZXJEb20iLCJ0aGlzVGltZSIsImNoYW5nZSIsInZhbHVlQmVhdXRpZmllciIsIm0xIiwibTIiLCJoMSIsImgyIiwiYWZ0ZXJBbmltIiwiaW5pdGlhbE9iamVjdCIsImNhbGxiYWNrc0FycmF5IiwicmVzdWx0T2JqZWN0IiwiY2JBdHRySW5kZXgiLCJjYkF0dHIiLCJhZGRBdHRyaWJ1dGVzIiwiYXR0clN0cmluZyIsInNob3dEYXRlRmlsdGVyIiwidHJhbnNsYXRpb25LZXkiLCJ0cmFuc2xhdGlvbktleUxvd2VyQ2FzZSIsImRlZmF1bHRMYW5ndWFnZSIsImciLCIkaXRlbSIsIiR2YWx1ZU5vZGUiLCJ2YWx1ZU5vZGUiLCJkZWMiLCJNdXRhdGlvbk9ic2VydmVyIiwiaGFzQXR0cmlidXRlIiwiY2xhc3NMaXN0Iiwib2JzZXJ2ZSIsIiRkcm9wZG93biIsImRyb3Bkb3duIiwiaXRlbXMiLCJ0ZXh0RmllbGQiLCJpbml0aWFsVGV4dCIsImRyb3Bkb3duT2JzZXJ2ZXIiLCJpdGVtVGV4dCIsIiR0aGlzIiwiJGZpcnN0IiwiJGxhc3QiLCIkY2FsZW5kYXIiLCJmaXJzdERhdGUiLCJsYXN0RGF0ZSIsImJ1dHRvbkNsZWFyIiwiYnV0dG9uQXBwbHkiLCJzMSIsInMyIiwiaW5wdXRPbkJsdXIiLCJpbnB1dE9uS2V5cHJlc3MiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZ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QUFnQnBxRCxHQUNBLElBQWpCQSxFQUFNd0UsU0FDTjJsRCxJQW5CUlQsRUFBTzlwRCxHQUFHLE9BQVF1cUQsR0FDbEJSLEVBQU0vcEQsR0FBRyxPQUFRdXFELEdBRWpCVCxFQUFPOXBELEdBQUcsV0FBWXdxRCxHQUN0QlQsRUFBTS9wRCxHQUFHLFdBQVl3cUQsVyxnRkNoRjdCLDJGQVdBbFAsSUFBTzc0QixPQUFPLE1BY2RiLEVBQUVob0MsVUFBVXdZLE9BQU0sV0FJZHd2QixFQUFFLHVCQUF1QnE2QixnQkFBZ0IsQ0FDckNFLFNBQVUsS0FDVnVCLGFBQWEsRUFDYmQsZUFBZSxFQUNma0IsWUFBWSxFQUNaMUIsWUFBYSxTQUNidUIsaUJBQWlCLEVBRWpCUyxzQkFBdUIsb0ZBQ3ZCQyxzQkFBdUIsdUZBRXZCdEIsUUFBUSxFQUNSbnpDLFVBQVcsaUJBQ1hvekMsWUFBWSxJQUloQnA3QixFQUFFLGtCQUFrQjk0QixLQUFLLHdCQUF3QmlmLE9BQzdDLHVQQUdKNlosRUFBRSx1QkFBdUI3bkIsS0FBSyxtQkFBbUJtb0QsYUFBYSxhQUFhLGNBRTNFdGdDLEVBQUUsaUVBQWlFdmUsT0FBTSxTQUFTb2IsR0FDOUVBLEVBQUk5ZCxrQkFDSmloQixFQUFFLHVCQUF1QjduQixLQUFLLG1CQUFtQnc0QyxlLGlDQ3JEekQsSUFBSS8rQyxFQUFVLEVBQVEsSUFFQSxpQkFBWkEsSUFBc0JBLEVBQVUsQ0FBQyxDQUFDL2IsRUFBT0MsRUFBSThiLEVBQVMsTUFPaEUsSUFBSWpWLEVBQVUsQ0FBQyxLQUFNLEVBRXJCLGVBUElpdEQsRUFRSixnQkFBcUJ4c0QsR0FFUixFQUFRLEVBQVIsQ0FBZ0V3VSxFQUFTalYsR0FFbkZpVixFQUFRODVDLFNBQVE3MUQsRUFBT0QsUUFBVWdjLEVBQVE4NUMsUyIsImZpbGUiOiJjYXJkcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2NSk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyEgbW9tZW50LmpzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICByZmMyODIyICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPSBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2Fybihtc2cgKyAnXFxuQXJndW1lbnRzOiAnICsgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCAoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgICAgIExUICAgOiAnaDptbSBBJyxcbiAgICAgICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbiAgICB2YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbSAgOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCAgOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCAgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSAgOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgIDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICAgICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW107XG4gICAgICAgIGZvciAodmFyIHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fFlZWVlZWXxZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nO1xuXG4gICAgdmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbiAgICB2YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbiAgICB2YXIgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJywgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxuICAgIHZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG4gICAgdmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxuICAgIHZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG4gICAgdmFyIG1hdGNoNXRvNiAgICAgID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vOyAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxuICAgIHZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoMXRvNiAgICAgID0gL1srLV0/XFxkezEsNn0vOyAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuXG4gICAgdmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxuICAgIHZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxuICAgIHZhciBtYXRjaE9mZnNldCAgICA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naTsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgdmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxuICAgIHZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgdmFyIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pO1xuXG4gICAgdmFyIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUocy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBZRUFSID0gMDtcbiAgICB2YXIgTU9OVEggPSAxO1xuICAgIHZhciBEQVRFID0gMjtcbiAgICB2YXIgSE9VUiA9IDM7XG4gICAgdmFyIE1JTlVURSA9IDQ7XG4gICAgdmFyIFNFQ09ORCA9IDU7XG4gICAgdmFyIE1JTExJU0VDT05EID0gNjtcbiAgICB2YXIgV0VFSyA9IDc7XG4gICAgdmFyIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICdGdWxsWWVhcicgJiYgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJiBtb20ubW9udGgoKSA9PT0gMSAmJiBtb20uZGF0ZSgpID09PSAyOSkge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSwgbW9tLm1vbnRoKCksIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMSA/IChpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyOCkgOiAoMzEgLSBtb2RNb250aCAlIDcgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydCA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0W01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMgKHdzLCBuKSB7XG4gICAgICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWyhtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpKSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB3ZWVrZGF5c1ttLmRheSgpXSA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb20sIG1pbnAsIHNob3J0cCwgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICBsb25ncCA9IHRoaXMud2Vla2RheXMobW9tLCAnJyk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAvLyB0aGlzIHJ1bGUuXG4gICAgdmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fTtcbiAgICB2YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICB2YXIgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jYWxlICcgKyBrZXkgKyAgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZSgnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCB0bXBMb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgICAgIC0xO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIGV4cGVjdGVkV2Vla2RheSwgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8IGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVEMgPyBjb25maWcuX2QuZ2V0VVRDRGF5KCkgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5KSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgdmFyIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG4gICAgdmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG4gICAgdmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbiAgICB2YXIgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgdmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyh5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUocGFyc2VkSW5wdXRbMF0sIHBhcnNlZElucHV0WzFdLCBwYXJzZWRJbnB1dFsyXSkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG9ic09mZnNldHMgPSB7XG4gICAgICAgIFVUOiAwLFxuICAgICAgICBHTVQ6IDAsXG4gICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgUFNUOiAtOCAqIDYwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApO1xuICAgICAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKG1hdGNoWzRdLCBtYXRjaFszXSwgbWF0Y2hbMl0sIG1hdGNoWzVdLCBtYXRjaFs2XSwgbWF0Y2hbN10pO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICtcbiAgICAgICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICAvLyAgICAgICAgICdyZWdleCcsIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmICghKGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgP1xuICAgICAgICAgIDAgOlxuICAgICAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gaW5wdXQudmFsdWVPZigpIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICB2YXIgaXNvUmVnZXggPSAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzIDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDsgdmFsID0gcGVyaW9kOyBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cykgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsXG4gICAgICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzOyBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDsgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZTtcbiAgICAgICAgdmFyIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgICAgICB2YXIgem9uZSA9ICcnO1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHZhciB5ZWFyID0gKDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwO1xuICAgIHZhciBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05EO1xuICAgIHZhciBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURTtcbiAgICB2YXIgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKGRpdmlkZW5kICUgZGl2aXNvciArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMgKyAzLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9IT1VSIC0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXggKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgICAgICAobG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlKSA6XG4gICAgICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNSkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgICAgICAgICAgICAgICA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG4gICAgcHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbiAgICBwcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkICAgICAgICAgICA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCAgICAgICAgICA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xuICAgIHByb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgICAgICAgICAgID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ICAgICAgICA9IHByb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBwcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbiAgICBwcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKCdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJywgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCAgICAgICAgICAgICA9IHNldDtcblxuICAgIHByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCAgICA9ICAgICAgICB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgICAgIHZhciB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbCAoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBnZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxIChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgICAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzO1xuICAgICAgICB2YXIgbW9udGhzO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOiAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOiAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YkMSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNRdWFydGVycyAgICAgPSBtYWtlQXMoJ1EnKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzczogNDQsICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGggOiAyMiwgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICAgICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgICAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgICAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICAgICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICAgJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcgKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSBhYnMkMSh0aGlzLl9kYXlzKTtcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgICAgIChZID8geW1TaWduICsgWSArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAoTSA/IHltU2lnbiArIE0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBobXNTaWduICsgaCArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgICAgICAgID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzICAgICAgICAgICAgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgICAgICAgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgICAgICAgICAgICAgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyAgICAgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiAgICAgICAgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lICAgICAgICAgID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCAgICAgICAgICAgID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiAgICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjI0LjAnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbiAgICBob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuICAgIGhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgICAgICAgICAgICAgICA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nICA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsInZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBOdW1lcmFsRm9ybWF0dGVyID0gZnVuY3Rpb24gKG51bWVyYWxEZWNpbWFsTWFyayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsRGVjaW1hbFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBMZWFkaW5nWmVyb2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGltaXRlcikge1xuICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICBvd25lci5udW1lcmFsRGVjaW1hbE1hcmsgPSBudW1lcmFsRGVjaW1hbE1hcmsgfHwgJy4nO1xuICAgIG93bmVyLm51bWVyYWxJbnRlZ2VyU2NhbGUgPSBudW1lcmFsSW50ZWdlclNjYWxlID4gMCA/IG51bWVyYWxJbnRlZ2VyU2NhbGUgOiAwO1xuICAgIG93bmVyLm51bWVyYWxEZWNpbWFsU2NhbGUgPSBudW1lcmFsRGVjaW1hbFNjYWxlID49IDAgPyBudW1lcmFsRGVjaW1hbFNjYWxlIDogMjtcbiAgICBvd25lci5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSA9IG51bWVyYWxUaG91c2FuZHNHcm91cFN0eWxlIHx8IE51bWVyYWxGb3JtYXR0ZXIuZ3JvdXBTdHlsZS50aG91c2FuZDtcbiAgICBvd25lci5udW1lcmFsUG9zaXRpdmVPbmx5ID0gISFudW1lcmFsUG9zaXRpdmVPbmx5O1xuICAgIG93bmVyLnN0cmlwTGVhZGluZ1plcm9lcyA9IHN0cmlwTGVhZGluZ1plcm9lcyAhPT0gZmFsc2U7XG4gICAgb3duZXIucHJlZml4ID0gKHByZWZpeCB8fCBwcmVmaXggPT09ICcnKSA/IHByZWZpeCA6ICcnO1xuICAgIG93bmVyLnNpZ25CZWZvcmVQcmVmaXggPSAhIXNpZ25CZWZvcmVQcmVmaXg7XG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcsJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG59O1xuXG5OdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUgPSB7XG4gICAgdGhvdXNhbmQ6ICd0aG91c2FuZCcsXG4gICAgbGFraDogICAgICdsYWtoJyxcbiAgICB3YW46ICAgICAgJ3dhbicsXG4gICAgbm9uZTogICAgICdub25lJyAgICBcbn07XG5cbk51bWVyYWxGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGdldFJhd1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5kZWxpbWl0ZXJSRSwgJycpLnJlcGxhY2UodGhpcy5udW1lcmFsRGVjaW1hbE1hcmssICcuJyk7XG4gICAgfSxcblxuICAgIGZvcm1hdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBhcnRzLCBwYXJ0U2lnbiwgcGFydFNpZ25BbmRQcmVmaXgsIHBhcnRJbnRlZ2VyLCBwYXJ0RGVjaW1hbCA9ICcnO1xuXG4gICAgICAgIC8vIHN0cmlwIGFscGhhYmV0IGxldHRlcnNcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bQS1aYS16XS9nLCAnJylcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZpcnN0IGRlY2ltYWwgbWFyayB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZShvd25lci5udW1lcmFsRGVjaW1hbE1hcmssICdNJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgbm9uIG51bWVyaWMgbGV0dGVycyBleGNlcHQgbWludXMgYW5kIFwiTVwiXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSBwcmVmaXggaGFzIGJlZW4gc3RyaXBwZWRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcZE0tXS9nLCAnJylcblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgbGVhZGluZyBtaW51cyB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcLS8sICdOJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgdGhlIG90aGVyIG1pbnVzIHNpZ24gKGlmIHByZXNlbnQpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwtL2csICcnKVxuXG4gICAgICAgICAgICAvLyByZXBsYWNlIHRoZSBtaW51cyBzaWduIChpZiBwcmVzZW50KVxuICAgICAgICAgICAgLnJlcGxhY2UoJ04nLCBvd25lci5udW1lcmFsUG9zaXRpdmVPbmx5ID8gJycgOiAnLScpXG5cbiAgICAgICAgICAgIC8vIHJlcGxhY2UgZGVjaW1hbCBtYXJrXG4gICAgICAgICAgICAucmVwbGFjZSgnTScsIG93bmVyLm51bWVyYWxEZWNpbWFsTWFyayk7XG5cbiAgICAgICAgLy8gc3RyaXAgYW55IGxlYWRpbmcgemVyb3NcbiAgICAgICAgaWYgKG93bmVyLnN0cmlwTGVhZGluZ1plcm9lcykge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKC0pPzArKD89XFxkKS8sICckMScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFydFNpZ24gPSB2YWx1ZS5zbGljZSgwLCAxKSA9PT0gJy0nID8gJy0nIDogJyc7XG4gICAgICAgIGlmICh0eXBlb2Ygb3duZXIucHJlZml4ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAob3duZXIuc2lnbkJlZm9yZVByZWZpeCkge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gcGFydFNpZ24gKyBvd25lci5wcmVmaXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gb3duZXIucHJlZml4ICsgcGFydFNpZ247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJ0U2lnbkFuZFByZWZpeCA9IHBhcnRTaWduO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwYXJ0SW50ZWdlciA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKG93bmVyLm51bWVyYWxEZWNpbWFsTWFyaykgPj0gMCkge1xuICAgICAgICAgICAgcGFydHMgPSB2YWx1ZS5zcGxpdChvd25lci5udW1lcmFsRGVjaW1hbE1hcmspO1xuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHBhcnREZWNpbWFsID0gb3duZXIubnVtZXJhbERlY2ltYWxNYXJrICsgcGFydHNbMV0uc2xpY2UoMCwgb3duZXIubnVtZXJhbERlY2ltYWxTY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwYXJ0U2lnbiA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJ0SW50ZWdlciA9IHBhcnRJbnRlZ2VyLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG93bmVyLm51bWVyYWxJbnRlZ2VyU2NhbGUgPiAwKSB7XG4gICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5zbGljZSgwLCBvd25lci5udW1lcmFsSW50ZWdlclNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAob3duZXIubnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUpIHtcbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUubGFraDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkKStcXGQkKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUud2FuOlxuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5yZXBsYWNlKC8oXFxkKSg/PShcXGR7NH0pKyQpL2csICckMScgKyBvd25lci5kZWxpbWl0ZXIpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE51bWVyYWxGb3JtYXR0ZXIuZ3JvdXBTdHlsZS50aG91c2FuZDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KSskKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFydFNpZ25BbmRQcmVmaXggKyBwYXJ0SW50ZWdlci50b1N0cmluZygpICsgKG93bmVyLm51bWVyYWxEZWNpbWFsU2NhbGUgPiAwID8gcGFydERlY2ltYWwudG9TdHJpbmcoKSA6ICcnKTtcbiAgICB9XG59O1xuXG52YXIgTnVtZXJhbEZvcm1hdHRlcl8xID0gTnVtZXJhbEZvcm1hdHRlcjtcblxudmFyIERhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZVBhdHRlcm4sIGRhdGVNaW4sIGRhdGVNYXgpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGF0ZSA9IFtdO1xuICAgIG93bmVyLmJsb2NrcyA9IFtdO1xuICAgIG93bmVyLmRhdGVQYXR0ZXJuID0gZGF0ZVBhdHRlcm47XG4gICAgb3duZXIuZGF0ZU1pbiA9IGRhdGVNaW5cbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWluLmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1pbi51bnNoaWZ0KDApO1xuXG4gICAgb3duZXIuZGF0ZU1heCA9IGRhdGVNYXhcbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWF4Lmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1heC51bnNoaWZ0KDApO1xuICAgIFxuICAgIG93bmVyLmluaXRCbG9ja3MoKTtcbn07XG5cbkRhdGVGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGluaXRCbG9ja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcztcbiAgICAgICAgb3duZXIuZGF0ZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1knKSB7XG4gICAgICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goNCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG93bmVyLmJsb2Nrcy5wdXNoKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgZGF0ZSA9IG93bmVyLmRhdGU7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVbMl0gPyAoXG4gICAgICAgICAgICBkYXRlWzJdICsgJy0nICsgb3duZXIuYWRkTGVhZGluZ1plcm8oZGF0ZVsxXSkgKyAnLScgKyBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzBdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFZhbGlkYXRlZERhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCByZXN1bHQgPSAnJztcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci5kYXRlUGF0dGVybltpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YiA9PT0gJzAwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAxJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMCcgKyBzdWIwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YiwgMTApID4gMzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICczMSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViID09PSAnMDAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMDEnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YjAsIDEwKSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzEyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcmVtYWluaW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rml4ZWREYXRlU3RyaW5nKHJlc3VsdCk7XG4gICAgfSxcblxuICAgIGdldEZpeGVkRGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sIGRhdGUgPSBbXSxcbiAgICAgICAgICAgIGRheUluZGV4ID0gMCwgbW9udGhJbmRleCA9IDAsIHllYXJJbmRleCA9IDAsXG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gMCwgbW9udGhTdGFydEluZGV4ID0gMCwgeWVhclN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgZGF5LCBtb250aCwgeWVhciwgZnVsbFllYXJEb25lID0gZmFsc2U7XG5cbiAgICAgICAgLy8gbW0tZGQgfHwgZGQtbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiBkYXRlUGF0dGVyblswXS50b0xvd2VyQ2FzZSgpICE9PSAneScgJiYgZGF0ZVBhdHRlcm5bMV0udG9Mb3dlckNhc2UoKSAhPT0gJ3knKSB7XG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdkJyA/IDAgOiAyO1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gMiAtIGRheVN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICBkYXRlID0gdGhpcy5nZXRGaXhlZERhdGUoZGF5LCBtb250aCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB5eXl5LW1tLWRkIHx8IHl5eXktZGQtbW0gfHwgbW0tZGQteXl5eSB8fCBkZC1tbS15eXl5IHx8IGRkLXl5eXktbW0gfHwgbW0teXl5eS1kZFxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA4KSB7XG4gICAgICAgICAgICBkYXRlUGF0dGVybi5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB5ZWFySW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHllYXJTdGFydEluZGV4ID0geWVhckluZGV4ICogMjtcbiAgICAgICAgICAgIGRheVN0YXJ0SW5kZXggPSAoZGF5SW5kZXggPD0geWVhckluZGV4KSA/IGRheUluZGV4ICogMiA6IChkYXlJbmRleCAqIDIgKyAyKTtcbiAgICAgICAgICAgIG1vbnRoU3RhcnRJbmRleCA9IChtb250aEluZGV4IDw9IHllYXJJbmRleCkgPyBtb250aEluZGV4ICogMiA6IChtb250aEluZGV4ICogMiArIDIpO1xuXG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgeWVhciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLCAxMCk7XG5cbiAgICAgICAgICAgIGZ1bGxZZWFyRG9uZSA9IHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLmxlbmd0aCA9PT0gNDtcblxuICAgICAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0Rml4ZWREYXRlKGRheSwgbW9udGgsIHllYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW0teXkgfHwgeXktbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiAoZGF0ZVBhdHRlcm5bMF0gPT09ICd5JyB8fCBkYXRlUGF0dGVyblsxXSA9PT0gJ3knKSkge1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdtJyA/IDAgOiAyO1xuICAgICAgICAgICAgeWVhclN0YXJ0SW5kZXggPSAyIC0gbW9udGhTdGFydEluZGV4O1xuICAgICAgICAgICAgbW9udGggPSBwYXJzZUludCh2YWx1ZS5zbGljZShtb250aFN0YXJ0SW5kZXgsIG1vbnRoU3RhcnRJbmRleCArIDIpLCAxMCk7XG4gICAgICAgICAgICB5ZWFyID0gcGFyc2VJbnQodmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMiksIDEwKTtcblxuICAgICAgICAgICAgZnVsbFllYXJEb25lID0gdmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMikubGVuZ3RoID09PSAyO1xuXG4gICAgICAgICAgICBkYXRlID0gWzAsIG1vbnRoLCB5ZWFyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1tLXl5eXkgfHwgeXl5eS1tbVxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA2ICYmIChkYXRlUGF0dGVyblswXSA9PT0gJ1knIHx8IGRhdGVQYXR0ZXJuWzFdID09PSAnWScpKSB7XG4gICAgICAgICAgICBtb250aFN0YXJ0SW5kZXggPSBkYXRlUGF0dGVyblswXSA9PT0gJ20nID8gMCA6IDQ7XG4gICAgICAgICAgICB5ZWFyU3RhcnRJbmRleCA9IDIgLSAwLjUgKiBtb250aFN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBtb250aCA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1vbnRoU3RhcnRJbmRleCwgbW9udGhTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIHllYXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KSwgMTApO1xuXG4gICAgICAgICAgICBmdWxsWWVhckRvbmUgPSB2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KS5sZW5ndGggPT09IDQ7XG5cbiAgICAgICAgICAgIGRhdGUgPSBbMCwgbW9udGgsIHllYXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZSA9IG93bmVyLmdldFJhbmdlRml4ZWREYXRlKGRhdGUpO1xuICAgICAgICBvd25lci5kYXRlID0gZGF0ZTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0ZS5sZW5ndGggPT09IDAgPyB2YWx1ZSA6IGRhdGVQYXR0ZXJuLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgKGRhdGVbMF0gPT09IDAgPyAnJyA6IG93bmVyLmFkZExlYWRpbmdaZXJvKGRhdGVbMF0pKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChkYXRlWzFdID09PSAwID8gJycgOiBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzFdKSk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyAoZnVsbFllYXJEb25lID8gb3duZXIuYWRkTGVhZGluZ1plcm9Gb3JZZWFyKGRhdGVbMl0sIGZhbHNlKSA6ICcnKTtcbiAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChmdWxsWWVhckRvbmUgPyBvd25lci5hZGRMZWFkaW5nWmVyb0ZvclllYXIoZGF0ZVsyXSwgdHJ1ZSkgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICcnKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBnZXRSYW5nZUZpeGVkRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sXG4gICAgICAgICAgICBkYXRlTWluID0gb3duZXIuZGF0ZU1pbiB8fCBbXSxcbiAgICAgICAgICAgIGRhdGVNYXggPSBvd25lci5kYXRlTWF4IHx8IFtdO1xuXG4gICAgICAgIGlmICghZGF0ZS5sZW5ndGggfHwgKGRhdGVNaW4ubGVuZ3RoIDwgMyAmJiBkYXRlTWF4Lmxlbmd0aCA8IDMpKSByZXR1cm4gZGF0ZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGF0ZVBhdHRlcm4uZmluZChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4geC50b0xvd2VyQ2FzZSgpID09PSAneSc7XG4gICAgICAgICAgfSkgJiZcbiAgICAgICAgICBkYXRlWzJdID09PSAwXG4gICAgICAgICkgcmV0dXJuIGRhdGU7XG5cbiAgICAgICAgaWYgKGRhdGVNYXgubGVuZ3RoICYmIChkYXRlTWF4WzJdIDwgZGF0ZVsyXSB8fCAoXG4gICAgICAgICAgZGF0ZU1heFsyXSA9PT0gZGF0ZVsyXSAmJiAoZGF0ZU1heFsxXSA8IGRhdGVbMV0gfHwgKFxuICAgICAgICAgICAgZGF0ZU1heFsxXSA9PT0gZGF0ZVsxXSAmJiBkYXRlTWF4WzBdIDwgZGF0ZVswXVxuICAgICAgICAgICkpXG4gICAgICAgICkpKSByZXR1cm4gZGF0ZU1heDtcblxuICAgICAgICBpZiAoZGF0ZU1pbi5sZW5ndGggJiYgKGRhdGVNaW5bMl0gPiBkYXRlWzJdIHx8IChcbiAgICAgICAgICBkYXRlTWluWzJdID09PSBkYXRlWzJdICYmIChkYXRlTWluWzFdID4gZGF0ZVsxXSB8fCAoXG4gICAgICAgICAgICBkYXRlTWluWzFdID09PSBkYXRlWzFdICYmIGRhdGVNaW5bMF0gPiBkYXRlWzBdXG4gICAgICAgICAgKSlcbiAgICAgICAgKSkpIHJldHVybiBkYXRlTWluO1xuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZERhdGU6IGZ1bmN0aW9uIChkYXksIG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIGRheSA9IE1hdGgubWluKGRheSwgMzEpO1xuICAgICAgICBtb250aCA9IE1hdGgubWluKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgPSBwYXJzZUludCgoeWVhciB8fCAwKSwgMTApO1xuXG4gICAgICAgIGlmICgobW9udGggPCA3ICYmIG1vbnRoICUgMiA9PT0gMCkgfHwgKG1vbnRoID4gOCAmJiBtb250aCAlIDIgPT09IDEpKSB7XG4gICAgICAgICAgICBkYXkgPSBNYXRoLm1pbihkYXksIG1vbnRoID09PSAyID8gKHRoaXMuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogMzApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtkYXksIG1vbnRoLCB5ZWFyXTtcbiAgICB9LFxuXG4gICAgaXNMZWFwWWVhcjogZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICgoeWVhciAlIDQgPT09IDApICYmICh5ZWFyICUgMTAwICE9PSAwKSkgfHwgKHllYXIgJSA0MDAgPT09IDApO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVyb0ZvclllYXI6IGZ1bmN0aW9uIChudW1iZXIsIGZ1bGxZZWFyTW9kZSkge1xuICAgICAgICBpZiAoZnVsbFllYXJNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAwMCcgOiAobnVtYmVyIDwgMTAwID8gJzAwJyA6IChudW1iZXIgPCAxMDAwID8gJzAnIDogJycpKSkgKyBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBEYXRlRm9ybWF0dGVyXzEgPSBEYXRlRm9ybWF0dGVyO1xuXG52YXIgVGltZUZvcm1hdHRlciA9IGZ1bmN0aW9uICh0aW1lUGF0dGVybiwgdGltZUZvcm1hdCkge1xuICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICBvd25lci50aW1lID0gW107XG4gICAgb3duZXIuYmxvY2tzID0gW107XG4gICAgb3duZXIudGltZVBhdHRlcm4gPSB0aW1lUGF0dGVybjtcbiAgICBvd25lci50aW1lRm9ybWF0ID0gdGltZUZvcm1hdDtcbiAgICBvd25lci5pbml0QmxvY2tzKCk7XG59O1xuXG5UaW1lRm9ybWF0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBpbml0QmxvY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIG93bmVyLnRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goMik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRJU09Gb3JtYXRUaW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICB0aW1lID0gb3duZXIudGltZTtcblxuICAgICAgICByZXR1cm4gdGltZVsyXSA/IChcbiAgICAgICAgICAgIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMF0pICsgJzonICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSkgKyAnOicgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzJdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFRpbWVGb3JtYXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIGlmIChTdHJpbmcob3duZXIudGltZUZvcm1hdCkgPT09ICcxMicpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWF4SG91ckZpcnN0RGlnaXQ6IDEsXG4gICAgICAgICAgICAgICAgbWF4SG91cnM6IDEyLFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXNGaXJzdERpZ2l0OiA1LFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXM6IDYwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1heEhvdXJGaXJzdERpZ2l0OiAyLFxuICAgICAgICAgICAgbWF4SG91cnM6IDIzLFxuICAgICAgICAgICAgbWF4TWludXRlc0ZpcnN0RGlnaXQ6IDUsXG4gICAgICAgICAgICBtYXhNaW51dGVzOiA2MFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRWYWxpZGF0ZWRUaW1lOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xuXG4gICAgICAgIHZhciB0aW1lRm9ybWF0T3B0aW9ucyA9IG93bmVyLmdldFRpbWVGb3JtYXRPcHRpb25zKCk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci50aW1lUGF0dGVybltpbmRleF0pIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoc3ViMCwgMTApID4gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91ckZpcnN0RGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91cnMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhNaW51dGVzRmlyc3REaWdpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAnICsgc3ViMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIsIDEwKSA+IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3ViO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHJlbWFpbmluZyBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEZpeGVkVGltZVN0cmluZyhyZXN1bHQpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCB0aW1lUGF0dGVybiA9IG93bmVyLnRpbWVQYXR0ZXJuLCB0aW1lID0gW10sXG4gICAgICAgICAgICBzZWNvbmRJbmRleCA9IDAsIG1pbnV0ZUluZGV4ID0gMCwgaG91ckluZGV4ID0gMCxcbiAgICAgICAgICAgIHNlY29uZFN0YXJ0SW5kZXggPSAwLCBtaW51dGVTdGFydEluZGV4ID0gMCwgaG91clN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgc2Vjb25kLCBtaW51dGUsIGhvdXI7XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgICAgdGltZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kSW5kZXggPSBpbmRleCAqIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBtaW51dGVJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIGhvdXJJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGhvdXJTdGFydEluZGV4ID0gaG91ckluZGV4O1xuICAgICAgICAgICAgbWludXRlU3RhcnRJbmRleCA9IG1pbnV0ZUluZGV4O1xuICAgICAgICAgICAgc2Vjb25kU3RhcnRJbmRleCA9IHNlY29uZEluZGV4O1xuXG4gICAgICAgICAgICBzZWNvbmQgPSBwYXJzZUludCh2YWx1ZS5zbGljZShzZWNvbmRTdGFydEluZGV4LCBzZWNvbmRTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1pbnV0ZVN0YXJ0SW5kZXgsIG1pbnV0ZVN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgaG91ciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKGhvdXJTdGFydEluZGV4LCBob3VyU3RhcnRJbmRleCArIDIpLCAxMCk7XG5cbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLmdldEZpeGVkVGltZShob3VyLCBtaW51dGUsIHNlY29uZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA0ICYmIG93bmVyLnRpbWVQYXR0ZXJuLmluZGV4T2YoJ3MnKSA8IDApIHtcbiAgICAgICAgICAgIHRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZUluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgaG91ckluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaG91clN0YXJ0SW5kZXggPSBob3VySW5kZXg7XG4gICAgICAgICAgICBtaW51dGVTdGFydEluZGV4ID0gbWludXRlSW5kZXg7XG5cbiAgICAgICAgICAgIHNlY29uZCA9IDA7XG4gICAgICAgICAgICBtaW51dGUgPSBwYXJzZUludCh2YWx1ZS5zbGljZShtaW51dGVTdGFydEluZGV4LCBtaW51dGVTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIGhvdXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZShob3VyU3RhcnRJbmRleCwgaG91clN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICB0aW1lID0gdGhpcy5nZXRGaXhlZFRpbWUoaG91ciwgbWludXRlLCBzZWNvbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duZXIudGltZSA9IHRpbWU7XG5cbiAgICAgICAgcmV0dXJuIHRpbWUubGVuZ3RoID09PSAwID8gdmFsdWUgOiB0aW1lUGF0dGVybi5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMl0pO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgJycpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWU6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIHNlY29uZCkge1xuICAgICAgICBzZWNvbmQgPSBNYXRoLm1pbihwYXJzZUludChzZWNvbmQgfHwgMCwgMTApLCA2MCk7XG4gICAgICAgIG1pbnV0ZSA9IE1hdGgubWluKG1pbnV0ZSwgNjApO1xuICAgICAgICBob3VyID0gTWF0aC5taW4oaG91ciwgNjApO1xuXG4gICAgICAgIHJldHVybiBbaG91ciwgbWludXRlLCBzZWNvbmRdO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBUaW1lRm9ybWF0dGVyXzEgPSBUaW1lRm9ybWF0dGVyO1xuXG52YXIgUGhvbmVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZm9ybWF0dGVyLCBkZWxpbWl0ZXIpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcgJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG5cbiAgICBvd25lci5mb3JtYXR0ZXIgPSBmb3JtYXR0ZXI7XG59O1xuXG5QaG9uZUZvcm1hdHRlci5wcm90b3R5cGUgPSB7XG4gICAgc2V0Rm9ybWF0dGVyOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyID0gZm9ybWF0dGVyO1xuICAgIH0sXG5cbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIChwaG9uZU51bWJlcikge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmZvcm1hdHRlci5jbGVhcigpO1xuXG4gICAgICAgIC8vIG9ubHkga2VlcCBudW1iZXIgYW5kICtcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKC9bXlxcZCtdL2csICcnKTtcblxuICAgICAgICAvLyBzdHJpcCBub24tbGVhZGluZyArXG4gICAgICAgIHBob25lTnVtYmVyID0gcGhvbmVOdW1iZXIucmVwbGFjZSgvXlxcKy8sICdCJykucmVwbGFjZSgvXFwrL2csICcnKS5yZXBsYWNlKCdCJywgJysnKTtcblxuICAgICAgICAvLyBzdHJpcCBkZWxpbWl0ZXJcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKG93bmVyLmRlbGltaXRlclJFLCAnJyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLCBjdXJyZW50LCB2YWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaU1heCA9IHBob25lTnVtYmVyLmxlbmd0aDsgaSA8IGlNYXg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudCA9IG93bmVyLmZvcm1hdHRlci5pbnB1dERpZ2l0KHBob25lTnVtYmVyLmNoYXJBdChpKSk7XG5cbiAgICAgICAgICAgIC8vIGhhcyAoKS0gb3Igc3BhY2UgaW5zaWRlXG4gICAgICAgICAgICBpZiAoL1tcXHMoKS1dL2cudGVzdChjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlOiBvdmVyIGxlbmd0aCBpbnB1dFxuICAgICAgICAgICAgICAgIC8vIGl0IHR1cm5zIHRvIGludmFsaWQgbnVtYmVyIGFnYWluXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpcCAoKVxuICAgICAgICAvLyBlLmcuIFVTOiA3MTYxMjM0NTY3IHJldHVybnMgKDcxNikgMTIzLTQ1NjdcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL1soKV0vZywgJycpO1xuICAgICAgICAvLyByZXBsYWNlIGxpYnJhcnkgZGVsaW1pdGVyIHdpdGggdXNlciBjdXN0b21pemVkIGRlbGltaXRlclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvW1xccy1dL2csIG93bmVyLmRlbGltaXRlcik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG52YXIgUGhvbmVGb3JtYXR0ZXJfMSA9IFBob25lRm9ybWF0dGVyO1xuXG52YXIgQ3JlZGl0Q2FyZERldGVjdG9yID0ge1xuICAgIGJsb2Nrczoge1xuICAgICAgICB1YXRwOiAgICAgICAgICBbNCwgNSwgNl0sXG4gICAgICAgIGFtZXg6ICAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgZGluZXJzOiAgICAgICAgWzQsIDYsIDRdLFxuICAgICAgICBkaXNjb3ZlcjogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIG1hc3RlcmNhcmQ6ICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgZGFua29ydDogICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBpbnN0YXBheW1lbnQ6ICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGpjYjE1OiAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgamNiOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBtYWVzdHJvOiAgICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIHZpc2E6ICAgICAgICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgbWlyOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICB1bmlvblBheTogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGdlbmVyYWw6ICAgICAgIFs0LCA0LCA0LCA0XVxuICAgIH0sXG5cbiAgICByZToge1xuICAgICAgICAvLyBzdGFydHMgd2l0aCAxOyAxNSBkaWdpdHMsIG5vdCBzdGFydHMgd2l0aCAxODAwIChqY2IgY2FyZClcbiAgICAgICAgdWF0cDogL14oPyExODAwKTFcXGR7MCwxNH0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDM0LzM3OyAxNSBkaWdpdHNcbiAgICAgICAgYW1leDogL14zWzQ3XVxcZHswLDEzfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjAxMS82NS82NDQtNjQ5OyAxNiBkaWdpdHNcbiAgICAgICAgZGlzY292ZXI6IC9eKD86NjAxMXw2NVxcZHswLDJ9fDY0WzQtOV1cXGQ/KVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggMzAwLTMwNS8zMDkgb3IgMzYvMzgvMzk7IDE0IGRpZ2l0c1xuICAgICAgICBkaW5lcnM6IC9eMyg/OjAoWzAtNV18OSl8WzY4OV1cXGQ/KVxcZHswLDExfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNTEtNTUvMjIyMeKAkzI3MjA7IDE2IGRpZ2l0c1xuICAgICAgICBtYXN0ZXJjYXJkOiAvXig1WzEtNV1cXGR7MCwyfXwyMlsyLTldXFxkezAsMX18MlszLTddXFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCA1MDE5LzQxNzUvNDU3MTsgMTYgZGlnaXRzXG4gICAgICAgIGRhbmtvcnQ6IC9eKDUwMTl8NDE3NXw0NTcxKVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjM3LTYzOTsgMTYgZGlnaXRzXG4gICAgICAgIGluc3RhcGF5bWVudDogL142M1s3LTldXFxkezAsMTN9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDA7IDE1IGRpZ2l0c1xuICAgICAgICBqY2IxNTogL14oPzoyMTMxfDE4MDApXFxkezAsMTF9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDAvMzU7IDE2IGRpZ2l0c1xuICAgICAgICBqY2I6IC9eKD86MzVcXGR7MCwyfSlcXGR7MCwxMn0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDUwLzU2LTU4LzYzMDQvNjc7IDE2IGRpZ2l0c1xuICAgICAgICBtYWVzdHJvOiAvXig/OjVbMDY3OF1cXGR7MCwyfXw2MzA0fDY3XFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMjsgMTYgZGlnaXRzXG4gICAgICAgIG1pcjogL14yMjBbMC00XVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNDsgMTYgZGlnaXRzXG4gICAgICAgIHZpc2E6IC9eNFxcZHswLDE1fS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjI7IDE2IGRpZ2l0c1xuICAgICAgICB1bmlvblBheTogL142MlxcZHswLDE0fS9cbiAgICB9LFxuXG4gICAgZ2V0U3RyaWN0QmxvY2tzOiBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHZhciB0b3RhbCA9IGJsb2NrLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICByZXR1cm4gcHJldiArIGN1cnJlbnQ7XG4gICAgICB9LCAwKTtcblxuICAgICAgcmV0dXJuIGJsb2NrLmNvbmNhdCgxOSAtIHRvdGFsKTtcbiAgICB9LFxuXG4gICAgZ2V0SW5mbzogZnVuY3Rpb24gKHZhbHVlLCBzdHJpY3RNb2RlKSB7XG4gICAgICAgIHZhciBibG9ja3MgPSBDcmVkaXRDYXJkRGV0ZWN0b3IuYmxvY2tzLFxuICAgICAgICAgICAgcmUgPSBDcmVkaXRDYXJkRGV0ZWN0b3IucmU7XG5cbiAgICAgICAgLy8gU29tZSBjcmVkaXQgY2FyZCBjYW4gaGF2ZSB1cCB0byAxOSBkaWdpdHMgbnVtYmVyLlxuICAgICAgICAvLyBTZXQgc3RyaWN0TW9kZSB0byB0cnVlIHdpbGwgcmVtb3ZlIHRoZSAxNiBtYXgtbGVuZ3RoIHJlc3RyYWluLFxuICAgICAgICAvLyBob3dldmVyLCBJIG5ldmVyIGZvdW5kIGFueSB3ZWJzaXRlIHZhbGlkYXRlIGNhcmQgbnVtYmVyIGxpa2VcbiAgICAgICAgLy8gdGhpcywgaGVuY2UgcHJvYmFibHkgeW91IGRvbid0IHdhbnQgdG8gZW5hYmxlIHRoaXMgb3B0aW9uLlxuICAgICAgICBzdHJpY3RNb2RlID0gISFzdHJpY3RNb2RlO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiByZSkge1xuICAgICAgICAgICAgaWYgKHJlW2tleV0udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlZEJsb2NrcyA9IGJsb2Nrc1trZXldO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzOiBzdHJpY3RNb2RlID8gdGhpcy5nZXRTdHJpY3RCbG9ja3MobWF0Y2hlZEJsb2NrcykgOiBtYXRjaGVkQmxvY2tzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAndW5rbm93bicsXG4gICAgICAgICAgICBibG9ja3M6IHN0cmljdE1vZGUgPyB0aGlzLmdldFN0cmljdEJsb2NrcyhibG9ja3MuZ2VuZXJhbCkgOiBibG9ja3MuZ2VuZXJhbFxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbnZhciBDcmVkaXRDYXJkRGV0ZWN0b3JfMSA9IENyZWRpdENhcmREZXRlY3RvcjtcblxudmFyIFV0aWwgPSB7XG4gICAgbm9vcDogZnVuY3Rpb24gKCkge1xuICAgIH0sXG5cbiAgICBzdHJpcDogZnVuY3Rpb24gKHZhbHVlLCByZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgJycpO1xuICAgIH0sXG5cbiAgICBnZXRQb3N0RGVsaW1pdGVyOiBmdW5jdGlvbiAodmFsdWUsIGRlbGltaXRlciwgZGVsaW1pdGVycykge1xuICAgICAgICAvLyBzaW5nbGUgZGVsaW1pdGVyXG4gICAgICAgIGlmIChkZWxpbWl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyID8gZGVsaW1pdGVyIDogJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtdWx0aXBsZSBkZWxpbWl0ZXJzXG4gICAgICAgIHZhciBtYXRjaGVkRGVsaW1pdGVyID0gJyc7XG4gICAgICAgIGRlbGltaXRlcnMuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnNsaWNlKC1jdXJyZW50Lmxlbmd0aCkgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkRGVsaW1pdGVyID0gY3VycmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZWREZWxpbWl0ZXI7XG4gICAgfSxcblxuICAgIGdldERlbGltaXRlclJFQnlEZWxpbWl0ZXI6IGZ1bmN0aW9uIChkZWxpbWl0ZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoZGVsaW1pdGVyLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCAnXFxcXCQxJyksICdnJyk7XG4gICAgfSxcblxuICAgIGdldE5leHRDdXJzb3JQb3NpdGlvbjogZnVuY3Rpb24gKHByZXZQb3MsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAvLyBJZiBjdXJzb3Igd2FzIGF0IHRoZSBlbmQgb2YgdmFsdWUsIGp1c3QgcGxhY2UgaXQgYmFjay5cbiAgICAgIC8vIEJlY2F1c2UgbmV3IHZhbHVlIGNvdWxkIGNvbnRhaW4gYWRkaXRpb25hbCBjaGFycy5cbiAgICAgIGlmIChvbGRWYWx1ZS5sZW5ndGggPT09IHByZXZQb3MpIHtcbiAgICAgICAgICByZXR1cm4gbmV3VmFsdWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldlBvcyArIHRoaXMuZ2V0UG9zaXRpb25PZmZzZXQocHJldlBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBkZWxpbWl0ZXIgLGRlbGltaXRlcnMpO1xuICAgIH0sXG5cbiAgICBnZXRQb3NpdGlvbk9mZnNldDogZnVuY3Rpb24gKHByZXZQb3MsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAgIHZhciBvbGRSYXdWYWx1ZSwgbmV3UmF3VmFsdWUsIGxlbmd0aE9mZnNldDtcblxuICAgICAgICBvbGRSYXdWYWx1ZSA9IHRoaXMuc3RyaXBEZWxpbWl0ZXJzKG9sZFZhbHVlLnNsaWNlKDAsIHByZXZQb3MpLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpO1xuICAgICAgICBuZXdSYXdWYWx1ZSA9IHRoaXMuc3RyaXBEZWxpbWl0ZXJzKG5ld1ZhbHVlLnNsaWNlKDAsIHByZXZQb3MpLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpO1xuICAgICAgICBsZW5ndGhPZmZzZXQgPSBvbGRSYXdWYWx1ZS5sZW5ndGggLSBuZXdSYXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIChsZW5ndGhPZmZzZXQgIT09IDApID8gKGxlbmd0aE9mZnNldCAvIE1hdGguYWJzKGxlbmd0aE9mZnNldCkpIDogMDtcbiAgICB9LFxuXG4gICAgc3RyaXBEZWxpbWl0ZXJzOiBmdW5jdGlvbiAodmFsdWUsIGRlbGltaXRlciwgZGVsaW1pdGVycykge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIC8vIHNpbmdsZSBkZWxpbWl0ZXJcbiAgICAgICAgaWYgKGRlbGltaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgZGVsaW1pdGVyUkUgPSBkZWxpbWl0ZXIgPyBvd25lci5nZXREZWxpbWl0ZXJSRUJ5RGVsaW1pdGVyKGRlbGltaXRlcikgOiAnJztcblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoZGVsaW1pdGVyUkUsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG11bHRpcGxlIGRlbGltaXRlcnNcbiAgICAgICAgZGVsaW1pdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAgICAgICAgICBjdXJyZW50LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2Uob3duZXIuZ2V0RGVsaW1pdGVyUkVCeURlbGltaXRlcihsZXR0ZXIpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBoZWFkU3RyOiBmdW5jdGlvbiAoc3RyLCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH0sXG5cbiAgICBnZXRNYXhMZW5ndGg6IGZ1bmN0aW9uIChibG9ja3MpIHtcbiAgICAgICAgcmV0dXJuIGJsb2Nrcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyBjdXJyZW50O1xuICAgICAgICB9LCAwKTtcbiAgICB9LFxuXG4gICAgLy8gc3RyaXAgcHJlZml4XG4gICAgLy8gQmVmb3JlIHR5cGUgIHwgICBBZnRlciB0eXBlICAgIHwgICAgIFJldHVybiB2YWx1ZVxuICAgIC8vIFBFRklYLS4uLiAgICB8ICAgUEVGSVgtLi4uICAgICB8ICAgICAnJ1xuICAgIC8vIFBSRUZJWC0xMjMgICB8ICAgUEVGSVgtMTIzICAgICB8ICAgICAxMjNcbiAgICAvLyBQUkVGSVgtMTIzICAgfCAgIFBSRUZJWC0yMyAgICAgfCAgICAgMjNcbiAgICAvLyBQUkVGSVgtMTIzICAgfCAgIFBSRUZJWC0xMjM0ICAgfCAgICAgMTIzNFxuICAgIGdldFByZWZpeFN0cmlwcGVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgcHJlZml4LCBwcmVmaXhMZW5ndGgsIHByZXZSZXN1bHQsIGRlbGltaXRlciwgZGVsaW1pdGVycywgbm9JbW1lZGlhdGVQcmVmaXgpIHtcbiAgICAgICAgLy8gTm8gcHJlZml4XG4gICAgICAgIGlmIChwcmVmaXhMZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmUgcmVzdWx0IHByZWZpeCBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggcHJlLWRlZmluZWQgcHJlZml4XG4gICAgICAgIGlmIChwcmV2UmVzdWx0LnNsaWNlKDAsIHByZWZpeExlbmd0aCkgIT09IHByZWZpeCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaXJzdCB0aW1lIHVzZXIgZW50ZXJlZCBzb21ldGhpbmdcbiAgICAgICAgICBpZiAobm9JbW1lZGlhdGVQcmVmaXggJiYgIXByZXZSZXN1bHQgJiYgdmFsdWUpIHJldHVybiB2YWx1ZTtcblxuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSB0aGlzLnN0cmlwRGVsaW1pdGVycyhwcmV2UmVzdWx0LCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpO1xuXG4gICAgICAgIC8vIE5ldyB2YWx1ZSBoYXMgaXNzdWUsIHNvbWVvbmUgdHlwZWQgaW4gYmV0d2VlbiBwcmVmaXggbGV0dGVyc1xuICAgICAgICAvLyBSZXZlcnQgdG8gcHJlIHZhbHVlXG4gICAgICAgIGlmICh2YWx1ZS5zbGljZSgwLCBwcmVmaXhMZW5ndGgpICE9PSBwcmVmaXgpIHtcbiAgICAgICAgICByZXR1cm4gcHJldlZhbHVlLnNsaWNlKHByZWZpeExlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBpc3N1ZSwgc3RyaXAgcHJlZml4IGZvciBuZXcgdmFsdWVcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKHByZWZpeExlbmd0aCk7XG4gICAgfSxcblxuICAgIGdldEZpcnN0RGlmZkluZGV4OiBmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICAgIHdoaWxlIChwcmV2LmNoYXJBdChpbmRleCkgPT09IGN1cnJlbnQuY2hhckF0KGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKHByZXYuY2hhckF0KGluZGV4KyspID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgYmxvY2tzLCBibG9ja3NMZW5ndGgsIGRlbGltaXRlciwgZGVsaW1pdGVycywgZGVsaW1pdGVyTGF6eVNob3cpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLFxuICAgICAgICAgICAgbXVsdGlwbGVEZWxpbWl0ZXJzID0gZGVsaW1pdGVycy5sZW5ndGggPiAwLFxuICAgICAgICAgICAgY3VycmVudERlbGltaXRlcjtcblxuICAgICAgICAvLyBubyBvcHRpb25zLCBub3JtYWwgaW5wdXRcbiAgICAgICAgaWYgKGJsb2Nrc0xlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlRGVsaW1pdGVycykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGVsaW1pdGVyID0gZGVsaW1pdGVyc1tkZWxpbWl0ZXJMYXp5U2hvdyA/IChpbmRleCAtIDEpIDogaW5kZXhdIHx8IGN1cnJlbnREZWxpbWl0ZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERlbGltaXRlciA9IGRlbGltaXRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVsaW1pdGVyTGF6eVNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGN1cnJlbnREZWxpbWl0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3ViO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Yi5sZW5ndGggPT09IGxlbmd0aCAmJiBpbmRleCA8IGJsb2Nrc0xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBjdXJyZW50RGVsaW1pdGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHJlbWFpbmluZyBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8vIG1vdmUgY3Vyc29yIHRvIHRoZSBlbmRcbiAgICAvLyB0aGUgZmlyc3QgdGltZSB1c2VyIGZvY3VzZXMgb24gYW4gaW5wdXQgd2l0aCBwcmVmaXhcbiAgICBmaXhQcmVmaXhDdXJzb3I6IGZ1bmN0aW9uIChlbCwgcHJlZml4LCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpIHtcbiAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbCA9IGVsLnZhbHVlLFxuICAgICAgICAgICAgYXBwZW5kaXggPSBkZWxpbWl0ZXIgfHwgKGRlbGltaXRlcnNbMF0gfHwgJyAnKTtcblxuICAgICAgICBpZiAoIWVsLnNldFNlbGVjdGlvblJhbmdlIHx8ICFwcmVmaXggfHwgKHByZWZpeC5sZW5ndGggKyBhcHBlbmRpeC5sZW5ndGgpIDwgdmFsLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGggKiAyO1xuXG4gICAgICAgIC8vIHNldCB0aW1lb3V0IHRvIGF2b2lkIGJsaW5rXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWwuc2V0U2VsZWN0aW9uUmFuZ2UobGVuLCBsZW4pO1xuICAgICAgICB9LCAxKTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2sgaWYgaW5wdXQgZmllbGQgaXMgZnVsbHkgc2VsZWN0ZWRcbiAgICBjaGVja0Z1bGxTZWxlY3Rpb246IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpIHx8IGRvY3VtZW50LmdldFNlbGVjdGlvbigpIHx8IHt9O1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnRvU3RyaW5nKCkubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBJZ25vcmVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChlbGVtZW50LCBwb3NpdGlvbiwgZG9jKSB7XG4gICAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoZG9jKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3Vyc29yIGlzIGFscmVhZHkgaW4gdGhlIGVuZFxuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnZhbHVlLmxlbmd0aCA8PSBwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZWxlbWVudC5jcmVhdGVUZXh0UmFuZ2UoKTtcblxuICAgICAgICAgICAgcmFuZ2UubW92ZSgnY2hhcmFjdGVyJywgcG9zaXRpb24pO1xuICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb24sIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBpbnB1dCBlbGVtZW50IHR5cGUgZG9lcyBub3Qgc3VwcG9ydCBzZWxlY3Rpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRBY3RpdmVFbGVtZW50OiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBwYXJlbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgfSxcblxuICAgIGlzQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yICYmIC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9LFxuXG4gICAgLy8gT24gQW5kcm9pZCBjaHJvbWUsIHRoZSBrZXl1cCBhbmQga2V5ZG93biBldmVudHNcbiAgICAvLyBhbHdheXMgcmV0dXJuIGtleSBjb2RlIDIyOSBhcyBhIGNvbXBvc2l0aW9uIHRoYXRcbiAgICAvLyBidWZmZXJzIHRoZSB1c2Vy4oCZcyBrZXlzdHJva2VzXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub3Npci9jbGVhdmUuanMvaXNzdWVzLzE0N1xuICAgIGlzQW5kcm9pZEJhY2tzcGFjZUtleWRvd246IGZ1bmN0aW9uIChsYXN0SW5wdXRWYWx1ZSwgY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQW5kcm9pZCgpIHx8ICFsYXN0SW5wdXRWYWx1ZSB8fCAhY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50SW5wdXRWYWx1ZSA9PT0gbGFzdElucHV0VmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgIH1cbn07XG5cbnZhciBVdGlsXzEgPSBVdGlsO1xuXG4vKipcbiAqIFByb3BzIEFzc2lnbm1lbnRcbiAqXG4gKiBTZXBhcmF0ZSB0aGlzLCBzbyByZWFjdCBtb2R1bGUgY2FuIHNoYXJlIHRoZSB1c2FnZVxuICovXG52YXIgRGVmYXVsdFByb3BlcnRpZXMgPSB7XG4gICAgLy8gTWF5YmUgY2hhbmdlIHRvIG9iamVjdC1hc3NpZ25cbiAgICAvLyBmb3Igbm93IGp1c3Qga2VlcCBpdCBhcyBzaW1wbGVcbiAgICBhc3NpZ246IGZ1bmN0aW9uICh0YXJnZXQsIG9wdHMpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgICAgICAvLyBjcmVkaXQgY2FyZFxuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZCA9ICEhb3B0cy5jcmVkaXRDYXJkO1xuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZFN0cmljdE1vZGUgPSAhIW9wdHMuY3JlZGl0Q2FyZFN0cmljdE1vZGU7XG4gICAgICAgIHRhcmdldC5jcmVkaXRDYXJkVHlwZSA9ICcnO1xuICAgICAgICB0YXJnZXQub25DcmVkaXRDYXJkVHlwZUNoYW5nZWQgPSBvcHRzLm9uQ3JlZGl0Q2FyZFR5cGVDaGFuZ2VkIHx8IChmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgdGFyZ2V0LnBob25lID0gISFvcHRzLnBob25lO1xuICAgICAgICB0YXJnZXQucGhvbmVSZWdpb25Db2RlID0gb3B0cy5waG9uZVJlZ2lvbkNvZGUgfHwgJ0FVJztcbiAgICAgICAgdGFyZ2V0LnBob25lRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gdGltZVxuICAgICAgICB0YXJnZXQudGltZSA9ICEhb3B0cy50aW1lO1xuICAgICAgICB0YXJnZXQudGltZVBhdHRlcm4gPSBvcHRzLnRpbWVQYXR0ZXJuIHx8IFsnaCcsICdtJywgJ3MnXTtcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXQgPSBvcHRzLnRpbWVGb3JtYXQgfHwgJzI0JztcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXR0ZXIgPSB7fTtcblxuICAgICAgICAvLyBkYXRlXG4gICAgICAgIHRhcmdldC5kYXRlID0gISFvcHRzLmRhdGU7XG4gICAgICAgIHRhcmdldC5kYXRlUGF0dGVybiA9IG9wdHMuZGF0ZVBhdHRlcm4gfHwgWydkJywgJ20nLCAnWSddO1xuICAgICAgICB0YXJnZXQuZGF0ZU1pbiA9IG9wdHMuZGF0ZU1pbiB8fCAnJztcbiAgICAgICAgdGFyZ2V0LmRhdGVNYXggPSBvcHRzLmRhdGVNYXggfHwgJyc7XG4gICAgICAgIHRhcmdldC5kYXRlRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gbnVtZXJhbFxuICAgICAgICB0YXJnZXQubnVtZXJhbCA9ICEhb3B0cy5udW1lcmFsO1xuICAgICAgICB0YXJnZXQubnVtZXJhbEludGVnZXJTY2FsZSA9IG9wdHMubnVtZXJhbEludGVnZXJTY2FsZSA+IDAgPyBvcHRzLm51bWVyYWxJbnRlZ2VyU2NhbGUgOiAwO1xuICAgICAgICB0YXJnZXQubnVtZXJhbERlY2ltYWxTY2FsZSA9IG9wdHMubnVtZXJhbERlY2ltYWxTY2FsZSA+PSAwID8gb3B0cy5udW1lcmFsRGVjaW1hbFNjYWxlIDogMjtcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxEZWNpbWFsTWFyayA9IG9wdHMubnVtZXJhbERlY2ltYWxNYXJrIHx8ICcuJztcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxUaG91c2FuZHNHcm91cFN0eWxlID0gb3B0cy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSB8fCAndGhvdXNhbmQnO1xuICAgICAgICB0YXJnZXQubnVtZXJhbFBvc2l0aXZlT25seSA9ICEhb3B0cy5udW1lcmFsUG9zaXRpdmVPbmx5O1xuICAgICAgICB0YXJnZXQuc3RyaXBMZWFkaW5nWmVyb2VzID0gb3B0cy5zdHJpcExlYWRpbmdaZXJvZXMgIT09IGZhbHNlO1xuICAgICAgICB0YXJnZXQuc2lnbkJlZm9yZVByZWZpeCA9ICEhb3B0cy5zaWduQmVmb3JlUHJlZml4O1xuXG4gICAgICAgIC8vIG90aGVyc1xuICAgICAgICB0YXJnZXQubnVtZXJpY09ubHkgPSB0YXJnZXQuY3JlZGl0Q2FyZCB8fCB0YXJnZXQuZGF0ZSB8fCAhIW9wdHMubnVtZXJpY09ubHk7XG5cbiAgICAgICAgdGFyZ2V0LnVwcGVyY2FzZSA9ICEhb3B0cy51cHBlcmNhc2U7XG4gICAgICAgIHRhcmdldC5sb3dlcmNhc2UgPSAhIW9wdHMubG93ZXJjYXNlO1xuXG4gICAgICAgIHRhcmdldC5wcmVmaXggPSAodGFyZ2V0LmNyZWRpdENhcmQgfHwgdGFyZ2V0LmRhdGUpID8gJycgOiAob3B0cy5wcmVmaXggfHwgJycpO1xuICAgICAgICB0YXJnZXQubm9JbW1lZGlhdGVQcmVmaXggPSAhIW9wdHMubm9JbW1lZGlhdGVQcmVmaXg7XG4gICAgICAgIHRhcmdldC5wcmVmaXhMZW5ndGggPSB0YXJnZXQucHJlZml4Lmxlbmd0aDtcbiAgICAgICAgdGFyZ2V0LnJhd1ZhbHVlVHJpbVByZWZpeCA9ICEhb3B0cy5yYXdWYWx1ZVRyaW1QcmVmaXg7XG4gICAgICAgIHRhcmdldC5jb3B5RGVsaW1pdGVyID0gISFvcHRzLmNvcHlEZWxpbWl0ZXI7XG5cbiAgICAgICAgdGFyZ2V0LmluaXRWYWx1ZSA9IChvcHRzLmluaXRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9wdHMuaW5pdFZhbHVlICE9PSBudWxsKSA/IG9wdHMuaW5pdFZhbHVlLnRvU3RyaW5nKCkgOiAnJztcblxuICAgICAgICB0YXJnZXQuZGVsaW1pdGVyID1cbiAgICAgICAgICAgIChvcHRzLmRlbGltaXRlciB8fCBvcHRzLmRlbGltaXRlciA9PT0gJycpID8gb3B0cy5kZWxpbWl0ZXIgOlxuICAgICAgICAgICAgICAgIChvcHRzLmRhdGUgPyAnLycgOlxuICAgICAgICAgICAgICAgICAgICAob3B0cy50aW1lID8gJzonIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIChvcHRzLm51bWVyYWwgPyAnLCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRzLnBob25lID8gJyAnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnKSkpKTtcbiAgICAgICAgdGFyZ2V0LmRlbGltaXRlckxlbmd0aCA9IHRhcmdldC5kZWxpbWl0ZXIubGVuZ3RoO1xuICAgICAgICB0YXJnZXQuZGVsaW1pdGVyTGF6eVNob3cgPSAhIW9wdHMuZGVsaW1pdGVyTGF6eVNob3c7XG4gICAgICAgIHRhcmdldC5kZWxpbWl0ZXJzID0gb3B0cy5kZWxpbWl0ZXJzIHx8IFtdO1xuXG4gICAgICAgIHRhcmdldC5ibG9ja3MgPSBvcHRzLmJsb2NrcyB8fCBbXTtcbiAgICAgICAgdGFyZ2V0LmJsb2Nrc0xlbmd0aCA9IHRhcmdldC5ibG9ja3MubGVuZ3RoO1xuXG4gICAgICAgIHRhcmdldC5yb290ID0gKHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpID8gY29tbW9uanNHbG9iYWwgOiB3aW5kb3c7XG4gICAgICAgIHRhcmdldC5kb2N1bWVudCA9IG9wdHMuZG9jdW1lbnQgfHwgdGFyZ2V0LnJvb3QuZG9jdW1lbnQ7XG5cbiAgICAgICAgdGFyZ2V0Lm1heExlbmd0aCA9IDA7XG5cbiAgICAgICAgdGFyZ2V0LmJhY2tzcGFjZSA9IGZhbHNlO1xuICAgICAgICB0YXJnZXQucmVzdWx0ID0gJyc7XG5cbiAgICAgICAgdGFyZ2V0Lm9uVmFsdWVDaGFuZ2VkID0gb3B0cy5vblZhbHVlQ2hhbmdlZCB8fCAoZnVuY3Rpb24gKCkge30pO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxufTtcblxudmFyIERlZmF1bHRQcm9wZXJ0aWVzXzEgPSBEZWZhdWx0UHJvcGVydGllcztcblxuLyoqXG4gKiBDb25zdHJ1Y3QgYSBuZXcgQ2xlYXZlIGluc3RhbmNlIGJ5IHBhc3NpbmcgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmcgfCBIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqL1xudmFyIENsZWF2ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRzKSB7XG4gICAgdmFyIG93bmVyID0gdGhpcztcbiAgICB2YXIgaGFzTXVsdGlwbGVFbGVtZW50cyA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBvd25lci5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcbiAgICAgICAgaGFzTXVsdGlwbGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCkubGVuZ3RoID4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG93bmVyLmVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBoYXNNdWx0aXBsZUVsZW1lbnRzID0gZWxlbWVudC5sZW5ndGggPiAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXIuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFvd25lci5lbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW2NsZWF2ZS5qc10gUGxlYXNlIGNoZWNrIHRoZSBlbGVtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGhhc011bHRpcGxlRWxlbWVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tjbGVhdmUuanNdIE11bHRpcGxlIGlucHV0IGZpZWxkcyBtYXRjaGVkLCBjbGVhdmUuanMgd2lsbCBvbmx5IHRha2UgdGhlIGZpcnN0IG9uZS4nKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gT2xkIElFXG4gICAgICB9XG4gICAgfVxuXG4gICAgb3B0cy5pbml0VmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuXG4gICAgb3duZXIucHJvcGVydGllcyA9IENsZWF2ZS5EZWZhdWx0UHJvcGVydGllcy5hc3NpZ24oe30sIG9wdHMpO1xuXG4gICAgb3duZXIuaW5pdCgpO1xufTtcblxuQ2xlYXZlLnByb3RvdHlwZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgLy8gbm8gbmVlZCB0byB1c2UgdGhpcyBsaWJcbiAgICAgICAgaWYgKCFwcHMubnVtZXJhbCAmJiAhcHBzLnBob25lICYmICFwcHMuY3JlZGl0Q2FyZCAmJiAhcHBzLnRpbWUgJiYgIXBwcy5kYXRlICYmIChwcHMuYmxvY2tzTGVuZ3RoID09PSAwICYmICFwcHMucHJlZml4KSkge1xuICAgICAgICAgICAgb3duZXIub25JbnB1dChwcHMuaW5pdFZhbHVlKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLm1heExlbmd0aCA9IENsZWF2ZS5VdGlsLmdldE1heExlbmd0aChwcHMuYmxvY2tzKTtcblxuICAgICAgICBvd25lci5pc0FuZHJvaWQgPSBDbGVhdmUuVXRpbC5pc0FuZHJvaWQoKTtcbiAgICAgICAgb3duZXIubGFzdElucHV0VmFsdWUgPSAnJztcblxuICAgICAgICBvd25lci5vbkNoYW5nZUxpc3RlbmVyID0gb3duZXIub25DaGFuZ2UuYmluZChvd25lcik7XG4gICAgICAgIG93bmVyLm9uS2V5RG93bkxpc3RlbmVyID0gb3duZXIub25LZXlEb3duLmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbkZvY3VzTGlzdGVuZXIgPSBvd25lci5vbkZvY3VzLmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbkN1dExpc3RlbmVyID0gb3duZXIub25DdXQuYmluZChvd25lcik7XG4gICAgICAgIG93bmVyLm9uQ29weUxpc3RlbmVyID0gb3duZXIub25Db3B5LmJpbmQob3duZXIpO1xuXG4gICAgICAgIG93bmVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvd25lci5vbkNoYW5nZUxpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb3duZXIub25LZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb3duZXIub25Gb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjdXQnLCBvd25lci5vbkN1dExpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb3B5Jywgb3duZXIub25Db3B5TGlzdGVuZXIpO1xuXG5cbiAgICAgICAgb3duZXIuaW5pdFBob25lRm9ybWF0dGVyKCk7XG4gICAgICAgIG93bmVyLmluaXREYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgIG93bmVyLmluaXRUaW1lRm9ybWF0dGVyKCk7XG4gICAgICAgIG93bmVyLmluaXROdW1lcmFsRm9ybWF0dGVyKCk7XG5cbiAgICAgICAgLy8gYXZvaWQgdG91Y2ggaW5wdXQgZmllbGQgaWYgdmFsdWUgaXMgbnVsbFxuICAgICAgICAvLyBvdGhlcndpc2UgRmlyZWZveCB3aWxsIGFkZCByZWQgYm94LXNoYWRvdyBmb3IgPGlucHV0IHJlcXVpcmVkIC8+XG4gICAgICAgIGlmIChwcHMuaW5pdFZhbHVlIHx8IChwcHMucHJlZml4ICYmICFwcHMubm9JbW1lZGlhdGVQcmVmaXgpKSB7XG4gICAgICAgICAgICBvd25lci5vbklucHV0KHBwcy5pbml0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGluaXROdW1lcmFsRm9ybWF0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKCFwcHMubnVtZXJhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLm51bWVyYWxGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIoXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxNYXJrLFxuICAgICAgICAgICAgcHBzLm51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxTY2FsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgcHBzLnN0cmlwTGVhZGluZ1plcm9lcyxcbiAgICAgICAgICAgIHBwcy5wcmVmaXgsXG4gICAgICAgICAgICBwcHMuc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgIHBwcy5kZWxpbWl0ZXJcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgaW5pdFRpbWVGb3JtYXR0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghcHBzLnRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBwcy50aW1lRm9ybWF0dGVyID0gbmV3IENsZWF2ZS5UaW1lRm9ybWF0dGVyKHBwcy50aW1lUGF0dGVybiwgcHBzLnRpbWVGb3JtYXQpO1xuICAgICAgICBwcHMuYmxvY2tzID0gcHBzLnRpbWVGb3JtYXR0ZXIuZ2V0QmxvY2tzKCk7XG4gICAgICAgIHBwcy5ibG9ja3NMZW5ndGggPSBwcHMuYmxvY2tzLmxlbmd0aDtcbiAgICAgICAgcHBzLm1heExlbmd0aCA9IENsZWF2ZS5VdGlsLmdldE1heExlbmd0aChwcHMuYmxvY2tzKTtcbiAgICB9LFxuXG4gICAgaW5pdERhdGVGb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICBpZiAoIXBwcy5kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcHMuZGF0ZUZvcm1hdHRlciA9IG5ldyBDbGVhdmUuRGF0ZUZvcm1hdHRlcihwcHMuZGF0ZVBhdHRlcm4sIHBwcy5kYXRlTWluLCBwcHMuZGF0ZU1heCk7XG4gICAgICAgIHBwcy5ibG9ja3MgPSBwcHMuZGF0ZUZvcm1hdHRlci5nZXRCbG9ja3MoKTtcbiAgICAgICAgcHBzLmJsb2Nrc0xlbmd0aCA9IHBwcy5ibG9ja3MubGVuZ3RoO1xuICAgICAgICBwcHMubWF4TGVuZ3RoID0gQ2xlYXZlLlV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuICAgIH0sXG5cbiAgICBpbml0UGhvbmVGb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICBpZiAoIXBwcy5waG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYXZlLkFzWW91VHlwZUZvcm1hdHRlciBzaG91bGQgYmUgcHJvdmlkZWQgYnlcbiAgICAgICAgLy8gZXh0ZXJuYWwgZ29vZ2xlIGNsb3N1cmUgbGliXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcHMucGhvbmVGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLlBob25lRm9ybWF0dGVyKFxuICAgICAgICAgICAgICAgIG5ldyBwcHMucm9vdC5DbGVhdmUuQXNZb3VUeXBlRm9ybWF0dGVyKHBwcy5waG9uZVJlZ2lvbkNvZGUpLFxuICAgICAgICAgICAgICAgIHBwcy5kZWxpbWl0ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tjbGVhdmUuanNdIFBsZWFzZSBpbmNsdWRlIHBob25lLXR5cGUtZm9ybWF0dGVyLntjb3VudHJ5fS5qcyBsaWInKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbktleURvd246IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgY2hhckNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gb3duZXIuZWxlbWVudC52YWx1ZTtcblxuICAgICAgICAvLyBpZiB3ZSBnb3QgYW55IGNoYXJDb2RlID09PSA4LCB0aGlzIG1lYW5zLCB0aGF0IHRoaXMgZGV2aWNlIGNvcnJlY3RseVxuICAgICAgICAvLyBzZW5kcyBiYWNrc3BhY2Uga2V5cyBpbiBldmVudCwgc28gd2UgZG8gbm90IG5lZWQgdG8gYXBwbHkgYW55IGhhY2tzXG4gICAgICAgIG93bmVyLmhhc0JhY2tzcGFjZVN1cHBvcnQgPSBvd25lci5oYXNCYWNrc3BhY2VTdXBwb3J0IHx8IGNoYXJDb2RlID09PSA4O1xuICAgICAgICBpZiAoIW93bmVyLmhhc0JhY2tzcGFjZVN1cHBvcnRcbiAgICAgICAgICAmJiBVdGlsLmlzQW5kcm9pZEJhY2tzcGFjZUtleWRvd24ob3duZXIubGFzdElucHV0VmFsdWUsIGN1cnJlbnRWYWx1ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjaGFyQ29kZSA9IDg7XG4gICAgICAgIH1cblxuICAgICAgICBvd25lci5sYXN0SW5wdXRWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAvLyBoaXQgYmFja3NwYWNlIHdoZW4gbGFzdCBjaGFyYWN0ZXIgaXMgZGVsaW1pdGVyXG4gICAgICAgIHZhciBwb3N0RGVsaW1pdGVyID0gVXRpbC5nZXRQb3N0RGVsaW1pdGVyKGN1cnJlbnRWYWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoY2hhckNvZGUgPT09IDggJiYgcG9zdERlbGltaXRlcikge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBwb3N0RGVsaW1pdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9uSW5wdXQodGhpcy5lbGVtZW50LnZhbHVlKTtcbiAgICB9LFxuXG4gICAgb25Gb2N1czogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICBDbGVhdmUuVXRpbC5maXhQcmVmaXhDdXJzb3Iob3duZXIuZWxlbWVudCwgcHBzLnByZWZpeCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgIH0sXG5cbiAgICBvbkN1dDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFDbGVhdmUuVXRpbC5jaGVja0Z1bGxTZWxlY3Rpb24odGhpcy5lbGVtZW50LnZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvcHlDbGlwYm9hcmREYXRhKGUpO1xuICAgICAgICB0aGlzLm9uSW5wdXQoJycpO1xuICAgIH0sXG5cbiAgICBvbkNvcHk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghQ2xlYXZlLlV0aWwuY2hlY2tGdWxsU2VsZWN0aW9uKHRoaXMuZWxlbWVudC52YWx1ZSkpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb3B5Q2xpcGJvYXJkRGF0YShlKTtcbiAgICB9LFxuXG4gICAgY29weUNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWUsXG4gICAgICAgICAgICB0ZXh0VG9Db3B5ID0gJyc7XG5cbiAgICAgICAgaWYgKCFwcHMuY29weURlbGltaXRlcikge1xuICAgICAgICAgICAgdGV4dFRvQ29weSA9IFV0aWwuc3RyaXBEZWxpbWl0ZXJzKGlucHV0VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRUb0NvcHkgPSBpbnB1dFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChlLmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgnVGV4dCcsIHRleHRUb0NvcHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCdUZXh0JywgdGV4dFRvQ29weSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIC8vICBlbXB0eVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uSW5wdXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsO1xuXG4gICAgICAgIC8vIGNhc2UgMTogZGVsZXRlIG9uZSBtb3JlIGNoYXJhY3RlciBcIjRcIlxuICAgICAgICAvLyAxMjM0KnwgLT4gaGl0IGJhY2tzcGFjZSAtPiAxMjN8XG4gICAgICAgIC8vIGNhc2UgMjogbGFzdCBjaGFyYWN0ZXIgaXMgbm90IGRlbGltaXRlciB3aGljaCBpczpcbiAgICAgICAgLy8gMTJ8MzQqIC0+IGhpdCBiYWNrc3BhY2UgLT4gMXwzNCpcbiAgICAgICAgLy8gbm90ZTogbm8gbmVlZCB0byBhcHBseSB0aGlzIGZvciBudW1lcmFsIG1vZGVcbiAgICAgICAgdmFyIHBvc3REZWxpbWl0ZXJBZnRlciA9IFV0aWwuZ2V0UG9zdERlbGltaXRlcih2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoIXBwcy5udW1lcmFsICYmIHBwcy5wb3N0RGVsaW1pdGVyQmFja3NwYWNlICYmICFwb3N0RGVsaW1pdGVyQWZ0ZXIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gVXRpbC5oZWFkU3RyKHZhbHVlLCB2YWx1ZS5sZW5ndGggLSBwcHMucG9zdERlbGltaXRlckJhY2tzcGFjZS5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGhvbmUgZm9ybWF0dGVyXG4gICAgICAgIGlmIChwcHMucGhvbmUpIHtcbiAgICAgICAgICAgIGlmIChwcHMucHJlZml4ICYmICghcHBzLm5vSW1tZWRpYXRlUHJlZml4IHx8IHZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLnByZWZpeCArIHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpLnNsaWNlKHBwcy5wcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9IHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBudW1lcmFsIGZvcm1hdHRlclxuICAgICAgICBpZiAocHBzLm51bWVyYWwpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBzaG93IHByZWZpeCB3aGVuIG5vSW1tZWRpYXRlUHJlZml4IGlzIHNwZWNpZmllZFxuICAgICAgICAgICAgLy8gVGhpcyBtb3N0bHkgYmVjYXVzZSB3ZSBuZWVkIHRvIHNob3cgdXNlciB0aGUgbmF0aXZlIGlucHV0IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBpZiAocHBzLnByZWZpeCAmJiBwcHMubm9JbW1lZGlhdGVQcmVmaXggJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLm51bWVyYWxGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG93bmVyLnVwZGF0ZVZhbHVlU3RhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGF0ZVxuICAgICAgICBpZiAocHBzLmRhdGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcHBzLmRhdGVGb3JtYXR0ZXIuZ2V0VmFsaWRhdGVkRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aW1lXG4gICAgICAgIGlmIChwcHMudGltZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBwcHMudGltZUZvcm1hdHRlci5nZXRWYWxpZGF0ZWRUaW1lKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0cmlwIGRlbGltaXRlcnNcbiAgICAgICAgdmFsdWUgPSBVdGlsLnN0cmlwRGVsaW1pdGVycyh2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuXG4gICAgICAgIC8vIHN0cmlwIHByZWZpeFxuICAgICAgICB2YWx1ZSA9IFV0aWwuZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZShcbiAgICAgICAgICAgIHZhbHVlLCBwcHMucHJlZml4LCBwcHMucHJlZml4TGVuZ3RoLFxuICAgICAgICAgICAgcHBzLnJlc3VsdCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMsIHBwcy5ub0ltbWVkaWF0ZVByZWZpeFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHN0cmlwIG5vbi1udW1lcmljIGNoYXJhY3RlcnNcbiAgICAgICAgdmFsdWUgPSBwcHMubnVtZXJpY09ubHkgPyBVdGlsLnN0cmlwKHZhbHVlLCAvW15cXGRdL2cpIDogdmFsdWU7XG5cbiAgICAgICAgLy8gY29udmVydCBjYXNlXG4gICAgICAgIHZhbHVlID0gcHBzLnVwcGVyY2FzZSA/IHZhbHVlLnRvVXBwZXJDYXNlKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBwcHMubG93ZXJjYXNlID8gdmFsdWUudG9Mb3dlckNhc2UoKSA6IHZhbHVlO1xuXG4gICAgICAgIC8vIHByZXZlbnQgZnJvbSBzaG93aW5nIHByZWZpeCB3aGVuIG5vIGltbWVkaWF0ZSBvcHRpb24gZW5hYmxlZCB3aXRoIGVtcHR5IGlucHV0IHZhbHVlXG4gICAgICAgIGlmIChwcHMucHJlZml4ICYmICghcHBzLm5vSW1tZWRpYXRlUHJlZml4IHx8IHZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcHBzLnByZWZpeCArIHZhbHVlO1xuXG4gICAgICAgICAgICAvLyBubyBibG9ja3Mgc3BlY2lmaWVkLCBubyBuZWVkIHRvIGRvIGZvcm1hdHRpbmdcbiAgICAgICAgICAgIGlmIChwcHMuYmxvY2tzTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIG93bmVyLnVwZGF0ZVZhbHVlU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBjcmVkaXQgY2FyZCBwcm9wc1xuICAgICAgICBpZiAocHBzLmNyZWRpdENhcmQpIHtcbiAgICAgICAgICAgIG93bmVyLnVwZGF0ZUNyZWRpdENhcmRQcm9wc0J5VmFsdWUodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RyaXAgb3ZlciBsZW5ndGggY2hhcmFjdGVyc1xuICAgICAgICB2YWx1ZSA9IFV0aWwuaGVhZFN0cih2YWx1ZSwgcHBzLm1heExlbmd0aCk7XG5cbiAgICAgICAgLy8gYXBwbHkgYmxvY2tzXG4gICAgICAgIHBwcy5yZXN1bHQgPSBVdGlsLmdldEZvcm1hdHRlZFZhbHVlKFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBwcHMuYmxvY2tzLCBwcHMuYmxvY2tzTGVuZ3RoLFxuICAgICAgICAgICAgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMsIHBwcy5kZWxpbWl0ZXJMYXp5U2hvd1xuICAgICAgICApO1xuXG4gICAgICAgIG93bmVyLnVwZGF0ZVZhbHVlU3RhdGUoKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlQ3JlZGl0Q2FyZFByb3BzQnlWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBVdGlsID0gQ2xlYXZlLlV0aWwsXG4gICAgICAgICAgICBjcmVkaXRDYXJkSW5mbztcblxuICAgICAgICAvLyBBdCBsZWFzdCBvbmUgb2YgdGhlIGZpcnN0IDQgY2hhcmFjdGVycyBoYXMgY2hhbmdlZFxuICAgICAgICBpZiAoVXRpbC5oZWFkU3RyKHBwcy5yZXN1bHQsIDQpID09PSBVdGlsLmhlYWRTdHIodmFsdWUsIDQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjcmVkaXRDYXJkSW5mbyA9IENsZWF2ZS5DcmVkaXRDYXJkRGV0ZWN0b3IuZ2V0SW5mbyh2YWx1ZSwgcHBzLmNyZWRpdENhcmRTdHJpY3RNb2RlKTtcblxuICAgICAgICBwcHMuYmxvY2tzID0gY3JlZGl0Q2FyZEluZm8uYmxvY2tzO1xuICAgICAgICBwcHMuYmxvY2tzTGVuZ3RoID0gcHBzLmJsb2Nrcy5sZW5ndGg7XG4gICAgICAgIHBwcy5tYXhMZW5ndGggPSBVdGlsLmdldE1heExlbmd0aChwcHMuYmxvY2tzKTtcblxuICAgICAgICAvLyBjcmVkaXQgY2FyZCB0eXBlIGNoYW5nZWRcbiAgICAgICAgaWYgKHBwcy5jcmVkaXRDYXJkVHlwZSAhPT0gY3JlZGl0Q2FyZEluZm8udHlwZSkge1xuICAgICAgICAgICAgcHBzLmNyZWRpdENhcmRUeXBlID0gY3JlZGl0Q2FyZEluZm8udHlwZTtcblxuICAgICAgICAgICAgcHBzLm9uQ3JlZGl0Q2FyZFR5cGVDaGFuZ2VkLmNhbGwob3duZXIsIHBwcy5jcmVkaXRDYXJkVHlwZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlVmFsdWVTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICBpZiAoIW93bmVyLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbmRQb3MgPSBvd25lci5lbGVtZW50LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gb3duZXIuZWxlbWVudC52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gcHBzLnJlc3VsdDtcblxuICAgICAgICBlbmRQb3MgPSBVdGlsLmdldE5leHRDdXJzb3JQb3NpdGlvbihlbmRQb3MsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuXG4gICAgICAgIC8vIGZpeCBBbmRyb2lkIGJyb3dzZXIgdHlwZT1cInRleHRcIiBpbnB1dCBmaWVsZFxuICAgICAgICAvLyBjdXJzb3Igbm90IGp1bXBpbmcgaXNzdWVcbiAgICAgICAgaWYgKG93bmVyLmlzQW5kcm9pZCkge1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG93bmVyLmVsZW1lbnQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBVdGlsLnNldFNlbGVjdGlvbihvd25lci5lbGVtZW50LCBlbmRQb3MsIHBwcy5kb2N1bWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIG93bmVyLmNhbGxPblZhbHVlQ2hhbmdlZCgpO1xuICAgICAgICAgICAgfSwgMSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG93bmVyLmVsZW1lbnQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgVXRpbC5zZXRTZWxlY3Rpb24ob3duZXIuZWxlbWVudCwgZW5kUG9zLCBwcHMuZG9jdW1lbnQsIGZhbHNlKTtcbiAgICAgICAgb3duZXIuY2FsbE9uVmFsdWVDaGFuZ2VkKCk7XG4gICAgfSxcblxuICAgIGNhbGxPblZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICBwcHMub25WYWx1ZUNoYW5nZWQuY2FsbChvd25lciwge1xuICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHBwcy5yZXN1bHQsXG4gICAgICAgICAgICAgICAgcmF3VmFsdWU6IG93bmVyLmdldFJhd1ZhbHVlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHNldFBob25lUmVnaW9uQ29kZTogZnVuY3Rpb24gKHBob25lUmVnaW9uQ29kZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIHBwcy5waG9uZVJlZ2lvbkNvZGUgPSBwaG9uZVJlZ2lvbkNvZGU7XG4gICAgICAgIG93bmVyLmluaXRQaG9uZUZvcm1hdHRlcigpO1xuICAgICAgICBvd25lci5vbkNoYW5nZSgpO1xuICAgIH0sXG5cbiAgICBzZXRSYXdWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsID8gdmFsdWUudG9TdHJpbmcoKSA6ICcnO1xuXG4gICAgICAgIGlmIChwcHMubnVtZXJhbCkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCcuJywgcHBzLm51bWVyYWxEZWNpbWFsTWFyayk7XG4gICAgICAgIH1cblxuICAgICAgICBwcHMucG9zdERlbGltaXRlckJhY2tzcGFjZSA9IGZhbHNlO1xuXG4gICAgICAgIG93bmVyLmVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgb3duZXIub25JbnB1dCh2YWx1ZSk7XG4gICAgfSxcblxuICAgIGdldFJhd1ZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgcmF3VmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuXG4gICAgICAgIGlmIChwcHMucmF3VmFsdWVUcmltUHJlZml4KSB7XG4gICAgICAgICAgICByYXdWYWx1ZSA9IFV0aWwuZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZShyYXdWYWx1ZSwgcHBzLnByZWZpeCwgcHBzLnByZWZpeExlbmd0aCwgcHBzLnJlc3VsdCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBwcy5udW1lcmFsKSB7XG4gICAgICAgICAgICByYXdWYWx1ZSA9IHBwcy5udW1lcmFsRm9ybWF0dGVyLmdldFJhd1ZhbHVlKHJhd1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhd1ZhbHVlID0gVXRpbC5zdHJpcERlbGltaXRlcnMocmF3VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLmRhdGUgPyBwcHMuZGF0ZUZvcm1hdHRlci5nZXRJU09Gb3JtYXREYXRlKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0VGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLnRpbWUgPyBwcHMudGltZUZvcm1hdHRlci5nZXRJU09Gb3JtYXRUaW1lKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvd25lci5vbkNoYW5nZUxpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb3duZXIub25LZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb3duZXIub25Gb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXQnLCBvd25lci5vbkN1dExpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb3B5Jywgb3duZXIub25Db3B5TGlzdGVuZXIpO1xuICAgIH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ1tDbGVhdmUgT2JqZWN0XSc7XG4gICAgfVxufTtcblxuQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIgPSBOdW1lcmFsRm9ybWF0dGVyXzE7XG5DbGVhdmUuRGF0ZUZvcm1hdHRlciA9IERhdGVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5UaW1lRm9ybWF0dGVyID0gVGltZUZvcm1hdHRlcl8xO1xuQ2xlYXZlLlBob25lRm9ybWF0dGVyID0gUGhvbmVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5DcmVkaXRDYXJkRGV0ZWN0b3IgPSBDcmVkaXRDYXJkRGV0ZWN0b3JfMTtcbkNsZWF2ZS5VdGlsID0gVXRpbF8xO1xuQ2xlYXZlLkRlZmF1bHRQcm9wZXJ0aWVzID0gRGVmYXVsdFByb3BlcnRpZXNfMTtcblxuLy8gZm9yIGFuZ3VsYXIgZGlyZWN0aXZlXG4oKHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpID8gY29tbW9uanNHbG9iYWwgOiB3aW5kb3cpWydDbGVhdmUnXSA9IENsZWF2ZTtcblxuLy8gQ29tbW9uSlNcbnZhciBDbGVhdmVfMSA9IENsZWF2ZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xlYXZlXzE7XG4iLCJpbXBvcnQgJy4uL2ltYWdlcy9mYXZpY29uL2Zhdmljb24uanMnO1xyXG5cclxuXHJcblxyXG4iLCJjb25zdCBmYXZpY29uc0NvbnRleHQgPSByZXF1aXJlLmNvbnRleHQoXHJcbiAgICAnISFmaWxlLWxvYWRlcj9uYW1lPWZhdmljb24vW25hbWVdLltleHRdIS4nLFxyXG4gICAgdHJ1ZSxcclxuICAgIC9cXC4oc3ZnfHBuZ3xpY298eG1sfGpzb258d2VibWFuaWZlc3QpJC9cclxuKTtcclxuZmF2aWNvbnNDb250ZXh0LmtleXMoKS5mb3JFYWNoKGZhdmljb25zQ29udGV4dCk7IiwidmFyIG1hcCA9IHtcblx0XCIuL2FuZHJvaWQtY2hyb21lLTE0NHgxNDQucG5nXCI6IDEwLFxuXHRcIi4vYXBwbGUtdG91Y2gtaWNvbi5wbmdcIjogMTEsXG5cdFwiLi9icm93c2VyY29uZmlnLnhtbFwiOiAxMixcblx0XCIuL2Zhdmljb24tMTZ4MTYucG5nXCI6IDEzLFxuXHRcIi4vZmF2aWNvbi0zMngzMi5wbmdcIjogMTQsXG5cdFwiLi9mYXZpY29uLmljb1wiOiAxNSxcblx0XCIuL21zdGlsZS0xNTB4MTUwLnBuZ1wiOiAxNixcblx0XCIuL3NhZmFyaS1waW5uZWQtdGFiLnN2Z1wiOiAxNyxcblx0XCIuL3NpdGUud2VibWFuaWZlc3RcIjogMThcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA5OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vYW5kcm9pZC1jaHJvbWUtMTQ0eDE0NC5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uL2FwcGxlLXRvdWNoLWljb24ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi9icm93c2VyY29uZmlnLnhtbFwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vZmF2aWNvbi0xNngxNi5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uL2Zhdmljb24tMzJ4MzIucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi9mYXZpY29uLmljb1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vbXN0aWxlLTE1MHgxNTAucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi9zYWZhcmktcGlubmVkLXRhYi5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uL3NpdGUud2VibWFuaWZlc3RcIjsiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogKG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKSA/IGZvcm1zWzFdIDogZm9ybXNbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnc3MnOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgICdtbSc6IHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyA6ICfQvNC40L3Rg9GC0YNf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInLFxuICAgICAgICAgICAgJ2hoJzogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgICAgICdkZCc6ICfQtNC10L3RjF/QtNC90Y9f0LTQvdC10LknLFxuICAgICAgICAgICAgJ01NJzogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgICAgICd5eSc6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXtGP0L3Qsi9pLCAvXtGE0LXQsi9pLCAvXtC80LDRgC9pLCAvXtCw0L/RgC9pLCAvXtC80LBb0LnRj10vaSwgL17QuNGO0L0vaSwgL17QuNGO0LsvaSwgL17QsNCy0LMvaSwgL17RgdC10L0vaSwgL17QvtC60YIvaSwgL17QvdC+0Y8vaSwgL17QtNC10LovaV07XG5cbiAgICAvLyBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9ydWxlcy8xMzktcHJvcCA6IMKnIDEwM1xuICAgIC8vINCh0L7QutGA0LDRidC10L3QuNGPINC80LXRgdGP0YbQtdCyOiBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9idXJvL3NlYXJjaC1hbnN3ZXI/cz0yNDI2MzdcbiAgICAvLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbiAgICB2YXIgcnUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdydScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YMgP1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGALl/QsNC/0YAuX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXMgOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC/0YDQvtGI0LvRg9GOfNGB0LvQtdC00YPRjtGJ0YPRjnzRjdGC0YMpPyA/XFxdID9kZGRkL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgICAgICBtb250aHNSZWdleDogL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKNGP0L3QstCw0YBb0Y/RjF180YTQtdCy0YDQsNC7W9GP0YxdfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0Y/RjF180LzQsFvRj9C5XXzQuNGO0L1b0Y/RjF180LjRjtC7W9GP0YxdfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRj9GMXXzQvtC60YLRj9Cx0YBb0Y/RjF180L3QvtGP0LHRgFvRj9GMXXzQtNC10LrQsNCx0YBb0Y/RjF0pL2ksXG5cbiAgICAgICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodC10LPQvtC00L3Rjywg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQtdC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC40LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9C+0LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgcyA6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LXRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2luZGV4LmpzXCI6IDIzXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjI7IiwibW9kdWxlLmV4cG9ydHMgPSBudWxsXG4iLCIvLyBqcXVlcnkuZGF0ZXJhbmdlcGlja2VyLmpzXG4vLyBhdXRob3IgOiBDaHVubG9uZyBMaXVcbi8vIGxpY2Vuc2UgOiBNSVRcbi8vIHd3dy5qc3plbi5jb21cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5JywgJ21vbWVudCddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBDb21tb25KUy4gUmVnaXN0ZXIgYXMgYSBtb2R1bGVcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdtb21lbnQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5LCBtb21lbnQpO1xuICAgIH1cbn0oZnVuY3Rpb24oJCwgbW9tZW50KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgICQuZGF0ZVJhbmdlUGlja2VyTGFuZ3VhZ2VzID0ge1xuICAgICAgICBcImRlZmF1bHRcIjogLy9kZWZhdWx0IGxhbmd1YWdlOiBFbmdsaXNoXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJTZWxlY3RlZDpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiRGF5XCIsXG4gICAgICAgICAgICBcImRheXNcIjogXCJEYXlzXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwiQ2xvc2VcIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwibW9cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwidHVcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwid2VcIixcbiAgICAgICAgICAgIFwid2Vlay00XCI6IFwidGhcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwiZnJcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic2FcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwic3VcIixcbiAgICAgICAgICAgIFwid2Vlay1udW1iZXJcIjogXCJXXCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFudWFyeVwiLCBcImZlYnJ1YXJ5XCIsIFwibWFyY2hcIiwgXCJhcHJpbFwiLCBcIm1heVwiLCBcImp1bmVcIiwgXCJqdWx5XCIsIFwiYXVndXN0XCIsIFwic2VwdGVtYmVyXCIsIFwib2N0b2JlclwiLCBcIm5vdmVtYmVyXCIsIFwiZGVjZW1iZXJcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIlNob3J0Y3V0c1wiLFxuICAgICAgICAgICAgXCJjdXN0b20tdmFsdWVzXCI6IFwiQ3VzdG9tIFZhbHVlc1wiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiUGFzdFwiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCJGb2xsb3dpbmdcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJQcmV2aW91c1wiLFxuICAgICAgICAgICAgXCJwcmV2LXdlZWtcIjogXCJXZWVrXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJNb250aFwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJZZWFyXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJOZXh0XCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIldlZWtcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIk1vbnRoXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIlllYXJcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwiRGF0ZSByYW5nZSBzaG91bGQgbm90IGJlIG1vcmUgdGhhbiAlZCBkYXlzXCIsXG4gICAgICAgICAgICBcIm1vcmUtdGhhblwiOiBcIkRhdGUgcmFuZ2Ugc2hvdWxkIG5vdCBiZSBsZXNzIHRoYW4gJWQgZGF5c1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCJQbGVhc2Ugc2VsZWN0IGEgZGF0ZSByYW5nZSBsb25nZXIgdGhhbiAlZCBkYXlzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwiUGxlYXNlIHNlbGVjdCBhIGRhdGVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiUGxlYXNlIHNlbGVjdCBhIGRhdGUgcmFuZ2UgbGVzcyB0aGFuICVkIGRheXNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIlBsZWFzZSBzZWxlY3QgYSBkYXRlIHJhbmdlIGJldHdlZW4gJWQgYW5kICVkIGRheXNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiUGxlYXNlIHNlbGVjdCBhIGRhdGUgcmFuZ2VcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIlRpbWVcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcIkhvdXJcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IFwiTWludXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiVGVycGlsaWg6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIkhhcmlcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIkhhcmlcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCJUdXR1cFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCJzZW5cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwic2VsXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcInJhYlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJrYW1cIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwianVtXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcInNhYlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCJtaW5cIixcbiAgICAgICAgICAgIFwid2Vlay1udW1iZXJcIjogXCJXXCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFudWFyaVwiLCBcImZlYnJ1YXJpXCIsIFwibWFyZXRcIiwgXCJhcHJpbFwiLCBcIm1laVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYWd1c3R1c1wiLCBcInNlcHRlbWJlclwiLCBcIm9rdG9iZXJcIiwgXCJub3ZlbWJlclwiLCBcImRlc2VtYmVyXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJQaW50YXNcIixcbiAgICAgICAgICAgIFwiY3VzdG9tLXZhbHVlc1wiOiBcIk5pbGFpIHlhbmcgZGl0ZW50dWthblwiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiWWFuZyBMYWx1XCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIk1lbmdpa3V0aVwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIlNlYmVsdW1ueWFcIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiTWluZ2d1XCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJCdWxhblwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJUYWh1blwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiU2VsYW5qdXRueWFcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwiTWluZ2d1XCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJCdWxhblwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCJUYWh1blwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJUYW5nZ2FsIGhhcnVzIGxlYmloIGRhcmkgJWQgaGFyaVwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJUYW5nZ2FsIGhhcnVzIGt1cmFuZyBkYXJpICVkIGhhcmlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiSmFyYWsgdGFuZ2dhbCBoYXJ1cyBsZWJpaCBsYW1hIGRhcmkgJWQgaGFyaVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlNpbGFrYW4gcGlsaWggdGFuZ2dhbFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJKYXJhayByZW50YW5nIHRhbmdnYWwgdGlkYWsgYm9sZWggbGViaWggbGFtYSBkYXJpICVkIGhhcmlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIlJlbnRhbmcgdGFuZ2dhbCBoYXJ1cyBhbnRhcmEgJWQgZGFuICVkIGhhcmlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiU2lsYWthbiBwaWxpaCByZW50YW5nIHRhbmdnYWxcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIldha3R1XCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCJKYW1cIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IFwiTWVuaXRcIlxuICAgICAgICB9LFxuICAgICAgICBcImF6XCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJTZcOnaWxkaTpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiIGfDvG5cIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIiBnw7xuXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwidMmZdGJpcVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCIxXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcIjJcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwiM1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCI0XCIsXG4gICAgICAgICAgICBcIndlZWstNVwiOiBcIjVcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwiNlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCI3XCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wieWFudmFyXCIsIFwiZmV2cmFsXCIsIFwibWFydFwiLCBcImFwcmVsXCIsIFwibWF5XCIsIFwiaXl1blwiLCBcIml5dWxcIiwgXCJhdnF1c3RcIiwgXCJzZW50eWFiclwiLCBcIm9rdHlhYnJcIiwgXCJub3lhYnJcIiwgXCJkZWthYnJcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIlHEsXNheW9sbGFyXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJLZcOnbWnFn1wiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCJOw7Z2YsmZdGlcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCImbmJzcDsmbmJzcDsmbmJzcDtcIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiw5ZuY8mZa2kgaMmZZnTJmVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwiw5ZuY8mZa2kgYXlcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwiw5ZuY8mZa2kgaWxcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIiZuYnNwOyZuYnNwOyZuYnNwO1wiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJOw7Z2YsmZdGkgaMmZZnTJmVwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwiTsO2dmLJmXRpIGF5XCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIk7DtnZiyZl0aSBpbFwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJUYXJpeCBhcmFsxLHEn8SxICVkIGfDvG5kyZluIMOnb3ggb2xtYW1hbMSxZMSxclwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJUYXJpeCBhcmFsxLHEn8SxICVkIGfDvG5kyZluIGF6IG9sbWFtYWzEsWTEsXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiJWQgZ8O8bmTJmW4gw6dveCBiaXIgdGFyaXggc2XDp2luXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwiVGFyaXggc2XDp2luXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbGVzc1wiOiBcIiVkIGfDvG5kyZluIGF6IGJpciB0YXJpeCBzZcOnaW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIiVkIHbJmSAlZCBnw7xuIGFyYWzEscSfxLFuZGEgdGFyaXhsyZlyIHNlw6dpblwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJUYXJpeCBhcmFsxLHEn8SxIHNlw6dpblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiYmdcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcItCY0LfQsdGA0LDQvdC+OlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCLQlNC10L1cIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcItCU0L3QuFwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcItCX0LDRgtCy0L7RgNC4XCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcItC/0L1cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwi0LLRglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCLRgdGAXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcItGH0YJcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwi0L/RglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCLRgdCxXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcItC90LRcIixcbiAgICAgICAgICAgIFwid2Vlay1udW1iZXJcIjogXCLQoVwiLFxuICAgICAgICAgICAgXCJtb250aC1uYW1lXCI6IFtcItGP0L3Rg9Cw0YDQuFwiLCBcItGE0LXQstGA0YPQsNGA0LhcIiwgXCLQvNCw0YDRglwiLCBcItCw0L/RgNC40LtcIiwgXCLQvNCw0LlcIiwgXCLRjtC90LhcIiwgXCLRjtC70LhcIiwgXCLQsNCy0LPRg9GB0YJcIiwgXCLRgdC10L/RgtC10LzQstGA0LhcIiwgXCLQvtC60YLQvtC80LLRgNC4XCIsIFwi0L3QvtC10LzQstGA0LhcIiwgXCLQtNC10LrQtdC80LLRgNC4XCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCLQn9GA0LXQutC4INC/0YrRgtC40YnQsFwiLFxuICAgICAgICAgICAgXCJjdXN0b20tdmFsdWVzXCI6IFwi0J/QtdGA0YHQvtC90LDQu9C40LfQuNGA0LDQvdC4INGB0YLQvtC50L3QvtGB0YLQuFwiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwi0JzQuNC90LDQu1wiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCLQodC70LXQtNCy0LDRiVwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcItCf0YDQtdC00LjRiNC10L1cIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwi0KHQtdC00LzQuNGG0LBcIixcbiAgICAgICAgICAgIFwicHJldi1tb250aFwiOiBcItCc0LXRgdC10YZcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwi0JPQvtC00LjQvdCwXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCLQodC70LXQtNCy0LDRiVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCLQodC10LTQvNC40YbQsFwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwi0JzQtdGB0LXRhlwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCLQk9C+0LTQuNC90LBcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwi0J/QtdGA0LjQvtC00YrRgiDQvtGCINCy0YDQtdC80LUg0L3QtSDRgtGA0Y/QsdCy0LAg0LTQsCDQtSDQv9C+0LLQtdGH0LUg0L7RgiAlZCDQtNC90LhcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwi0J/QtdGA0LjQvtC00YrRgiDQvtGCINCy0YDQtdC80LUg0L3QtSDRgtGA0Y/QsdCy0LAg0LTQsCDQtSDQv9C+LdC80LDQu9C60L4g0L7RgiAlZCDQtNC90LhcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwi0JzQvtC70Y8g0LjQt9Cx0LXRgNC10YLQtSDQv9C10YDQuNC+0LQg0L/Qvi3QtNGK0LvRitCzINC+0YIgJWQg0LTQvdC4XCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwi0JzQvtC70Y8g0LjQt9Cx0LXRgNC10YLQtSDQtNCw0YLQsFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCLQnNC+0LvRjyDQuNC30LHQtdGA0LXRgtC1INC/0LXRgNC40L7QtCDQv9C+LdC60YrRgSDQvtGCICVkINC00L3QuFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwi0JzQvtC70Y8g0LjQt9Cx0LXRgNC10YLQtSDQv9C10YDQuNC+0LQg0LzQtdC20LTRgyAlZCDQuCAlZCDQtNC90LhcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwi0JzQvtC70Y8g0LjQt9Cx0LXRgNC10YLQtSDQv9C10YDQuNC+0LRcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcItCS0YDQtdC80LVcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcItCn0LDRgVwiLFxuICAgICAgICAgICAgXCJtaW51dGVcIjogXCLQnNC40L3Rg9GC0LBcIlxuICAgICAgICB9LFxuICAgICAgICBcImNuXCI6IC8vc2ltcGxpZmllZCBjaGluZXNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCLlt7LpgInmi6k6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIuWkqVwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwi5aSpXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwi56Gu5a6aXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIuS4gFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCLkuoxcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwi5LiJXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcIuWbm1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCLkupRcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwi5YWtXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcIuaXpVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLW51bWJlclwiOiBcIuWRqFwiLFxuICAgICAgICAgICAgXCJtb250aC1uYW1lXCI6IFtcIuS4gOaciFwiLCBcIuS6jOaciFwiLCBcIuS4ieaciFwiLCBcIuWbm+aciFwiLCBcIuS6lOaciFwiLCBcIuWFreaciFwiLCBcIuS4g+aciFwiLCBcIuWFq+aciFwiLCBcIuS5neaciFwiLCBcIuWNgeaciFwiLCBcIuWNgeS4gOaciFwiLCBcIuWNgeS6jOaciFwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwi5b+r5o236YCJ5oupXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCLov4fljrtcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwi5bCG5p2lXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIuS4iuWRqFwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwi5LiK5Liq5pyIXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIuWOu+W5tFwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIuS4i+WRqFwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwi5LiL5Liq5pyIXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIuaYjuW5tFwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCLmiYDpgInml6XmnJ/ojIPlm7TkuI3og73lpKfkuo4lZOWkqVwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCLmiYDpgInml6XmnJ/ojIPlm7TkuI3og73lsI/kuo4lZOWkqVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCLor7fpgInmi6nlpKfkuo4lZOWkqeeahOaXpeacn+iMg+WbtFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCLor7fpgInmi6nlsI/kuo4lZOWkqeeahOaXpeacn+iMg+WbtFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwi6K+36YCJ5oupJWTlpKnliLAlZOWkqeeahOaXpeacn+iMg+WbtFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIuivt+mAieaLqeS4gOS4quaXpeacn1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCLor7fpgInmi6nkuIDkuKrml6XmnJ/ojIPlm7RcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIuaXtumXtFwiLFxuICAgICAgICAgICAgXCJob3VyXCI6IFwi5bCP5pe2XCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIuWIhumSn1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY3pcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcIlZ5YnLDoW5vOlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCJEZW5cIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIkRueVwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIlphdsWZw610XCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcInBvXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcIsO6dFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCJzdFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCLEjXRcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwicMOhXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcInNvXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcIm5lXCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wibGVkZW5cIiwgXCLDum5vclwiLCBcImLFmWV6ZW5cIiwgXCJkdWJlblwiLCBcImt2xJt0ZW5cIiwgXCLEjWVydmVuXCIsIFwixI1lcnZlbmVjXCIsIFwic3JwZW5cIiwgXCJ6w6HFmcOtXCIsIFwixZnDrWplblwiLCBcImxpc3RvcGFkXCIsIFwicHJvc2luZWNcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIlprcmF0a3lcIixcbiAgICAgICAgICAgIFwicGFzdFwiOiBcInBvXCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIm7DoXNsZWR1asOtY8OtXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwicMWZZWRjaG96w61cIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwidMO9ZGVuXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJtxJtzw61jXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcInJva1wiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiZGFsxaHDrVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJ0w71kZW5cIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIm3Em3PDrWNcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwicm9rXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIlJvenNhaCBkYXRhIGJ5IG5lbcSbbCBiw710IHbEm3TFocOtIG5lxb4gJWQgZG7Fr1wiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJSb3pzYWggZGF0YSBieSBuZW3Em2wgYsO9dCBtZW7FocOtIG5lxb4gJWQgZG7Fr1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCJQcm9zw61tIHp2b2x0ZSByb3pzYWggZGF0YSB2xJt0xaHDrSBuZcW+ICVkIGRuxa9cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCJQcm9zw61tIHp2b2x0ZSBkYXR1bVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJQcm9zw61tIHp2b2x0ZSByb3pzYWggZGF0YSBtZW7FocOtIG5lxb4gJWQgZG7Fr1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiUHJvc8OtbSB6dm9sdGUgcm96c2FoIGRhdGEgbWV6aSAlZCBhICVkIGRueVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJQcm9zw61tIHp2b2x0ZSByb3pzYWggZGF0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcIkF1c3dhaGw6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIlRhZ1wiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiVGFnZVwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIlNjaGxpZcOfZW5cIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwibW9cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwiZGlcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwibWlcIixcbiAgICAgICAgICAgIFwid2Vlay00XCI6IFwiZG9cIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwiZnJcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic2FcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwic29cIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJqYW51YXJcIiwgXCJmZWJydWFyXCIsIFwibcOkcnpcIiwgXCJhcHJpbFwiLCBcIm1haVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYXVndXN0XCIsIFwic2VwdGVtYmVyXCIsIFwib2t0b2JlclwiLCBcIm5vdmVtYmVyXCIsIFwiZGV6ZW1iZXJcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIlNjaG5lbGx3YWhsXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJWb3JoZXJpZ2VcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwiRm9sZ2VuZGVcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJWb3JoZXJpZ2VcIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiV29jaGVcIixcbiAgICAgICAgICAgIFwicHJldi1tb250aFwiOiBcIk1vbmF0XCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIkphaHJcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIk7DpGNoc3RlXCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIldvY2hlXCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJNb25hdFwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCJKYWhyXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkRhdHVtc2JlcmVpY2ggZGFyZiBuaWNodCBncsO2w59lciBzZWluIGFscyAlZCBUYWdlXCIsXG4gICAgICAgICAgICBcIm1vcmUtdGhhblwiOiBcIkRhdHVtc2JlcmVpY2ggZGFyZiBuaWNodCBrbGVpbmVyIHNlaW4gYWxzICVkIFRhZ2VcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiQml0dGUgbWluZGVzdGVucyAlZCBUYWdlIGF1c3fDpGhsZW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCJCaXR0ZSBlaW4gRGF0dW0gYXVzd8OkaGxlblwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJCaXR0ZSB3ZW5pZ2VyIGFscyAlZCBUYWdlIGF1c3fDpGhsZW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIkJpdHRlIGVpbmVuIERhdHVtc2JlcmVpY2ggendpc2NoZW4gJWQgdW5kICVkIFRhZ2VuIGF1c3fDpGhsZW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiQml0dGUgZWluIFN0YXJ0LSB1bmQgRW5kZGF0dW0gYXVzd8OkaGxlblwiLFxuICAgICAgICAgICAgXCJUaW1lXCI6IFwiWmVpdFwiLFxuICAgICAgICAgICAgXCJob3VyXCI6IFwiU3R1bmRlXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIk1pbnV0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXNcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcIlNlbGVjY2lvbmFkbzpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiRMOtYVwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiRMOtYXNcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCJDZXJyYXJcIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwibHVcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwibWFcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwibWlcIixcbiAgICAgICAgICAgIFwid2Vlay00XCI6IFwianVcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwidmlcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic2FcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwiZG9cIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJlbmVyb1wiLCBcImZlYnJlcm9cIiwgXCJtYXJ6b1wiLCBcImFicmlsXCIsIFwibWF5b1wiLCBcImp1bmlvXCIsIFwianVsaW9cIiwgXCJhZ29zdG9cIiwgXCJzZXB0aWVtYnJlXCIsIFwib2N0dWJyZVwiLCBcIm5vdmllbWJyZVwiLCBcImRpY2llbWJyZVwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwiQWNjZXNvcyBkaXJlY3Rvc1wiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiUGFzYWRvXCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIlNpZ3VpZW50ZVwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIkFudGVyaW9yXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIlNlbWFuYVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwiTWVzXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIkHDsW9cIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIlNpZ3VpZW50ZVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJTZW1hbmFcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIk1lc1wiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCJBw7FvXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkVsIHJhbmdvIG5vIGRlYmVyw61hIHNlciBtYXlvciBkZSAlZCBkw61hc1wiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJFbCByYW5nbyBubyBkZWJlcsOtYSBzZXIgbWVub3IgZGUgJWQgZMOtYXNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiUG9yIGZhdm9yIHNlbGVjY2lvbmEgdW4gcmFuZ28gbWF5b3IgYSAlZCBkw61hc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlBvciBmYXZvciBzZWxlY2Npb25hIHVuIGTDrWFcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiUG9yIGZhdm9yIHNlbGVjY2lvbmEgdW4gcmFuZ28gbWVub3IgYSAlZCBkw61hc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiUG9yIGZhdm9yIHNlbGVjY2lvbmEgdW4gcmFuZ28gZW50cmUgJWQgeSAlZCBkw61hc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJQb3IgZmF2b3Igc2VsZWNjaW9uYSB1biByYW5nbyBkZSBmZWNoYXMuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmclwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiU8OpbGVjdGlvbjpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiSm91clwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiSm91cnNcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCJGZXJtZXJcIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwibHVcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwibWFcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwibWVcIixcbiAgICAgICAgICAgIFwid2Vlay00XCI6IFwiamVcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwidmVcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic2FcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwiZGlcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJqYW52aWVyXCIsIFwiZsOpdnJpZXJcIiwgXCJtYXJzXCIsIFwiYXZyaWxcIiwgXCJtYWlcIiwgXCJqdWluXCIsIFwianVpbGxldFwiLCBcImFvw7t0XCIsIFwic2VwdGVtYnJlXCIsIFwib2N0b2JyZVwiLCBcIm5vdmVtYnJlXCIsIFwiZMOpY2VtYnJlXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJSYWNjb3VyY2lzXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJQYXNzw6lcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwiU3VpdmFudFwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIlByw6ljw6lkZW50XCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIlNlbWFpbmVcIixcbiAgICAgICAgICAgIFwicHJldi1tb250aFwiOiBcIk1vaXNcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwiQW5uw6llXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJTdWl2YW50XCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIlNlbWFpbmVcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIk1vaXNcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwiQW5uw6llXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkwnaW50ZXJ2YWxsZSBuZSBkb2l0IHBhcyDDqnRyZSBzdXDDqXJpZXVyZSDDoCAlZCBqb3Vyc1wiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJMJ2ludGVydmFsbGUgbmUgZG9pdCBwYXMgw6p0cmUgaW5mw6lyaWV1cmUgw6AgJWQgam91cnNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiTWVyY2kgZGUgY2hvaXNpciB1bmUgaW50ZXJ2YWxsZSBzdXDDqXJpZXVyZSDDoCAlZCBqb3Vyc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIk1lcmNpIGRlIGNob2lzaXIgdW5lIGRhdGVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiTWVyY2kgZGUgY2hvaXNpciB1bmUgaW50ZXJ2YWxsZSBpbmbDqXJpZXVyZSAlZCBqb3Vyc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiTWVyY2kgZGUgY2hvaXNpciB1bmUgaW50ZXJ2YWxsZSBjb21wcmlzZSBlbnRyZSAlZCBldCAlZCBqb3Vyc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJNZXJjaSBkZSBjaG9pc2lyIHVuZSBkYXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJodVwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiS2l2w6FsYXN6dHZhOlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCJOYXBcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIk5hcFwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIk9rXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcImhcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwia1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCJzelwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJjc1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCJwXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcInN6XCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcInZcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJqYW51w6FyXCIsIFwiZmVicnXDoXJcIiwgXCJtw6FyY2l1c1wiLCBcIsOhcHJpbGlzXCIsIFwibcOhanVzXCIsIFwiasO6bml1c1wiLCBcImrDumxpdXNcIiwgXCJhdWd1c3p0dXNcIiwgXCJzemVwdGVtYmVyXCIsIFwib2t0w7NiZXJcIiwgXCJub3ZlbWJlclwiLCBcImRlY2VtYmVyXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJHeW9yc3bDoWxhc3p0w7NcIixcbiAgICAgICAgICAgIFwicGFzdFwiOiBcIk3Dumx0XCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIkvDtnZldGtlesWRXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiRWzFkXrFkVwiLFxuICAgICAgICAgICAgXCJwcmV2LXdlZWtcIjogXCJIw6l0XCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJIw7NuYXBcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwiw4l2XCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJLw7Z2ZXRrZXrFkVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJIw6l0XCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJIw7NuYXBcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwiw4l2XCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkEga2l2w6FsYXN6dMOhcyBuZW0gbGVoZXQgdMO2YmIgJWQgbmFwbsOhbFwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJBIGtpdsOhbGFzenTDoXMgbmVtIGxlaGV0IHTDtmJiICVkIG5hcG7DoWxcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiVsOhbGFzc3oga2kgZWd5IGlkxZFzemFrb3QgYW1pIGhvc3N6YWJiIG1pbnQgJWQgbmFwXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwiVsOhbGFzc3ogZWd5IG5hcG90XCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbGVzc1wiOiBcIlbDoWxhc3N6IGtpIGVneSBpZMWRc3pha290IGFtaSByw7Z2aWRlYmIgbWludCAlZCBuYXBcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIlbDoWxhc3N6IGtpIGVneSAlZCAtICVkIG5hcCBob3NzesO6IGlkxZFzemFrb3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiVsOhbGFzc3oga2kgZWd5IGlkxZFzemFrb3RcIlxuICAgICAgICB9LFxuICAgICAgICBcIml0XCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJTZWxlemlvbmF0aTpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiR2lvcm5vXCIsXG4gICAgICAgICAgICBcImRheXNcIjogXCJHaW9ybmlcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCJDaGl1ZGlcIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwibHVcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwibWFcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwibWVcIixcbiAgICAgICAgICAgIFwid2Vlay00XCI6IFwiZ2lcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwidmVcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic2FcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwiZG9cIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJnZW5uYWlvXCIsIFwiZmViYnJhaW9cIiwgXCJtYXJ6b1wiLCBcImFwcmlsZVwiLCBcIm1hZ2dpb1wiLCBcImdpdWdub1wiLCBcImx1Z2xpb1wiLCBcImFnb3N0b1wiLCBcInNldHRlbWJyZVwiLCBcIm90dG9icmVcIiwgXCJub3ZlbWJyZVwiLCBcImRpY2VtYnJlXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJTY29yY2lhdG9pZVwiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiU2NvcnNvXCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIlN1Y2Nlc3Npdm9cIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJQcmVjZWRlbnRlXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIlNldHRpbWFuYVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwiTWVzZVwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJBbm5vXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJQcm9zc2ltb1wiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJTZXR0aW1hbmFcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIk1lc2VcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwiQW5ub1wiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJMJ2ludGVydmFsbG8gbm9uIGRldidlc3NlcmUgbWFnZ2lvcmUgZGkgJWQgZ2lvcm5pXCIsXG4gICAgICAgICAgICBcIm1vcmUtdGhhblwiOiBcIkwnaW50ZXJ2YWxsbyBub24gZGV2J2Vzc2VyZSBtaW5vcmUgZGkgJWQgZ2lvcm5pXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbW9yZVwiOiBcIlNlbGV6aW9uYSB1biBpbnRlcnZhbGxvIG1hZ2dpb3JlIGRpICVkIGdpb3JuaVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlNlbGV6aW9uYSB1bmEgZGF0YVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJTZWxlemlvbmEgdW4gaW50ZXJ2YWxsbyBtaW5vcmUgZGkgJWQgZ2lvcm5pXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtcmFuZ2VcIjogXCJTZWxlemlvbmEgdW4gaW50ZXJ2YWxsbyBjb21wcmVzbyB0cmEgaSAlZCBlIGkgJWQgZ2lvcm5pXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIlNlbGV6aW9uYSB1biBpbnRlcnZhbGxvIGRpIGRhdGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImtvXCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCLquLDqsIQ6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIuydvFwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwi7J286rCEXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwi64ur6riwXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIuyblFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCLtmZRcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwi7IiYXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcIuuqqVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCLquIhcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwi7YagXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcIuydvFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLW51bWJlclwiOiBcIuyjvFwiLFxuICAgICAgICAgICAgXCJtb250aC1uYW1lXCI6IFtcIjHsm5RcIiwgXCIy7JuUXCIsIFwiM+yblFwiLCBcIjTsm5RcIiwgXCI17JuUXCIsIFwiNuyblFwiLCBcIjfsm5RcIiwgXCI47JuUXCIsIFwiOeyblFwiLCBcIjEw7JuUXCIsIFwiMTHsm5RcIiwgXCIxMuyblFwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwi64uo7LaV7YKk65OkXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCLsp4Drgpwo7Jik64qY6riw7KSAKVwiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCLsnbTtm4Qo7Jik64qY6riw7KSAKVwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIuydtOyghFwiLFxuICAgICAgICAgICAgXCJwcmV2LXdlZWtcIjogXCIx7KO8XCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCIx64usXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIjHrhYRcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIuuLpOydjFwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCIx7KO8XCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCIx64usXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIjHrhYRcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwi64Kg7KecIOuylOychOuKlCAlZCDsnbzrs7Tri6Qg66eO7J2EIOyImCDsl4bsirXri4jri6RcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwi64Kg7KecIOuylOychOuKlCAlZCDsnbzrs7Tri6Qg7J6R7J2EIOyImCDsl4bsirXri4jri6RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwi64Kg7KecIOuylOychOulvCAlZCDsnbzrs7Tri6Qg6ri46rKMIOyEoO2Dne2VtCDso7zshLjsmpRcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCLrgqDsp5zrpbwg7ISg7YOd7ZW0IOyjvOyEuOyalFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCIlZCDsnbzrs7Tri6Qg7J6R7J2AIOuCoOynnOulvCDshKDtg53tlbQg7KO87IS47JqUXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtcmFuZ2VcIjogXCIlZOyZgCAlZCDsnbwg7IKs7J207J2YIOuCoOynnCDrspTsnITrpbwg7ISg7YOd7ZW0IOyjvOyEuOyalFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCLrgqDsp5wg67KU7JyE66W8IOyEoO2Dne2VtCDso7zshLjsmpRcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIuyLnOqwgVwiLFxuICAgICAgICAgICAgXCJob3VyXCI6IFwi7IucXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIuu2hFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9cIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcIlZhbGd0OlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCJEYWdcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIkRhZ2VyXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwiTHVra1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCJtYVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCJ0aVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCJvblwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJ0b1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCJmclwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCJsw7hcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwic8O4XCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFudWFyXCIsIFwiZmVicnVhclwiLCBcIm1hcnNcIiwgXCJhcHJpbFwiLCBcIm1haVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYXVndXN0XCIsIFwic2VwdGVtYmVyXCIsIFwib2t0b2JlclwiLCBcIm5vdmVtYmVyXCIsIFwiZGVzZW1iZXJcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIlNuYXJ2ZWllclwiLFxuICAgICAgICAgICAgXCJjdXN0b20tdmFsdWVzXCI6IFwiRWdlbmRlZmluZXJ0ZSBWZXJkaWVyXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJPdmVyXCIsIC8vIE5vdCBxdWl0ZSBzdXJlIGFib3V0IHRoZSBjb250ZXh0IG9mIHRoaXMgb25lXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIkbDuGxnZXJcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJGb3JyaWdlXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIlVrZVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwiTcOlbmVkXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIsOFclwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiTmVzdGVcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwiVWtlXCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJNw6VuZWRcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwiw4VyXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkRhdG9wZXJpb2RlbiBza2FsIGlra2plIHbDpnJlIGxlbmdyZSBlbm4gJWQgZGFnZXJcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwiRGF0b3BlcmlvZGVuIHNrYWwgaWtramUgdsOmcmUga29ydGVyZSBlbm4gJWQgZGFnZXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiVmVubmxpZ3N0IHZlbGcgZWluIGRhdG9wZXJpb2RlIGxlbmdyZSBlbm4gJWQgZGFnZXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCJWZW5ubGlnc3QgdmVsZyBlaW4gZGF0b1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJWZW5ubGlnc3QgdmVsZyBlaW4gZGF0b3BlcmlvZGUgbWluZHJlIGVubiAlZCBkYWdlclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiVmVubmxpZ3N0IHZlbGcgZWluIGRhdG9wZXJpb2RlIG1lbGxvbSAlZCBvZyAlZCBkYWdlclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJWZW5ubGlnc3QgdmVsZyBlaW4gZGF0b3BlcmlvZGVcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIlRpZFwiLFxuICAgICAgICAgICAgXCJob3VyXCI6IFwiVGltZVwiLFxuICAgICAgICAgICAgXCJtaW51dGVcIjogXCJNaW51dHRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmxcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcIkdlc2VsZWN0ZWVyZDpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiRGFnXCIsXG4gICAgICAgICAgICBcImRheXNcIjogXCJEYWdlblwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIk9rXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIm1hXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcImRpXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcIndvXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcImRvXCIsXG4gICAgICAgICAgICBcIndlZWstNVwiOiBcInZyXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcInphXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcInpvXCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFudWFyaVwiLCBcImZlYnJ1YXJpXCIsIFwibWFhcnRcIiwgXCJhcHJpbFwiLCBcIm1laVwiLCBcImp1bmlcIiwgXCJqdWxpXCIsIFwiYXVndXN0dXNcIiwgXCJzZXB0ZW1iZXJcIiwgXCJva3RvYmVyXCIsIFwibm92ZW1iZXJcIiwgXCJkZWNlbWJlclwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwiU25lbGtvcHBlbGluZ2VuXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJBYW5nZXBhc3RlIHdhYXJkZW5cIixcbiAgICAgICAgICAgIFwicGFzdFwiOiBcIlZlcmxlZGVuXCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIktvbWVuZFwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIlZvcmlnZVwiLFxuICAgICAgICAgICAgXCJwcmV2LXdlZWtcIjogXCJXZWVrXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJNYWFuZFwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJKYWFyXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJWb2xnZW5kZVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJXZWVrXCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJNYWFuZFwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCJKYWFyXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIkludGVydmFsIG1vZXQgbGFuZ2VyIGRhbiAlZCBkYWdlbiB6aWpuXCIsXG4gICAgICAgICAgICBcIm1vcmUtdGhhblwiOiBcIkludGVydmFsIG1hZyBuaWV0IG1pbmRlciBkYW4gJWQgZGFnZW4gemlqblwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCJTZWxlY3RlZXIgZWVuIGludGVydmFsIGxhbmdlciBkYW4gJWRhZ2VuXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwiU2VsZWN0ZWVyIGVlbiBkYXR1bVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJTZWxlY3RlZXIgZWVuIGludGVydmFsIG1pbmRlciBkYW4gJWQgZGFnZW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIlNlbGVjdGVlciBlZW4gaW50ZXJ2YWwgdHVzc2VuICVkIGVuICVkIGRhZ2VuXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIlNlbGVjdGVlciBlZW4gaW50ZXJ2YWxcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIlRpamRcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcIlV1clwiLFxuICAgICAgICAgICAgXCJtaW51dGVcIjogXCJNaW51dXRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJ1XCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCLQktGL0LHRgNCw0L3QvjpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwi0JTQtdC90YxcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcItCU0L3QtdC5XCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwi0J/RgNC40LzQtdC90LjRgtGMXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcItC/0L1cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwi0LLRglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCLRgdGAXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcItGH0YJcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwi0L/RglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCLRgdCxXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcItCy0YFcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCLRj9C90LLQsNGA0YxcIiwgXCLRhNC10LLRgNCw0LvRjFwiLCBcItC80LDRgNGCXCIsIFwi0LDQv9GA0LXQu9GMXCIsIFwi0LzQsNC5XCIsIFwi0LjRjtC90YxcIiwgXCLQuNGO0LvRjFwiLCBcItCw0LLQs9GD0YHRglwiLCBcItGB0LXQvdGC0Y/QsdGA0YxcIiwgXCLQvtC60YLRj9Cx0YDRjFwiLCBcItC90L7Rj9Cx0YDRjFwiLCBcItC00LXQutCw0LHRgNGMXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCLQkdGL0YHRgtGA0YvQuSDQstGL0LHQvtGAXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCLQn9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQtSDQt9C90LDRh9C10L3QuNGPXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCLQn9GA0L7RiNC10LTRiNC40LVcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwi0KHQu9C10LTRg9GO0YnQuNC1XCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcItCd0LXQtNC10LvRj1wiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwi0JzQtdGB0Y/RhlwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCLQk9C+0LRcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIiZuYnNwOyZuYnNwOyZuYnNwO1wiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCLQndC10LTQtdC70Y9cIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcItCc0LXRgdGP0YZcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwi0JPQvtC0XCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcItCU0LjQsNC/0LDQt9C+0L0g0L3QtSDQvNC+0LbQtdGCINCx0YvRgtGMINCx0L7Qu9GM0YjQtSAlZCDQtNC90LXQuVwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCLQlNC40LDQv9Cw0LfQvtC9INC90LUg0LzQvtC20LXRgiDQsdGL0YLRjCDQvNC10L3RjNGI0LUgJWQg0LTQvdC10LlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAg0LLRi9Cx0LXRgNC40YLQtSDQtNC40LDQv9Cw0LfQvtC9INCx0L7Qu9GM0YjQtSAlZCDQtNC90LXQuVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcItCf0L7QttCw0LvRg9C50YHRgtCwINCy0YvQsdC10YDQuNGC0LUg0LTQsNGC0YNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAg0LLRi9Cx0LXRgNC40YLQtSDQtNC40LDQv9Cw0LfQvtC9INC80LXQvdGM0YjQtSAlZCDQtNC90LXQuVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAg0LLRi9Cx0LXRgNC40YLQtSDQtNC40LDQv9Cw0LfQvtC9INC80LXQttC00YMgJWQg0LggJWQg0LTQvdGP0LzQuFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCLQn9C+0LbQsNC70YPQudGB0YLQsCDQstGL0LHQtdGA0LjRgtC1INC00LjQsNC/0LDQt9C+0L1cIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcItCS0YDQtdC80Y9cIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcItCn0LDRgdGLXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcItCc0LjQvdGD0YLRi1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidWtcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBcItCS0LjQsdGA0LDQvdC+OlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCLQlNC10L3RjFwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwi0JTQvdGW0LJcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCLQl9Cw0YHRgtC+0YHRg9Cy0LDRgtC4XCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcItC/0L1cIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwi0LLRglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCLRgdGAXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcItGH0YJcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwi0L/RglwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCLRgdCxXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcItC90LRcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCLRgdGW0YfQtdC90YxcIiwgXCLQu9GO0YLQuNC5XCIsIFwi0LHQtdGA0LXQt9C10L3RjFwiLCBcItC60LLRltGC0LXQvdGMXCIsIFwi0YLRgNCw0LLQtdC90YxcIiwgXCLRh9C10YDQstC10L3RjFwiLCBcItC70LjQv9C10L3RjFwiLCBcItGB0LXRgNC/0LXQvdGMXCIsIFwi0LLQtdGA0LXRgdC10L3RjFwiLCBcItC20L7QstGC0LXQvdGMXCIsIFwi0LvQuNGB0YLQvtC/0LDQtFwiLCBcItCz0YDRg9C00LXQvdGMXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCLQqNCy0LjQtNC60LjQuSDQstC40LHRltGAXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCLQl9C90LDRh9C10L3QvdGPINC60L7RgNC40YHRgtGD0LLQsNGH0LBcIixcbiAgICAgICAgICAgIFwicGFzdFwiOiBcItCc0LjQvdGD0LvRllwiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCLQndCw0YHRgtGD0L/QvdGWXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcItCi0LjQttC00LXQvdGMXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCLQnNGW0YHRj9GG0YxcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwi0KDRltC6XCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCImbmJzcDsmbmJzcDsmbmJzcDtcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwi0KLQuNC20LTQtdC90YxcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcItCc0ZbRgdGP0YbRjFwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCLQoNGW0LpcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwi0JTRltCw0L/QsNC30L7QvSDQvdC1INC80L7QttC1INCx0YPRgtC4INCx0ZbQu9GM0Ygg0L3RltC2ICVkINC00L3RltCyXCIsXG4gICAgICAgICAgICBcIm1vcmUtdGhhblwiOiBcItCU0ZbQsNC/0LDQt9C+0L0g0L3QtSDQvNC+0LbQtSDQsdGD0YLQuCDQvNC10L3RjNGIINC90ZbQtiAlZCDQtNC90ZbQslwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCLQkdGD0LTRjCDQu9Cw0YHQutCwINCy0LjQsdC10YDRltGC0Ywg0LTRltCw0L/QsNC30L7QvSDQsdGW0LvRjNGI0LUgJWQg0LTQvdGW0LJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCLQkdGD0LTRjCDQu9Cw0YHQutCwINCy0LjQsdC10YDRltGC0Ywg0LTQsNGC0YNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwi0JHRg9C00Ywg0LvQsNGB0LrQsCDQstC40LHQtdGA0ZbRgtGMINC00ZbQsNC/0LDQt9C+0L0g0LzQtdC90YjQtSAlZCDQtNC90ZbQslwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwi0JHRg9C00Ywg0LvQsNGB0LrQsCDQstC40LHQtdGA0ZbRgtGMINC00ZbQsNC/0LDQt9C+0L0g0LzRltC2ICVkINGC0LAgJWQg0LTQvdGP0LzQuFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCLQkdGD0LTRjCDQu9Cw0YHQutCwINCy0LjQsdC10YDRltGC0Ywg0LTRltCw0L/QsNC30L7QvVwiLFxuICAgICAgICAgICAgXCJ0aW1lXCI6IFwi0KfQsNGBXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCLQk9C+0LTQuNC90LhcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IFwi0KXQstC40LvQuNC90LhcIlxuICAgICAgICB9LFxuICAgICAgICBcInBsXCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJXeWJyYW55OlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCJEemllxYRcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIkRuaVwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIlphbWtuaWpcIixcbiAgICAgICAgICAgIFwid2Vlay0xXCI6IFwicG9uXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcInd0XCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcIsWbclwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJjendcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwicHRcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwic29cIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwibmRcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJzdHljemXFhFwiLCBcImx1dHlcIiwgXCJtYXJ6ZWNcIiwgXCJrd2llY2llxYRcIiwgXCJtYWpcIiwgXCJjemVyd2llY1wiLCBcImxpcGllY1wiLCBcInNpZXJwaWXFhFwiLCBcIndyemVzaWXFhFwiLCBcInBhxbpkemllcm5pa1wiLCBcImxpc3RvcGFkXCIsIFwiZ3J1ZHppZcWEXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJTa3LDs3R5XCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJOaWVzdGFuZGFyZG93ZSB3YXJ0b8WbY2lcIixcbiAgICAgICAgICAgIFwicGFzdFwiOiBcIlByemVzesWCZVwiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCJOYXN0xJlwbmVcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJQb3ByemVkbmllXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcInR5ZHppZcWEXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJtaWVzacSFY1wiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJyb2tcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIk5hc3TEmXBueVwiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCJ0eWR6aWXFhFwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwibWllc2nEhWNcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwicm9rXCIsXG4gICAgICAgICAgICBcImxlc3MtdGhhblwiOiBcIk9rcmVzIG5pZSBwb3dpbmllbiBiecSHIGTFgnXFvHN6eSBuacW8ICVkIGRuaVwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJPa3JlcyBuaWUgcG93aW5pZW4gYnnEhyBrcsOzdHN6eSBuacW8ICAlZCBuaVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCJXeWJpZXJ6IG9rcmVzIGTFgnXFvHN6eSBuacW8ICVkIGRuaVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIld5YmllcnogZGF0xJlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiV3liaWVyeiBva3JlcyBrcsOzdHN6eSBuacW8ICVkIGRuaVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiV3liaWVyeiBva3JlcyB0cndhasSFY3kgb2QgJWQgZG8gJWQgZG5pXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIld5Ymllcnogb2tyZXNcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIkN6YXNcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcIkdvZHppbmFcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IFwiTWludXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZVwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiVmFsZDpcIixcbiAgICAgICAgICAgIFwiZGF5XCI6IFwiZGFnXCIsXG4gICAgICAgICAgICBcImRheXNcIjogXCJkYWdhclwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcImdvZGvDpG5uXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIm1hXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcInRpXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcIm9uXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcInRvXCIsXG4gICAgICAgICAgICBcIndlZWstNVwiOiBcImZyXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcImzDtlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCJzw7ZcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJqYW51YXJpXCIsIFwiZmVicnVhcmlcIiwgXCJtYXJzXCIsIFwiYXByaWxcIiwgXCJtYWpcIiwgXCJqdW5pXCIsIFwianVsaVwiLCBcImF1Z3VzdGlcIiwgXCJzZXB0ZW1iZXJcIiwgXCJva3RvYmVyXCIsIFwibm92ZW1iZXJcIiwgXCJkZWNlbWJlclwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwiZ2VudsOkZ2FyXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJBbnBhc3NhZGUgdsOkcmRlblwiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiw7Z2ZXJcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwiZsO2bGphbmRlXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiZsO2cnJhXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcInZlY2thXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJtw6VuYWRcIixcbiAgICAgICAgICAgIFwicHJldi15ZWFyXCI6IFwiw6VyXCIsXG4gICAgICAgICAgICBcIm5leHRcIjogXCJuw6RzdGFcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwidmVja2FcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIm3DpW5lZFwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCLDpXJcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwiRGF0dW1pbnRlcnZhbGwgYsO2ciBpbnRlIHZhcmEgbWluZHJlIMOkbiAlZCBkYWdhclwiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJEYXR1bWludGVydmFsbCBiw7ZyIGludGUgdmFyYSBtZXIgw6RuICVkIGRhZ2FyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbW9yZVwiOiBcIlbDpGxqIGV0dCBkYXR1bWludGVydmFsbCBsw6RuZ3JlIMOkbiAlZCBkYWdhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlbDpGxqIGV0dCBkYXR1bVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWxlc3NcIjogXCJWw6RsaiBldHQgZGF0dW1pbnRlcnZhbGwgbWluZHJlIMOkbiAlZCBkYWdhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiVsOkbGogZXR0IGRhdHVtaW50ZXJ2YWxsIG1lbGxhbiAlZCBvY2ggJWQgZGFnYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiVsOkbGogZXR0IGRhdHVtaW50ZXJ2YWxsXCIsXG4gICAgICAgICAgICBcInRpbWVcIjogXCJ0aWRcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcInRpbW1lXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIm1pbnV0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwdFwiOiAvL1BvcnR1Z3Vlc2UgKEV1cm9wZWFuKVxuICAgICAgICB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiU2VsZWNpb25hZG86XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIkRpYVwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiRGlhc1wiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIkZlY2hhclwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCJzZWdcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwidGVyXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcInF1YVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJxdWlcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwic2V4XCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcInNhYlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCJkb21cIixcbiAgICAgICAgICAgIFwid2Vlay1udW1iZXJcIjogXCJOXCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFuZWlyb1wiLCBcImZldmVyZWlyb1wiLCBcIm1hcsOnb1wiLCBcImFicmlsXCIsIFwibWFpb1wiLCBcImp1bmhvXCIsIFwianVsaG9cIiwgXCJhZ29zdG9cIiwgXCJzZXRlbWJyb1wiLCBcIm91dHVicm9cIiwgXCJub3ZlbWJyb1wiLCBcImRlemVtYnJvXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJBdGFsaG9zXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJWYWxvcmVzIFBlcnNvbmFsaXphZG9zXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJQYXNzYWRvXCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIlNlZ3VpbnRlXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiQW50ZXJpb3JcIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiU2VtYW5hXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJNw6pzXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIkFub1wiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiUHLDs3hpbW9cIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwiUHLDs3hpbWEgU2VtYW5hXCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJQcsOzeGltbyBNw6pzXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIlByw7N4aW1vIEFub1wiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJPIHBlcsOtb2RvIHNlbGVjaW9uYWRvIG7Do28gZGV2ZSBzZXIgbWFpb3IgcXVlICVkIGRpYXNcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwiTyBwZXLDrW9kbyBzZWxlY2lvbmFkbyBuw6NvIGRldmUgc2VyIG1lbm9yIHF1ZSAlZCBkaWFzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbW9yZVwiOiBcIlNlbGVjaW9uZSB1bSBwZXLDrW9kbyBzdXBlcmlvciBhICVkIGRpYXNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCJTZWxlY2lvbmUgdW1hIGRhdGFcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiU2VsZWNpb25lIHVtIHBlcsOtb2RvIGluZmVyaW9yIGEgJWQgZGlhc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiU2VsZWNpb25lIHVtIHBlcsOtb2RvIGRlICVkIGEgJWQgZGlhc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LWRlZmF1bHRcIjogXCJTZWxlY2lvbmUgdW0gcGVyw61vZG9cIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIlRlbXBvXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCJIb3JhXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIk1pbnV0b1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGNcIjogLy8gdHJhZGl0aW9uYWwgY2hpbmVzZVxuICAgICAgICB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwi5bey6YG45pOHOlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCLlpKlcIixcbiAgICAgICAgICAgIFwiZGF5c1wiOiBcIuWkqVwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIueiuuWumlwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCLkuIBcIixcbiAgICAgICAgICAgIFwid2Vlay0yXCI6IFwi5LqMXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcIuS4iVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCLlm5tcIixcbiAgICAgICAgICAgIFwid2Vlay01XCI6IFwi5LqUXCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcIuWFrVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCLml6VcIixcbiAgICAgICAgICAgIFwid2Vlay1udW1iZXJcIjogXCLlkahcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCLkuIDmnIhcIiwgXCLkuozmnIhcIiwgXCLkuInmnIhcIiwgXCLlm5vmnIhcIiwgXCLkupTmnIhcIiwgXCLlha3mnIhcIiwgXCLkuIPmnIhcIiwgXCLlhavmnIhcIiwgXCLkuZ3mnIhcIiwgXCLljYHmnIhcIiwgXCLljYHkuIDmnIhcIiwgXCLljYHkuozmnIhcIl0sXG4gICAgICAgICAgICBcInNob3J0Y3V0c1wiOiBcIuW/q+mAn+mBuOaTh1wiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwi6YGO5Y67XCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIuWwh+S+hlwiLFxuICAgICAgICAgICAgXCJwcmV2aW91c1wiOiBcIiZuYnNwOyZuYnNwOyZuYnNwO1wiLFxuICAgICAgICAgICAgXCJwcmV2LXdlZWtcIjogXCLkuIrpgLFcIixcbiAgICAgICAgICAgIFwicHJldi1tb250aFwiOiBcIuS4iuWAi+aciFwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCLljrvlubRcIixcbiAgICAgICAgICAgIFwibmV4dFwiOiBcIiZuYnNwOyZuYnNwOyZuYnNwO1wiLFxuICAgICAgICAgICAgXCJuZXh0LXdlZWtcIjogXCLkuIvlkahcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIuS4i+WAi+aciFwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCLmmI7lubRcIixcbiAgICAgICAgICAgIFwibGVzcy10aGFuXCI6IFwi5omA6YG45pel5pyf56+E5ZyN5LiN6IO95aSn5pa8JWTlpKlcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwi5omA6YG45pel5pyf56+E5ZyN5LiN6IO95bCP5pa8JWTlpKlcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwi6KuL6YG45pOH5aSn5pa8JWTlpKnnmoTml6XmnJ/nr4TlnI1cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwi6KuL6YG45pOH5bCP5pa8JWTlpKnnmoTml6XmnJ/nr4TlnI1cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1yYW5nZVwiOiBcIuiri+mBuOaThyVk5aSp5YiwJWTlpKnnmoTml6XmnJ/nr4TlnI1cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1zaW5nbGVcIjogXCLoq4vpgbjmk4fkuIDlgIvml6XmnJ9cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwi6KuL6YG45pOH5LiA5YCL5pel5pyf56+E5ZyNXCIsXG4gICAgICAgICAgICBcInRpbWVcIjogXCLml6XmnJ9cIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcIuWwj+aZglwiLFxuICAgICAgICAgICAgXCJtaW51dGVcIjogXCLliIbpkJhcIlxuICAgICAgICB9LFxuICAgICAgICBcImphXCI6IHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCLpgbjmip7jgZfjgb7jgZfjgZ86XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIuaXpVwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwi5pel44CFXCIsXG4gICAgICAgICAgICBcImFwcGx5XCI6IFwi6ZaJ44GY44KLXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIuaciFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCLngatcIixcbiAgICAgICAgICAgIFwid2Vlay0zXCI6IFwi5rC0XCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcIuacqFwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCLph5FcIixcbiAgICAgICAgICAgIFwid2Vlay02XCI6IFwi5ZyfXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcIuaXpVwiLFxuICAgICAgICAgICAgXCJtb250aC1uYW1lXCI6IFtcIjHmnIhcIiwgXCIy5pyIXCIsIFwiM+aciFwiLCBcIjTmnIhcIiwgXCI15pyIXCIsIFwiNuaciFwiLCBcIjfmnIhcIiwgXCI45pyIXCIsIFwiOeaciFwiLCBcIjEw5pyIXCIsIFwiMTHmnIhcIiwgXCIxMuaciFwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwi44Kv44Kk44OD44Kv6YG45oqeXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCLpgY7ljrtcIixcbiAgICAgICAgICAgIFwiZm9sbG93aW5nXCI6IFwi5bCG5p2lXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcIuWFiOmAseOAgVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwi5YWI5pyIXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIuaYqOW5tFwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7XCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIuadpemAsVwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwi5p2l5pyIXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIuadpeW5tFwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCLml6Xku5jjga7nr4Tlm7Ljga8g77yFZCDml6Xku6XkuIrjgavjgZnjgbnjgY3jgafjga/jgYLjgorjgb7jgZvjgpNcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwi5pel5LuY44Gu56+E5Zuy44GvIO+8hWQg5pel44KS5LiL5Zue44Gj44Gm44Gv44GE44GR44G+44Gb44KTXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbW9yZVwiOiBcIu+8hWQg5pel44KI44KK44KC6ZW344GE5pyf6ZaT44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbGVzc1wiOiBcIu+8hWQg5pel5pyq5rqA44Gu5pyf6ZaT44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtcmFuZ2VcIjogXCLvvIVkIOOBqO+8hSBk5pel44Gu6ZaT44Gu5pel5LuY56+E5Zuy44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwi5pel5LuY44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIuaXpeS7mOevhOWbsuOCkumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICAgICAgXCJ0aW1lXCI6IFwi5pmC6ZaTXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCLmmYLplpNcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IFwi5YiGXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkYVwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IFwiVmFsZ3Q6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIkRhZ1wiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiRGFnZVwiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIkx1a1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCJtYVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCJ0aVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCJvblwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJ0b1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCJmclwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCJsw7ZcIixcbiAgICAgICAgICAgIFwid2Vlay03XCI6IFwic8O2XCIsXG4gICAgICAgICAgICBcIm1vbnRoLW5hbWVcIjogW1wiamFudWFyXCIsIFwiZmVicnVhclwiLCBcIm1hcnRzXCIsIFwiYXByaWxcIiwgXCJtYWpcIiwgXCJqdW5pXCIsIFwianVsaVwiLCBcImF1Z3VzdFwiLCBcInNlcHRlbWJlclwiLCBcIm9rdG9iZXJcIiwgXCJub3ZlbWJlclwiLCBcImRlY2VtYmVyXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJnZW52ZWplXCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJCcnVnZXJkZWZpbmVyZWRlIHbDpnJkaWVyXCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJGb3JiaVwiLFxuICAgICAgICAgICAgXCJmb2xsb3dpbmdcIjogXCJGw7hsZ2VuZGVcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJGb3JyaWdlXCIsXG4gICAgICAgICAgICBcInByZXYtd2Vla1wiOiBcInVnZVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwibcOlbmFkXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIsOlclwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiTsOmc3RlXCIsXG4gICAgICAgICAgICBcIm5leHQtd2Vla1wiOiBcIk7DpnN0ZSB1Z2VcIixcbiAgICAgICAgICAgIFwibmV4dC1tb250aFwiOiBcIk7DpnN0ZSBtw6VuZWRcIixcbiAgICAgICAgICAgIFwibmV4dC15ZWFyXCI6IFwiTsOmc3RlIMOlclwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJEYXRvIGludGVydmFsIGLDuHIgaWtrZSB2w6ZyZSBtZWQgZW5kICVkIGRhZ2VcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwiRGF0byBpbnRlcnZhbCBiw7hyIGlra2UgdsOmcmUgbWluZHJlIGVuZCAlZCBkYWdlXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbW9yZVwiOiBcIlbDpmxnIGRhdG9pbnRlcnZhbCBsw6ZuZ2VyZSBlbmQgJWQgZGFnZVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlbDpmxnIGRhdG9cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiVsOmbGcgZGF0b2ludGVydmFsIG1pbmRyZSBlbmQgJWQgZGFnZVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXJhbmdlXCI6IFwiVsOmbGcgZGF0b2ludGVydmFsIG1lbGxlbSAlZCBvZyAlZCBkYWdlXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIlbDpmxnIGRhdG9pbnRlcnZhbFwiLFxuICAgICAgICAgICAgXCJ0aW1lXCI6IFwidGlkXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCJ0aW1lXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIm1pbnV0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmaVwiOiAvLyBGaW5uaXNoXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJWYWxpdHR1OlwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCJQw6RpdsOkXCIsXG4gICAgICAgICAgICBcImRheXNcIjogXCJQw6RpdsOkw6RcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIjogXCJTdWxqZVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTFcIjogXCJtYVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTJcIjogXCJ0aVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTNcIjogXCJrZVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTRcIjogXCJ0b1wiLFxuICAgICAgICAgICAgXCJ3ZWVrLTVcIjogXCJwZVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTZcIjogXCJsYVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLTdcIjogXCJzdVwiLFxuICAgICAgICAgICAgXCJ3ZWVrLW51bWJlclwiOiBcIlZcIixcbiAgICAgICAgICAgIFwibW9udGgtbmFtZVwiOiBbXCJ0YW1taWt1dVwiLCBcImhlbG1pa3V1XCIsIFwibWFhbGlza3V1XCIsIFwiaHVodGlrdXVcIiwgXCJ0b3Vrb2t1dVwiLCBcImtlc8Oka3V1XCIsIFwiaGVpbsOka3V1XCIsIFwiZWxva3V1XCIsIFwic3l5c2t1dVwiLCBcImxva2FrdXVcIiwgXCJtYXJyYXNrdXVcIiwgXCJqb3VsdWt1dVwiXSxcbiAgICAgICAgICAgIFwic2hvcnRjdXRzXCI6IFwiUGlrYXZhbGlubmF0XCIsXG4gICAgICAgICAgICBcImN1c3RvbS12YWx1ZXNcIjogXCJNdWthdXRldHV0IEFydm90XCIsXG4gICAgICAgICAgICBcInBhc3RcIjogXCJNZW5uZWV0XCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIlR1bGV2YXRcIixcbiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJFZGVsbGluZW5cIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiVmlpa2tvXCIsXG4gICAgICAgICAgICBcInByZXYtbW9udGhcIjogXCJLdXVrYXVzaVwiLFxuICAgICAgICAgICAgXCJwcmV2LXllYXJcIjogXCJWdW9zaVwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiU2V1cmFhdmFcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwiVmlpa2tvXCIsXG4gICAgICAgICAgICBcIm5leHQtbW9udGhcIjogXCJLdXVrYXVzaVwiLFxuICAgICAgICAgICAgXCJuZXh0LXllYXJcIjogXCJWdW9zaVwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJBaWthamFrc29uIHR1bGlzaSBvbGxhIHbDpGhlbW3DpG4ga3VpbiAlZCBww6RpdsOkw6RcIixcbiAgICAgICAgICAgIFwibW9yZS10aGFuXCI6IFwiQWlrYWpha3NvbiBlaSB0dWxpc2kgb2xsYSB2w6RoZW1ww6TDpCBrdWluICVkIHDDpGl2w6TDpFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LW1vcmVcIjogXCJWYWxpdHNlIHBpZGVtcGkgYWlrYWpha3NvIGt1aW4gJWQgcMOkaXbDpMOkXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtc2luZ2xlXCI6IFwiVmFsaXRzZSBww6RpdsOkXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtbGVzc1wiOiBcIlZhbGl0c2UgbHloeWVtcGkgYWlrYWpha3NvIGt1aW4gJWQgcMOkaXbDpMOkXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtcmFuZ2VcIjogXCJWYWxpdHNlIGFpa2FqYWtzbyAlZCBqYSAlZCBww6RpdsOkbiB2w6RsaWx0w6RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1kZWZhdWx0XCI6IFwiVmFsaXRzZSBhaWthamFrc29cIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIkFpa2FcIixcbiAgICAgICAgICAgIFwiaG91clwiOiBcIlR1bnRpXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIk1pbnV1dHRpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjYXRcIjogLy8gQ2F0YWxhXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogXCJTZWxlY2Npb25hdHM6XCIsXG4gICAgICAgICAgICBcImRheVwiOiBcIkRpYVwiLFxuICAgICAgICAgICAgXCJkYXlzXCI6IFwiRGllc1wiLFxuICAgICAgICAgICAgXCJhcHBseVwiOiBcIlRhbmNhXCIsXG4gICAgICAgICAgICBcIndlZWstMVwiOiBcIkRsXCIsXG4gICAgICAgICAgICBcIndlZWstMlwiOiBcIkRtXCIsXG4gICAgICAgICAgICBcIndlZWstM1wiOiBcIkRjXCIsXG4gICAgICAgICAgICBcIndlZWstNFwiOiBcIkRqXCIsXG4gICAgICAgICAgICBcIndlZWstNVwiOiBcIkR2XCIsXG4gICAgICAgICAgICBcIndlZWstNlwiOiBcIkRzXCIsXG4gICAgICAgICAgICBcIndlZWstN1wiOiBcIkRnXCIsXG4gICAgICAgICAgICBcIndlZWstbnVtYmVyXCI6IFwiU1wiLFxuICAgICAgICAgICAgXCJtb250aC1uYW1lXCI6IFtcImdlbmVyXCIsIFwiZmVicmVyXCIsIFwibWFyw6dcIiwgXCJhYnJpbFwiLCBcIm1haWdcIiwgXCJqdW55XCIsIFwianVsaW9sXCIsIFwiYWdvc3RcIiwgXCJzZXRlbWJyZVwiLCBcIm9jdHVicmVcIiwgXCJub3ZlbWJyZVwiLCBcImRlc2VtYnJlXCJdLFxuICAgICAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJEcmXDp2VyZXNcIixcbiAgICAgICAgICAgIFwiY3VzdG9tLXZhbHVlc1wiOiBcIlZhbG9ycyBwZXJzb25hbGl0emF0c1wiLFxuICAgICAgICAgICAgXCJwYXN0XCI6IFwiUGFzc2F0XCIsXG4gICAgICAgICAgICBcImZvbGxvd2luZ1wiOiBcIkZ1dHVyXCIsXG4gICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiQW50ZXJpb3JcIixcbiAgICAgICAgICAgIFwicHJldi13ZWVrXCI6IFwiU2V0bWFuYVwiLFxuICAgICAgICAgICAgXCJwcmV2LW1vbnRoXCI6IFwiTWVzXCIsXG4gICAgICAgICAgICBcInByZXYteWVhclwiOiBcIkFueVwiLFxuICAgICAgICAgICAgXCJuZXh0XCI6IFwiU2Vnw7xlbnRcIixcbiAgICAgICAgICAgIFwibmV4dC13ZWVrXCI6IFwiU2V0bWFuYVwiLFxuICAgICAgICAgICAgXCJuZXh0LW1vbnRoXCI6IFwiTWVzXCIsXG4gICAgICAgICAgICBcIm5leHQteWVhclwiOiBcIkFueVwiLFxuICAgICAgICAgICAgXCJsZXNzLXRoYW5cIjogXCJFbCBwZXLDrW9kZSBubyBoYXVyaWEgZGUgc2VyIGRlIG3DqXMgZGUgJWQgZGllc1wiLFxuICAgICAgICAgICAgXCJtb3JlLXRoYW5cIjogXCJFbCBwZXLDrW9kZSBubyBoYXVyaWEgZGUgc2VyIGRlIG1lbnlzIGRlICVkIGRpZXNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1tb3JlXCI6IFwiUGVyZmF2b3Igc2VsZWNjaW9uYSB1biBwZXLDrW9kZSBtw6lzIGdyYW4gZGUgJWQgZGllc1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNpbmdsZVwiOiBcIlBlcmZhdm9yIHNlbGVjY2lvbmEgdW5hIGRhdGFcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdC1sZXNzXCI6IFwiUGVyZmF2b3Igc2VsZWNjaW9uYSB1biBwZXLDrW9kZSBkZSBtZW55cyBkZSAlZCBkaWVzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtcmFuZ2VcIjogXCJQZXJmYXZvciBzZWxlY2Npb25hIHVuIHBlcsOtb2RlIGQnZW50cmUgJWQgaSAlZCBkaWVzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHQtZGVmYXVsdFwiOiBcIlBlcmZhdm9yIHNlbGVjY2lvbmEgdW4gcGVyw61vZGVcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIlRlbXBzXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCJIb3JhXCIsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiBcIk1pbnV0XCJcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmRhdGVSYW5nZVBpY2tlciA9IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICBpZiAoIW9wdCkgb3B0ID0ge307XG4gICAgICAgIG9wdCA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGF1dG9DbG9zZTogZmFsc2UsXG4gICAgICAgICAgICBmb3JtYXQ6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIHNlcGFyYXRvcjogJyB0byAnLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6ICdhdXRvJyxcbiAgICAgICAgICAgIHN0YXJ0T2ZXZWVrOiAnc3VuZGF5JywgLy8gb3IgbW9uZGF5XG4gICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuYXR0cigncmVhZG9ubHknKSAmJiAhJCh0aGlzKS5pcygnOmRpc2FibGVkJykgJiYgcyAhPSAkKHRoaXMpLnZhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudmFsKHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFydERhdGU6IGZhbHNlLFxuICAgICAgICAgICAgZW5kRGF0ZTogZmFsc2UsXG4gICAgICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW5EYXlzOiAwLFxuICAgICAgICAgICAgbWF4RGF5czogMCxcbiAgICAgICAgICAgIHNob3dTaG9ydGN1dHM6IGZhbHNlLFxuICAgICAgICAgICAgc2hvcnRjdXRzOiB7XG4gICAgICAgICAgICAgICAgLy8ncHJldi1kYXlzJzogWzEsMyw1LDddLFxuICAgICAgICAgICAgICAgIC8vICduZXh0LWRheXMnOiBbMyw1LDddLFxuICAgICAgICAgICAgICAgIC8vJ3ByZXYnIDogWyd3ZWVrJywnbW9udGgnLCd5ZWFyJ10sXG4gICAgICAgICAgICAgICAgLy8gJ25leHQnIDogWyd3ZWVrJywnbW9udGgnLCd5ZWFyJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXN0b21TaG9ydGN1dHM6IFtdLFxuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2JvZHknLFxuICAgICAgICAgICAgYWx3YXlzT3BlbjogZmFsc2UsXG4gICAgICAgICAgICBzaW5nbGVEYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGxvb2tCZWhpbmQ6IGZhbHNlLFxuICAgICAgICAgICAgYmF0Y2hNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICBzdGlja3lNb250aHM6IGZhbHNlLFxuICAgICAgICAgICAgZGF5RGl2QXR0cnM6IFtdLFxuICAgICAgICAgICAgZGF5VGRBdHRyczogW10sXG4gICAgICAgICAgICBzZWxlY3RGb3J3YXJkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdEJhY2t3YXJkOiBmYWxzZSxcbiAgICAgICAgICAgIGFwcGx5QnRuQ2xhc3M6ICcnLFxuICAgICAgICAgICAgc2luZ2xlTW9udGg6ICdhdXRvJyxcbiAgICAgICAgICAgIGhvdmVyaW5nVG9vbHRpcDogZnVuY3Rpb24oZGF5cywgc3RhcnRUaW1lLCBob3ZlcmluZ1RpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyA+IDEgPyBkYXlzICsgJyAnICsgdHJhbnNsYXRlKCdkYXlzJykgOiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaG93VG9wYmFyOiB0cnVlLFxuICAgICAgICAgICAgc3dhcFRpbWU6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGdldFdlZWtOdW1iZXI6IGZ1bmN0aW9uKGRhdGUpIC8vZGF0ZSB3aWxsIGJlIHRoZSBmaXJzdCBkYXkgb2YgYSB3ZWVrXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoJ3cnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXN0b21PcGVuQW5pbWF0aW9uOiBudWxsLFxuICAgICAgICAgICAgY3VzdG9tQ2xvc2VBbmltYXRpb246IG51bGwsXG4gICAgICAgICAgICBjdXN0b21BcnJvd1ByZXZTeW1ib2w6IG51bGwsXG4gICAgICAgICAgICBjdXN0b21BcnJvd05leHRTeW1ib2w6IG51bGwsXG4gICAgICAgICAgICBtb250aFNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICB5ZWFyU2VsZWN0OiBmYWxzZVxuICAgICAgICB9LCBvcHQpO1xuXG4gICAgICAgIG9wdC5zdGFydCA9IGZhbHNlO1xuICAgICAgICBvcHQuZW5kID0gZmFsc2U7XG5cbiAgICAgICAgb3B0LnN0YXJ0V2VlayA9IGZhbHNlO1xuXG4gICAgICAgIC8vZGV0ZWN0IGEgdG91Y2ggZGV2aWNlXG4gICAgICAgIG9wdC5pc1RvdWNoRGV2aWNlID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzO1xuXG4gICAgICAgIC8vaWYgaXQgaXMgYSB0b3VjaCBkZXZpY2UsIGhpZGUgaG92ZXJpbmcgdG9vbHRpcFxuICAgICAgICBpZiAob3B0LmlzVG91Y2hEZXZpY2UpIG9wdC5ob3ZlcmluZ1Rvb2x0aXAgPSBmYWxzZTtcblxuICAgICAgICAvL3Nob3cgb25lIG1vbnRoIG9uIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgIGlmIChvcHQuc2luZ2xlTW9udGggPT0gJ2F1dG8nKSBvcHQuc2luZ2xlTW9udGggPSAkKHdpbmRvdykud2lkdGgoKSA8IDQ4MDtcbiAgICAgICAgaWYgKG9wdC5zaW5nbGVNb250aCkgb3B0LnN0aWNreU1vbnRocyA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghb3B0LnNob3dUb3BiYXIpIG9wdC5hdXRvQ2xvc2UgPSB0cnVlO1xuXG4gICAgICAgIGlmIChvcHQuc3RhcnREYXRlICYmIHR5cGVvZiBvcHQuc3RhcnREYXRlID09ICdzdHJpbmcnKSBvcHQuc3RhcnREYXRlID0gbW9tZW50KG9wdC5zdGFydERhdGUsIG9wdC5mb3JtYXQpLnRvRGF0ZSgpO1xuICAgICAgICBpZiAob3B0LmVuZERhdGUgJiYgdHlwZW9mIG9wdC5lbmREYXRlID09ICdzdHJpbmcnKSBvcHQuZW5kRGF0ZSA9IG1vbWVudChvcHQuZW5kRGF0ZSwgb3B0LmZvcm1hdCkudG9EYXRlKCk7XG5cbiAgICAgICAgaWYgKG9wdC55ZWFyU2VsZWN0ICYmIHR5cGVvZiBvcHQueWVhclNlbGVjdCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBvcHQueWVhclNlbGVjdCA9IGZ1bmN0aW9uKGN1cnJlbnQpIHsgcmV0dXJuIFtjdXJyZW50IC0gNSwgY3VycmVudCArIDVdOyB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFuZ3VhZ2VzID0gZ2V0TGFuZ3VhZ2VzKCk7XG4gICAgICAgIHZhciBib3g7XG4gICAgICAgIHZhciBpbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc2VsZkRvbSA9ICQoc2VsZikuZ2V0KDApO1xuICAgICAgICB2YXIgZG9tQ2hhbmdlVGltZXI7XG5cbiAgICAgICAgJCh0aGlzKS5vZmYoJy5kYXRlcGlja2VyJykub24oJ2NsaWNrLmRhdGVwaWNrZXInLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHZhciBpc09wZW4gPSBib3guaXMoJzp2aXNpYmxlJyk7XG4gICAgICAgICAgICBpZiAoIWlzT3Blbikgb3BlbihvcHQuZHVyYXRpb24pO1xuICAgICAgICB9KS5vbignY2hhbmdlLmRhdGVwaWNrZXInLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIGNoZWNrQW5kU2V0RGVmYXVsdFZhbHVlKCk7XG4gICAgICAgIH0pLm9uKCdrZXl1cC5kYXRlcGlja2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChkb21DaGFuZ2VUaW1lcik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgZG9tQ2hhbmdlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNoZWNrQW5kU2V0RGVmYXVsdFZhbHVlKCk7XG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5pdF9kYXRlcGlja2VyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKG9wdC5hbHdheXNPcGVuKSB7XG4gICAgICAgICAgICBvcGVuKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhwb3NlIHNvbWUgYXBpXG4gICAgICAgICQodGhpcykuZGF0YSgnZGF0ZVJhbmdlUGlja2VyJywge1xuICAgICAgICAgICAgc2V0U3RhcnQ6IGZ1bmN0aW9uKGQxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkMSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBkMSA9IG1vbWVudChkMSwgb3B0LmZvcm1hdCkudG9EYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldFNpbmdsZURhdGUoZDEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0RW5kOiBmdW5jdGlvbihkMiwgc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRUaW1lKG9wdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkMiA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBkMiA9IG1vbWVudChkMiwgb3B0LmZvcm1hdCkudG9EYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldERhdGVSYW5nZShzdGFydCwgZDIsIHNpbGVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0RGF0ZVJhbmdlOiBmdW5jdGlvbihkMSwgZDIsIHNpbGVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZDEgPT0gJ3N0cmluZycgJiYgdHlwZW9mIGQyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGQxID0gbW9tZW50KGQxLCBvcHQuZm9ybWF0KS50b0RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgZDIgPSBtb21lbnQoZDIsIG9wdC5mb3JtYXQpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXREYXRlUmFuZ2UoZDEsIGQyLCBzaWxlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFyOiBjbGVhclNlbGVjdGlvbixcbiAgICAgICAgICAgIGNsb3NlOiBjbG9zZURhdGVQaWNrZXIsXG4gICAgICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICAgICAgcmVkcmF3OiByZWRyYXdEYXRlUGlja2VyLFxuICAgICAgICAgICAgZ2V0RGF0ZVBpY2tlcjogZ2V0RGF0ZVBpY2tlcixcbiAgICAgICAgICAgIHJlc2V0TW9udGhzVmlldzogcmVzZXRNb250aHNWaWV3LFxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmKS5vZmYoJy5kYXRlcGlja2VyJyk7XG4gICAgICAgICAgICAgICAgJChzZWxmKS5kYXRhKCdkYXRlUmFuZ2VQaWNrZXInLCAnJyk7XG4gICAgICAgICAgICAgICAgJChzZWxmKS5kYXRhKCdkYXRlLXBpY2tlci1vcGVuZWQnLCBudWxsKTtcbiAgICAgICAgICAgICAgICBib3gucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmRhdGVwaWNrZXInLCBjYWxjUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2suZGF0ZXBpY2tlcicsIG91dHNpZGVDbGlja0Nsb3NlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuZGF0ZXBpY2tlcicsIGNhbGNQb3NpdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gSXNPd25EYXRlUGlja2VyQ2xpY2tlZChldnQsIHNlbGZPYmopIHtcbiAgICAgICAgICAgIHJldHVybiAoc2VsZk9iai5jb250YWlucyhldnQudGFyZ2V0KSB8fCBldnQudGFyZ2V0ID09IHNlbGZPYmogfHwgKHNlbGZPYmouY2hpbGROb2RlcyAhPSB1bmRlZmluZWQgJiYgJC5pbkFycmF5KGV2dC50YXJnZXQsIHNlbGZPYmouY2hpbGROb2RlcykgPj0gMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdF9kYXRlcGlja2VyKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdkYXRlLXBpY2tlci1vcGVuZWQnKSkge1xuICAgICAgICAgICAgICAgIGNsb3NlRGF0ZVBpY2tlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQodGhpcykuZGF0YSgnZGF0ZS1waWNrZXItb3BlbmVkJywgdHJ1ZSk7XG5cblxuICAgICAgICAgICAgYm94ID0gY3JlYXRlRG9tKCkuaGlkZSgpO1xuICAgICAgICAgICAgYm94LmFwcGVuZCgnPGRpdiBjbGFzcz1cImRhdGUtcmFuZ2UtbGVuZ3RoLXRpcFwiPjwvZGl2PicpO1xuXG4gICAgICAgICAgICAkKG9wdC5jb250YWluZXIpLmFwcGVuZChib3gpO1xuXG4gICAgICAgICAgICBpZiAoIW9wdC5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICBjYWxjUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94LmFkZENsYXNzKCdpbmxpbmUtd3JhcHBlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0LmFsd2F5c09wZW4pIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmFwcGx5LWJ0bicpLmhpZGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRlZmF1bHRUaW1lID0gZ2V0RGVmYXVsdFRpbWUoKTtcbiAgICAgICAgICAgIHJlc2V0TW9udGhzVmlldyhkZWZhdWx0VGltZSk7XG5cbiAgICAgICAgICAgIGlmIChvcHQudGltZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKChvcHQuc3RhcnREYXRlICYmIG9wdC5lbmREYXRlKSB8fCAob3B0LnN0YXJ0ICYmIG9wdC5lbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaW1lKG1vbWVudChvcHQuc3RhcnQgfHwgb3B0LnN0YXJ0RGF0ZSkudG9EYXRlKCksICd0aW1lMScpO1xuICAgICAgICAgICAgICAgICAgICBzaG93VGltZShtb21lbnQob3B0LmVuZCB8fCBvcHQuZW5kRGF0ZSkudG9EYXRlKCksICd0aW1lMicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0RW5kVGltZSA9IG9wdC5kZWZhdWx0RW5kVGltZSA/IG9wdC5kZWZhdWx0RW5kVGltZSA6IGRlZmF1bHRUaW1lO1xuICAgICAgICAgICAgICAgICAgICBzaG93VGltZShkZWZhdWx0VGltZSwgJ3RpbWUxJyk7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaW1lKGRlZmF1bHRFbmRUaW1lLCAndGltZTInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2hvd1NlbGVjdGVkSW5mbygpO1xuXG5cbiAgICAgICAgICAgIHZhciBkZWZhdWx0VG9wVGV4dCA9ICcnO1xuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKVxuICAgICAgICAgICAgICAgIGRlZmF1bHRUb3BUZXh0ID0gdHJhbnNsYXRlKCdkZWZhdWx0LXNpbmdsZScpO1xuICAgICAgICAgICAgZWxzZSBpZiAob3B0Lm1pbkRheXMgJiYgb3B0Lm1heERheXMpXG4gICAgICAgICAgICAgICAgZGVmYXVsdFRvcFRleHQgPSB0cmFuc2xhdGUoJ2RlZmF1bHQtcmFuZ2UnKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdC5taW5EYXlzKVxuICAgICAgICAgICAgICAgIGRlZmF1bHRUb3BUZXh0ID0gdHJhbnNsYXRlKCdkZWZhdWx0LW1vcmUnKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdC5tYXhEYXlzKVxuICAgICAgICAgICAgICAgIGRlZmF1bHRUb3BUZXh0ID0gdHJhbnNsYXRlKCdkZWZhdWx0LWxlc3MnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkZWZhdWx0VG9wVGV4dCA9IHRyYW5zbGF0ZSgnZGVmYXVsdC1kZWZhdWx0Jyk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcuZGVmYXVsdC10b3AnKS5odG1sKGRlZmF1bHRUb3BUZXh0LnJlcGxhY2UoL1xcJWQvLCBvcHQubWluRGF5cykucmVwbGFjZSgvXFwlZC8sIG9wdC5tYXhEYXlzKSk7XG4gICAgICAgICAgICBpZiAob3B0LnNpbmdsZU1vbnRoKSB7XG4gICAgICAgICAgICAgICAgYm94LmFkZENsYXNzKCdzaW5nbGUtbW9udGgnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94LmFkZENsYXNzKCd0d28tbW9udGhzJyk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDYWxlbmRhcldpZHRoKCk7XG4gICAgICAgICAgICAgICAgaW5pdGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICBib3guY2xpY2soZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vaWYgdXNlciBjbGljayBvdGhlciBwbGFjZSBvZiB0aGUgd2VicGFnZSwgY2xvc2UgZGF0ZSByYW5nZSBwaWNrZXIgd2luZG93XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2suZGF0ZXBpY2tlcicsIG91dHNpZGVDbGlja0Nsb3NlKTtcblxuICAgICAgICAgICAgYm94LmZpbmQoJy5uZXh0JykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHQuc3RpY2t5TW9udGhzKVxuICAgICAgICAgICAgICAgICAgICBnb3RvTmV4dE1vbnRoKHRoaXMpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZ290b05leHRNb250aF9zdGlja2lseSh0aGlzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnb3RvTmV4dE1vbnRoKHNlbGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNNb250aDIgPSAkKHNlbGYpLnBhcmVudHMoJ3RhYmxlJykuaGFzQ2xhc3MoJ21vbnRoMicpO1xuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGlzTW9udGgyID8gb3B0Lm1vbnRoMiA6IG9wdC5tb250aDE7XG4gICAgICAgICAgICAgICAgbW9udGggPSBuZXh0TW9udGgobW9udGgpO1xuICAgICAgICAgICAgICAgIGlmICghb3B0LnNpbmdsZU1vbnRoICYmICFvcHQuc2luZ2xlRGF0ZSAmJiAhaXNNb250aDIgJiYgY29tcGFyZV9tb250aChtb250aCwgb3B0Lm1vbnRoMikgPj0gMCB8fCBpc01vbnRoT3V0T2ZCb3VuZHMobW9udGgpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgc2hvd01vbnRoKG1vbnRoLCBpc01vbnRoMiA/ICdtb250aDInIDogJ21vbnRoMScpO1xuICAgICAgICAgICAgICAgIHNob3dHYXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ290b05leHRNb250aF9zdGlja2lseShzZWxmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRNb250aDEgPSBuZXh0TW9udGgob3B0Lm1vbnRoMSk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRNb250aDIgPSBuZXh0TW9udGgob3B0Lm1vbnRoMik7XG4gICAgICAgICAgICAgICAgaWYgKGlzTW9udGhPdXRPZkJvdW5kcyhuZXh0TW9udGgyKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICghb3B0LnNpbmdsZURhdGUgJiYgY29tcGFyZV9tb250aChuZXh0TW9udGgxLCBuZXh0TW9udGgyKSA+PSAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgc2hvd01vbnRoKG5leHRNb250aDEsICdtb250aDEnKTtcbiAgICAgICAgICAgICAgICBzaG93TW9udGgobmV4dE1vbnRoMiwgJ21vbnRoMicpO1xuICAgICAgICAgICAgICAgIHNob3dTZWxlY3RlZERheXMoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBib3guZmluZCgnLnByZXYnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdC5zdGlja3lNb250aHMpXG4gICAgICAgICAgICAgICAgICAgIGdvdG9QcmV2TW9udGgodGhpcyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBnb3RvUHJldk1vbnRoX3N0aWNraWx5KHRoaXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdvdG9QcmV2TW9udGgoc2VsZikge1xuICAgICAgICAgICAgICAgIHZhciBpc01vbnRoMiA9ICQoc2VsZikucGFyZW50cygndGFibGUnKS5oYXNDbGFzcygnbW9udGgyJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gaXNNb250aDIgPyBvcHQubW9udGgyIDogb3B0Lm1vbnRoMTtcbiAgICAgICAgICAgICAgICBtb250aCA9IHByZXZNb250aChtb250aCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTW9udGgyICYmIGNvbXBhcmVfbW9udGgobW9udGgsIG9wdC5tb250aDEpIDw9IDAgfHwgaXNNb250aE91dE9mQm91bmRzKG1vbnRoKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNob3dNb250aChtb250aCwgaXNNb250aDIgPyAnbW9udGgyJyA6ICdtb250aDEnKTtcbiAgICAgICAgICAgICAgICBzaG93R2FwKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdvdG9QcmV2TW9udGhfc3RpY2tpbHkoc2VsZikge1xuICAgICAgICAgICAgICAgIHZhciBwcmV2TW9udGgxID0gcHJldk1vbnRoKG9wdC5tb250aDEpO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2TW9udGgyID0gcHJldk1vbnRoKG9wdC5tb250aDIpO1xuICAgICAgICAgICAgICAgIGlmIChpc01vbnRoT3V0T2ZCb3VuZHMocHJldk1vbnRoMSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdC5zaW5nbGVEYXRlICYmIGNvbXBhcmVfbW9udGgocHJldk1vbnRoMiwgcHJldk1vbnRoMSkgPD0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNob3dNb250aChwcmV2TW9udGgyLCAnbW9udGgyJyk7XG4gICAgICAgICAgICAgICAgc2hvd01vbnRoKHByZXZNb250aDEsICdtb250aDEnKTtcbiAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWREYXlzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJveC5hdHRyKCd1bnNlbGVjdGFibGUnLCAnb24nKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3VzZXItc2VsZWN0JywgJ25vbmUnKVxuICAgICAgICAgICAgICAgIC5vbignc2VsZWN0c3RhcnQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBib3guZmluZCgnLmFwcGx5LWJ0bicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNsb3NlRGF0ZVBpY2tlcigpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlUmFuZ2UgPSBnZXREYXRlU3RyaW5nKG5ldyBEYXRlKG9wdC5zdGFydCkpICsgb3B0LnNlcGFyYXRvciArIGdldERhdGVTdHJpbmcobmV3IERhdGUob3B0LmVuZCkpO1xuICAgICAgICAgICAgICAgICQoc2VsZikudHJpZ2dlcignZGF0ZXBpY2tlci1hcHBseScsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogZGF0ZVJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZTEnOiBuZXcgRGF0ZShvcHQuc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICAnZGF0ZTInOiBuZXcgRGF0ZShvcHQuZW5kKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCdbY3VzdG9tXScpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU5hbWUgPSAkKHRoaXMpLmF0dHIoJ2N1c3RvbScpO1xuICAgICAgICAgICAgICAgIG9wdC5zdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheS5jaGVja2VkJykucmVtb3ZlQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheS5jaGVja2VkJykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ3RkLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBvcHQuc2V0VmFsdWUuY2FsbChzZWxmRG9tLCB2YWx1ZU5hbWUpO1xuICAgICAgICAgICAgICAgIGNoZWNrU2VsZWN0aW9uVmFsaWQoKTtcbiAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWRJbmZvKHRydWUpO1xuICAgICAgICAgICAgICAgIHNob3dTZWxlY3RlZERheXMoKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0LmF1dG9DbG9zZSkgY2xvc2VEYXRlUGlja2VyKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYm94LmZpbmQoJ1tzaG9ydGN1dF0nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hvcnRjdXQgPSAkKHRoaXMpLmF0dHIoJ3Nob3J0Y3V0Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGRpcjtcbiAgICAgICAgICAgICAgICBpZiAoc2hvcnRjdXQuaW5kZXhPZignZGF5JykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9IHBhcnNlSW50KHNob3J0Y3V0LnNwbGl0KCcsJywgMilbMV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSArIDg2NDAwMDAwICogZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV3IERhdGUoZW5kLmdldFRpbWUoKSArIDg2NDAwMDAwICogKGRheSA+IDAgPyAxIDogLTEpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNob3J0Y3V0LmluZGV4T2YoJ3dlZWsnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBzaG9ydGN1dC5pbmRleE9mKCdwcmV2LCcpICE9IC0xID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcERheTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA9PSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcERheSA9IG9wdC5zdGFydE9mV2VlayA9PSAnbW9uZGF5JyA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wRGF5ID0gb3B0LnN0YXJ0T2ZXZWVrID09ICdtb25kYXknID8gMCA6IDY7XG5cbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV3IERhdGUoZW5kLmdldFRpbWUoKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGVuZC5nZXREYXkoKSAhPSBzdG9wRGF5KSBlbmQgPSBuZXcgRGF0ZShlbmQuZ2V0VGltZSgpICsgZGlyICogODY0MDAwMDApO1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKGVuZC5nZXRUaW1lKCkgKyBkaXIgKiA4NjQwMDAwMCAqIDYpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvcnRjdXQuaW5kZXhPZignbW9udGgnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBzaG9ydGN1dC5pbmRleE9mKCdwcmV2LCcpICE9IC0xID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyID09IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5leHRNb250aChlbmQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHByZXZNb250aChlbmQpO1xuICAgICAgICAgICAgICAgICAgICBzdGFydC5zZXREYXRlKDEpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBuZXh0TW9udGgoc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBlbmQuc2V0RGF0ZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV3IERhdGUoZW5kLmdldFRpbWUoKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNob3J0Y3V0LmluZGV4T2YoJ3llYXInKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBzaG9ydGN1dC5pbmRleE9mKCdwcmV2LCcpICE9IC0xID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LnNldEZ1bGxZZWFyKGVuZC5nZXRGdWxsWWVhcigpICsgZGlyKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQuc2V0TW9udGgoMCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LnNldERhdGUoMSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZC5zZXRGdWxsWWVhcihlbmQuZ2V0RnVsbFllYXIoKSArIGRpcik7XG4gICAgICAgICAgICAgICAgICAgIGVuZC5zZXRNb250aCgxMSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZC5zZXREYXRlKDMxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNob3J0Y3V0ID09ICdjdXN0b20nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gJCh0aGlzKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQuY3VzdG9tU2hvcnRjdXRzICYmIG9wdC5jdXN0b21TaG9ydGN1dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHQuY3VzdG9tU2hvcnRjdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoID0gb3B0LmN1c3RvbVNob3J0Y3V0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2gubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBzaFsnZGF0ZXMnXS5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfWNhdGNoKGUpe31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBkYXRhWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZGF0YVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIG9ubHkgb25lIGRhdGUgaXMgc3BlY2lmaWVkIHRoZW4ganVzdCBtb3ZlIGNhbGVuZGFycyB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNhbGVuZGFycyB0byBzaG93IHRoaXMgZGF0ZSdzIG1vbnRoIGFuZCBuZXh0IG1vbnRoc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW92ZXRvZGF0ZSA9IGRhdGFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TW9udGgobW92ZXRvZGF0ZSwgJ21vbnRoMScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd01vbnRoKG5leHRNb250aChtb3ZldG9kYXRlKSwgJ21vbnRoMicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0dhcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGFydCAmJiBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RGF0ZVJhbmdlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1NlbGVjdGlvblZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcudGltZTEgaW5wdXRbdHlwZT1yYW5nZV0nKS5vbignY2hhbmdlIHRvdWNobW92ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIGhvdXIgPSB0YXJnZXQubmFtZSA9PSAnaG91cicgPyAkKHRhcmdldCkudmFsKCkucmVwbGFjZSgvXihcXGR7MX0pJC8sICcwJDEnKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgbWluID0gdGFyZ2V0Lm5hbWUgPT0gJ21pbnV0ZScgPyAkKHRhcmdldCkudmFsKCkucmVwbGFjZSgvXihcXGR7MX0pJC8sICcwJDEnKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzZXRUaW1lKCd0aW1lMScsIGhvdXIsIG1pbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYm94LmZpbmQoJy50aW1lMiBpbnB1dFt0eXBlPXJhbmdlXScpLm9uKCdjaGFuZ2UgdG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IHRhcmdldC5uYW1lID09ICdob3VyJyA/ICQodGFyZ2V0KS52YWwoKS5yZXBsYWNlKC9eKFxcZHsxfSkkLywgJzAkMScpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBtaW4gPSB0YXJnZXQubmFtZSA9PSAnbWludXRlJyA/ICQodGFyZ2V0KS52YWwoKS5yZXBsYWNlKC9eKFxcZHsxfSkkLywgJzAkMScpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHNldFRpbWUoJ3RpbWUyJywgaG91ciwgbWluKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGNQb3NpdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghb3B0LmlubGluZSkge1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkKHNlbGYpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIGlmICgkKG9wdC5jb250YWluZXIpLmNzcygncG9zaXRpb24nKSA9PSAncmVsYXRpdmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJPZmZzZXQgPSAkKG9wdC5jb250YWluZXIpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdEluZGVudCA9IE1hdGgubWF4KDAsIG9mZnNldC5sZWZ0ICsgYm94Lm91dGVyV2lkdGgoKSAtICQoJ2JvZHknKS53aWR0aCgpICsgMTYpO1xuICAgICAgICAgICAgICAgICAgICBib3guY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogb2Zmc2V0LnRvcCAtIGNvbnRhaW5lck9mZnNldC50b3AgKyAkKHNlbGYpLm91dGVySGVpZ2h0KCkgKyA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogb2Zmc2V0LmxlZnQgLSBjb250YWluZXJPZmZzZXQubGVmdCAtIGxlZnRJbmRlbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gISEhIGlmIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0LmxlZnQgPCA0NjApIC8vbGVmdCB0byByaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3AgKyAkKHNlbGYpLm91dGVySGVpZ2h0KCkgKyBwYXJzZUludCgkKCdib2R5JykuY3NzKCdib3JkZXItdG9wJykgfHwgMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wICsgJChzZWxmKS5vdXRlckhlaWdodCgpICsgcGFyc2VJbnQoJCgnYm9keScpLmNzcygnYm9yZGVyLXRvcCcpIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogb2Zmc2V0LmxlZnQgKyAkKHNlbGYpLndpZHRoKCkgLSBib3gud2lkdGgoKSAtIDE2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGRhdGUgcGlja2VyIHdyYXBwZXIgZWxlbWVudFxuICAgICAgICBmdW5jdGlvbiBnZXREYXRlUGlja2VyKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW4oYW5pbWF0aW9uVGltZSkge1xuICAgICAgICAgICAgcmVkcmF3RGF0ZVBpY2tlcigpO1xuICAgICAgICAgICAgY2hlY2tBbmRTZXREZWZhdWx0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChvcHQuY3VzdG9tT3BlbkFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIG9wdC5jdXN0b21PcGVuQW5pbWF0aW9uLmNhbGwoYm94LmdldCgwKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQoc2VsZikudHJpZ2dlcignZGF0ZXBpY2tlci1vcGVuZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBib3hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJveC5zbGlkZURvd24oYW5pbWF0aW9uVGltZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQoc2VsZikudHJpZ2dlcignZGF0ZXBpY2tlci1vcGVuZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBib3hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHNlbGYpLnRyaWdnZXIoJ2RhdGVwaWNrZXItb3BlbicsIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBib3hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2hvd0dhcCgpO1xuICAgICAgICAgICAgdXBkYXRlQ2FsZW5kYXJXaWR0aCgpO1xuICAgICAgICAgICAgY2FsY1Bvc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjaGVja0FuZFNldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgICAgIHZhciBfX2RlZmF1bHRfc3RyaW5nID0gb3B0LmdldFZhbHVlLmNhbGwoc2VsZkRvbSk7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSBfX2RlZmF1bHRfc3RyaW5nID8gX19kZWZhdWx0X3N0cmluZy5zcGxpdChvcHQuc2VwYXJhdG9yKSA6ICcnO1xuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdHMgJiYgKChkZWZhdWx0cy5sZW5ndGggPT0gMSAmJiBvcHQuc2luZ2xlRGF0ZSkgfHwgZGVmYXVsdHMubGVuZ3RoID49IDIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9fX2Zvcm1hdCA9IG9wdC5mb3JtYXQ7XG4gICAgICAgICAgICAgICAgaWYgKF9fX2Zvcm1hdC5tYXRjaCgvRG8vKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9fX2Zvcm1hdCA9IF9fX2Zvcm1hdC5yZXBsYWNlKC9Eby8sICdEJyk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzWzBdID0gZGVmYXVsdHNbMF0ucmVwbGFjZSgvKFxcZCspKHRofG5kfHN0KS8sICckMScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzWzFdID0gZGVmYXVsdHNbMV0ucmVwbGFjZSgvKFxcZCspKHRofG5kfHN0KS8sICckMScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNldCBpbml0aWF0ZWQgIHRvIGF2b2lkIHRyaWdnZXJyaW5nIGRhdGVwaWNrZXItY2hhbmdlIGV2ZW50XG4gICAgICAgICAgICAgICAgaW5pdGlhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldERhdGVSYW5nZShnZXRWYWxpZFZhbHVlKGRlZmF1bHRzWzBdLCBfX19mb3JtYXQsIG1vbWVudC5sb2NhbGUob3B0Lmxhbmd1YWdlKSksIGdldFZhbGlkVmFsdWUoZGVmYXVsdHNbMV0sIF9fX2Zvcm1hdCwgbW9tZW50LmxvY2FsZShvcHQubGFuZ3VhZ2UpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZWZhdWx0cy5sZW5ndGggPT0gMSAmJiBvcHQuc2luZ2xlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRTaW5nbGVEYXRlKGdldFZhbGlkVmFsdWUoZGVmYXVsdHNbMF0sIF9fX2Zvcm1hdCwgbW9tZW50LmxvY2FsZShvcHQubGFuZ3VhZ2UpKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5pdGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFZhbGlkVmFsdWUoZGF0ZSwgZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgICAgIGlmIChtb21lbnQoZGF0ZSwgZm9ybWF0LCBsb2NhbGUpLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSwgZm9ybWF0LCBsb2NhbGUpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KCkudG9EYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcldpZHRoKCkge1xuICAgICAgICAgICAgdmFyIGdhcE1hcmdpbiA9IGJveC5maW5kKCcuZ2FwJykuY3NzKCdtYXJnaW4tbGVmdCcpO1xuICAgICAgICAgICAgaWYgKGdhcE1hcmdpbikgZ2FwTWFyZ2luID0gcGFyc2VJbnQoZ2FwTWFyZ2luKTtcbiAgICAgICAgICAgIHZhciB3MSA9IGJveC5maW5kKCcubW9udGgxJykud2lkdGgoKTtcbiAgICAgICAgICAgIHZhciB3MiA9IGJveC5maW5kKCcuZ2FwJykud2lkdGgoKSArIChnYXBNYXJnaW4gPyBnYXBNYXJnaW4gKiAyIDogMCk7XG4gICAgICAgICAgICB2YXIgdzMgPSBib3guZmluZCgnLm1vbnRoMicpLndpZHRoKCk7XG4gICAgICAgICAgICBib3guZmluZCgnLm1vbnRoLXdyYXBwZXInKS53aWR0aCh3MSArIHcyICsgdzMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyVGltZShuYW1lLCBkYXRlKSB7XG4gICAgICAgICAgICBib3guZmluZCgnLicgKyBuYW1lICsgJyBpbnB1dFt0eXBlPXJhbmdlXS5ob3VyLXJhbmdlJykudmFsKG1vbWVudChkYXRlKS5ob3VycygpKTtcbiAgICAgICAgICAgIGJveC5maW5kKCcuJyArIG5hbWUgKyAnIGlucHV0W3R5cGU9cmFuZ2VdLm1pbnV0ZS1yYW5nZScpLnZhbChtb21lbnQoZGF0ZSkubWludXRlcygpKTtcbiAgICAgICAgICAgIHNldFRpbWUobmFtZSwgbW9tZW50KGRhdGUpLmZvcm1hdCgnSEgnKSwgbW9tZW50KGRhdGUpLmZvcm1hdCgnbW0nKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjaGFuZ2VUaW1lKG5hbWUsIGRhdGUpIHtcbiAgICAgICAgICAgIG9wdFtuYW1lXSA9IHBhcnNlSW50KFxuICAgICAgICAgICAgICAgIG1vbWVudChwYXJzZUludChkYXRlKSlcbiAgICAgICAgICAgICAgICAuc3RhcnRPZignZGF5JylcbiAgICAgICAgICAgICAgICAuYWRkKG1vbWVudChvcHRbbmFtZSArICdUaW1lJ10pLmZvcm1hdCgnSEgnKSwgJ2gnKVxuICAgICAgICAgICAgICAgIC5hZGQobW9tZW50KG9wdFtuYW1lICsgJ1RpbWUnXSkuZm9ybWF0KCdtbScpLCAnbScpLnZhbHVlT2YoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN3YXBUaW1lKCkge1xuICAgICAgICAgICAgcmVuZGVyVGltZSgndGltZTEnLCBvcHQuc3RhcnQpO1xuICAgICAgICAgICAgcmVuZGVyVGltZSgndGltZTInLCBvcHQuZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFRpbWUobmFtZSwgaG91ciwgbWludXRlKSB7XG4gICAgICAgICAgICBob3VyICYmIChib3guZmluZCgnLicgKyBuYW1lICsgJyAuaG91ci12YWwnKS50ZXh0KGhvdXIpKTtcbiAgICAgICAgICAgIG1pbnV0ZSAmJiAoYm94LmZpbmQoJy4nICsgbmFtZSArICcgLm1pbnV0ZS12YWwnKS50ZXh0KG1pbnV0ZSkpO1xuICAgICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndGltZTEnOlxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZSgnc3RhcnQnLCBtb21lbnQob3B0LnN0YXJ0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0UmFuZ2UoJ3N0YXJ0VGltZScsIG1vbWVudChvcHQuc3RhcnRUaW1lIHx8IG1vbWVudCgpLnZhbHVlT2YoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0aW1lMic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZSgnZW5kJywgbW9tZW50KG9wdC5lbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZSgnZW5kVGltZScsIG1vbWVudChvcHQuZW5kVGltZSB8fCBtb21lbnQoKS52YWx1ZU9mKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFJhbmdlKG5hbWUsIHRpbWVQb2ludCkge1xuICAgICAgICAgICAgICAgIHZhciBoID0gdGltZVBvaW50LmZvcm1hdCgnSEgnKSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IHRpbWVQb2ludC5mb3JtYXQoJ21tJyk7XG4gICAgICAgICAgICAgICAgb3B0W25hbWVdID0gdGltZVBvaW50XG4gICAgICAgICAgICAgICAgICAgIC5zdGFydE9mKCdkYXknKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKGhvdXIgfHwgaCwgJ2gnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKG1pbnV0ZSB8fCBtLCAnbScpXG4gICAgICAgICAgICAgICAgICAgIC52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja1NlbGVjdGlvblZhbGlkKCk7XG4gICAgICAgICAgICBzaG93U2VsZWN0ZWRJbmZvKCk7XG4gICAgICAgICAgICBzaG93U2VsZWN0ZWREYXlzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgIG9wdC5zdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgYm94LmZpbmQoJy5kYXkuY2hlY2tlZCcpLnJlbW92ZUNsYXNzKCdjaGVja2VkIGxhc3QtZGF0ZS1zZWxlY3RlZCBmaXJzdC1kYXRlLXNlbGVjdGVkJylcbiAgICAgICAgICAgIC5wYXJlbnQoKS5yZW1vdmVDbGFzcygndGQtY2hlY2tlZCB0ZC1sYXN0LWRhdGUtc2VsZWN0ZWQgdGQtZmlyc3QtZGF0ZS1zZWxlY3RlZCB0ZC1ob3ZlcmluZycpO1xuICAgICAgICAgICAgb3B0LnNldFZhbHVlLmNhbGwoc2VsZkRvbSwgJycpO1xuICAgICAgICAgICAgY2hlY2tTZWxlY3Rpb25WYWxpZCgpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkSW5mbygpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkRGF5cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU3RhcnQodGltZSkge1xuICAgICAgICAgICAgdmFyIHIgPSB0aW1lO1xuICAgICAgICAgICAgaWYgKG9wdC5iYXRjaE1vZGUgPT09ICd3ZWVrLXJhbmdlJykge1xuICAgICAgICAgICAgICAgIGlmIChvcHQuc3RhcnRPZldlZWsgPT09ICdtb25kYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLnN0YXJ0T2YoJ2lzb3dlZWsnKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IG1vbWVudChwYXJzZUludCh0aW1lKSkuc3RhcnRPZignd2VlaycpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5iYXRjaE1vZGUgPT09ICdtb250aC1yYW5nZScpIHtcbiAgICAgICAgICAgICAgICByID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5zdGFydE9mKCdtb250aCcpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRW5kKHRpbWUpIHtcbiAgICAgICAgICAgIHZhciByID0gdGltZTtcbiAgICAgICAgICAgIGlmIChvcHQuYmF0Y2hNb2RlID09PSAnd2Vlay1yYW5nZScpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0T2ZXZWVrID09PSAnbW9uZGF5Jykge1xuICAgICAgICAgICAgICAgICAgICByID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5lbmRPZignaXNvd2VlaycpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5lbmRPZignd2VlaycpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5iYXRjaE1vZGUgPT09ICdtb250aC1yYW5nZScpIHtcbiAgICAgICAgICAgICAgICByID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5lbmRPZignbW9udGgnKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gZGF5Q2xpY2tlZChkYXkpIHtcbiAgICAgICAgICAgIGlmIChkYXkuaGFzQ2xhc3MoJ2ludmFsaWQnKSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHRpbWUgPSBkYXkuYXR0cigndGltZScpO1xuICAgICAgICAgICAgZGF5LmFkZENsYXNzKCdjaGVja2VkJyk7XG4gICAgICAgICAgICBkYXkucGFyZW50KCkuYWRkQ2xhc3MoJ3RkLWNoZWNrZWQnKTtcbiAgICAgICAgICAgIGlmIChvcHQuc2luZ2xlRGF0ZSkge1xuICAgICAgICAgICAgICAgIG9wdC5zdGFydCA9IHRpbWU7XG4gICAgICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuYmF0Y2hNb2RlID09PSAnd2VlaycpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0T2ZXZWVrID09PSAnbW9uZGF5Jykge1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RhcnQgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLnN0YXJ0T2YoJ2lzb3dlZWsnKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLmVuZE9mKCdpc293ZWVrJykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLmVuZE9mKCd3ZWVrJykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RhcnQgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuYmF0Y2hNb2RlID09PSAnd29ya3dlZWsnKSB7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5kYXkoMSkudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBtb21lbnQocGFyc2VJbnQodGltZSkpLmRheSg1KS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5iYXRjaE1vZGUgPT09ICd3ZWVrZW5kJykge1xuICAgICAgICAgICAgICAgIG9wdC5zdGFydCA9IG1vbWVudChwYXJzZUludCh0aW1lKSkuZGF5KDYpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICBvcHQuZW5kID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5kYXkoNykudmFsdWVPZigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuYmF0Y2hNb2RlID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5zdGFydE9mKCdtb250aCcpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICBvcHQuZW5kID0gbW9tZW50KHBhcnNlSW50KHRpbWUpKS5lbmRPZignbW9udGgnKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChvcHQuc3RhcnQgJiYgb3B0LmVuZCkgfHwgKCFvcHQuc3RhcnQgJiYgIW9wdC5lbmQpKSB7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gaGFuZGxlU3RhcnQodGltZSk7XG4gICAgICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBvcHQuZW5kID0gaGFuZGxlRW5kKHRpbWUpO1xuICAgICAgICAgICAgICAgIGlmIChvcHQudGltZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVRpbWUoJ2VuZCcsIG9wdC5lbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9VcGRhdGUgdGltZSBpbiBjYXNlIGl0IGlzIGVuYWJsZWQgYW5kIHRpbWVzdGFtcHMgYXJlIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKG9wdC50aW1lLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVRpbWUoJ3N0YXJ0Jywgb3B0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlVGltZSgnZW5kJywgb3B0LmVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0luIGNhc2UgdGhlIHN0YXJ0IGlzIGFmdGVyIHRoZSBlbmQsIHN3YXAgdGhlIHRpbWVzdGFtcHNcbiAgICAgICAgICAgIGlmICghb3B0LnNpbmdsZURhdGUgJiYgb3B0LnN0YXJ0ICYmIG9wdC5lbmQgJiYgb3B0LnN0YXJ0ID4gb3B0LmVuZCkge1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSBvcHQuZW5kO1xuICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBoYW5kbGVFbmQob3B0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICBvcHQuc3RhcnQgPSBoYW5kbGVTdGFydCh0bXApO1xuICAgICAgICAgICAgICAgIGlmIChvcHQudGltZS5lbmFibGVkICYmIG9wdC5zd2FwVGltZSkge1xuICAgICAgICAgICAgICAgICAgICBzd2FwVGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0LnN0YXJ0ID0gcGFyc2VJbnQob3B0LnN0YXJ0KTtcbiAgICAgICAgICAgIG9wdC5lbmQgPSBwYXJzZUludChvcHQuZW5kKTtcblxuICAgICAgICAgICAgY2xlYXJIb3ZlcmluZygpO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydCAmJiAhb3B0LmVuZCkge1xuICAgICAgICAgICAgICAgICQoc2VsZikudHJpZ2dlcignZGF0ZXBpY2tlci1maXJzdC1kYXRlLXNlbGVjdGVkJywge1xuICAgICAgICAgICAgICAgICAgICAnZGF0ZTEnOiBuZXcgRGF0ZShvcHQuc3RhcnQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF5SG92ZXJpbmcoZGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGFibGVSYW5nZSh0aW1lKTtcblxuICAgICAgICAgICAgY2hlY2tTZWxlY3Rpb25WYWxpZCgpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkSW5mbygpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkRGF5cygpO1xuICAgICAgICAgICAgYXV0b2Nsb3NlKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIHdlZWtOdW1iZXJDbGlja2VkKHdlZWtOdW1iZXJEb20pIHtcbiAgICAgICAgICAgIHZhciB0aGlzVGltZSA9IHBhcnNlSW50KHdlZWtOdW1iZXJEb20uYXR0cignZGF0YS1zdGFydC10aW1lJyksIDEwKTtcbiAgICAgICAgICAgIHZhciBkYXRlMSwgZGF0ZTI7XG4gICAgICAgICAgICBpZiAoIW9wdC5zdGFydFdlZWspIHtcbiAgICAgICAgICAgICAgICBvcHQuc3RhcnRXZWVrID0gdGhpc1RpbWU7XG4gICAgICAgICAgICAgICAgd2Vla051bWJlckRvbS5hZGRDbGFzcygnd2Vlay1udW1iZXItc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBkYXRlMSA9IG5ldyBEYXRlKHRoaXNUaW1lKTtcbiAgICAgICAgICAgICAgICBvcHQuc3RhcnQgPSBtb21lbnQoZGF0ZTEpLmRheShvcHQuc3RhcnRPZldlZWsgPT0gJ21vbmRheScgPyAxIDogMCkudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBtb21lbnQoZGF0ZTEpLmRheShvcHQuc3RhcnRPZldlZWsgPT0gJ21vbmRheScgPyA3IDogNikudmFsdWVPZigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLndlZWstbnVtYmVyLXNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ3dlZWstbnVtYmVyLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgZGF0ZTEgPSBuZXcgRGF0ZSh0aGlzVGltZSA8IG9wdC5zdGFydFdlZWsgPyB0aGlzVGltZSA6IG9wdC5zdGFydFdlZWspO1xuICAgICAgICAgICAgICAgIGRhdGUyID0gbmV3IERhdGUodGhpc1RpbWUgPCBvcHQuc3RhcnRXZWVrID8gb3B0LnN0YXJ0V2VlayA6IHRoaXNUaW1lKTtcbiAgICAgICAgICAgICAgICBvcHQuc3RhcnRXZWVrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gbW9tZW50KGRhdGUxKS5kYXkob3B0LnN0YXJ0T2ZXZWVrID09ICdtb25kYXknID8gMSA6IDApLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICBvcHQuZW5kID0gbW9tZW50KGRhdGUyKS5kYXkob3B0LnN0YXJ0T2ZXZWVrID09ICdtb25kYXknID8gNyA6IDYpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGFibGVSYW5nZSgpO1xuICAgICAgICAgICAgY2hlY2tTZWxlY3Rpb25WYWxpZCgpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkSW5mbygpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkRGF5cygpO1xuICAgICAgICAgICAgYXV0b2Nsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkVGltZSh0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gcGFyc2VJbnQodGltZSwgMTApO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgY29tcGFyZV9kYXkodGltZSwgb3B0LnN0YXJ0RGF0ZSkgPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAob3B0LmVuZERhdGUgJiYgY29tcGFyZV9kYXkodGltZSwgb3B0LmVuZERhdGUpID4gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAob3B0LnN0YXJ0ICYmICFvcHQuZW5kICYmICFvcHQuc2luZ2xlRGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vY2hlY2sgbWF4RGF5cyBhbmQgbWluRGF5cyBzZXR0aW5nXG4gICAgICAgICAgICAgICAgaWYgKG9wdC5tYXhEYXlzID4gMCAmJiBjb3VudERheXModGltZSwgb3B0LnN0YXJ0KSA+IG9wdC5tYXhEYXlzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5taW5EYXlzID4gMCAmJiBjb3VudERheXModGltZSwgb3B0LnN0YXJ0KSA8IG9wdC5taW5EYXlzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvL2NoZWNrIHNlbGVjdEZvcndhcmQgYW5kIHNlbGVjdEJhY2t3YXJkXG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zZWxlY3RGb3J3YXJkICYmIHRpbWUgPCBvcHQuc3RhcnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnNlbGVjdEJhY2t3YXJkICYmIHRpbWUgPiBvcHQuc3RhcnQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgZGlzYWJsZWQgZGF5c1xuICAgICAgICAgICAgICAgIGlmIChvcHQuYmVmb3JlU2hvd0RheSAmJiB0eXBlb2Ygb3B0LmJlZm9yZVNob3dEYXkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZVRtcCA9IHRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudERheXModGltZVRtcCwgb3B0LnN0YXJ0KSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnIgPSBvcHQuYmVmb3JlU2hvd0RheShuZXcgRGF0ZSh0aW1lVG1wKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyclswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModGltZVRtcCAtIG9wdC5zdGFydCkgPCA4NjQwMDAwMCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZVRtcCA+IG9wdC5zdGFydCkgdGltZVRtcCAtPSA4NjQwMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lVG1wIDwgb3B0LnN0YXJ0KSB0aW1lVG1wICs9IDg2NDAwMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2VsZWN0YWJsZVJhbmdlKCkge1xuICAgICAgICAgICAgYm94LmZpbmQoJy5kYXkuaW52YWxpZC50bXAnKS5yZW1vdmVDbGFzcygndG1wIGludmFsaWQnKS5hZGRDbGFzcygndmFsaWQnKTtcbiAgICAgICAgICAgIGlmIChvcHQuc3RhcnQgJiYgIW9wdC5lbmQpIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheS50b01vbnRoLnZhbGlkJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBwYXJzZUludCgkKHRoaXMpLmF0dHIoJ3RpbWUnKSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRUaW1lKHRpbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaW52YWxpZCB0bXAnKS5yZW1vdmVDbGFzcygndmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygndmFsaWQgdG1wJykucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIGRheUhvdmVyaW5nKGRheSkge1xuICAgICAgICAgICAgdmFyIGhvdmVyVGltZSA9IHBhcnNlSW50KGRheS5hdHRyKCd0aW1lJykpO1xuICAgICAgICAgICAgdmFyIHRvb2x0aXAgPSAnJztcblxuICAgICAgICAgICAgaWYgKGRheS5oYXNDbGFzcygnaGFzLXRvb2x0aXAnKSAmJiBkYXkuYXR0cignZGF0YS10b29sdGlwJykpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gJzxzcGFuIGNsYXNzPVwidG9vbHRpcC1jb250ZW50XCI+JyArIGRheS5hdHRyKCdkYXRhLXRvb2x0aXAnKSArICc8L3NwYW4+JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRheS5oYXNDbGFzcygnaW52YWxpZCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF5LmhvdmVyaW5nJykucmVtb3ZlQ2xhc3MoJ2hvdmVyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGRheS5hZGRDbGFzcygnaG92ZXJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgZGF5LnBhcmVudCgpLmFkZENsYXNzKCd0ZC1ob3ZlcmluZycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF5JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gcGFyc2VJbnQoJCh0aGlzKS5hdHRyKCd0aW1lJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gb3B0LnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IG9wdC5lbmQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lID09IGhvdmVyVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2hvdmVyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygndGQtaG92ZXJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaG92ZXJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd0ZC1ob3ZlcmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdC5zdGFydCAmJiAhb3B0LmVuZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHQuc3RhcnQgPCB0aW1lICYmIGhvdmVyVGltZSA+PSB0aW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3B0LnN0YXJ0ID4gdGltZSAmJiBob3ZlclRpbWUgPD0gdGltZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdob3ZlcmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ3RkLWhvdmVyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2hvdmVyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygndGQtaG92ZXJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5zdGFydCAmJiAhb3B0LmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRheXMgPSBjb3VudERheXMoaG92ZXJUaW1lLCBvcHQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5ob3ZlcmluZ1Rvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdC5ob3ZlcmluZ1Rvb2x0aXAgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwID0gb3B0LmhvdmVyaW5nVG9vbHRpcChkYXlzLCBvcHQuc3RhcnQsIGhvdmVyVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuaG92ZXJpbmdUb29sdGlwID09PSB0cnVlICYmIGRheXMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBkYXlzICsgJyAnICsgdHJhbnNsYXRlKCdkYXlzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHZhciBwb3NEYXkgPSBkYXkub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHBvc0JveCA9IGJveC5vZmZzZXQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBfbGVmdCA9IHBvc0RheS5sZWZ0IC0gcG9zQm94LmxlZnQ7XG4gICAgICAgICAgICAgICAgdmFyIF90b3AgPSBwb3NEYXkudG9wIC0gcG9zQm94LnRvcDtcbiAgICAgICAgICAgICAgICBfbGVmdCArPSBkYXkud2lkdGgoKSAvIDI7XG5cblxuICAgICAgICAgICAgICAgIHZhciAkdGlwID0gYm94LmZpbmQoJy5kYXRlLXJhbmdlLWxlbmd0aC10aXAnKTtcbiAgICAgICAgICAgICAgICB2YXIgdyA9ICR0aXAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9KS5odG1sKHRvb2x0aXApLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIGggPSAkdGlwLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIF9sZWZ0IC09IHcgLyAyO1xuICAgICAgICAgICAgICAgIF90b3AgLT0gaDtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3RvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF0ZS1yYW5nZS1sZW5ndGgtdGlwJykuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xlYXJIb3ZlcmluZygpIHtcbiAgICAgICAgICAgIGJveC5maW5kKCcuZGF5LmhvdmVyaW5nJykucmVtb3ZlQ2xhc3MoJ2hvdmVyaW5nJyk7XG4gICAgICAgICAgICBib3guZmluZCgnLmRhdGUtcmFuZ2UtbGVuZ3RoLXRpcCcpLmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRhdGVDaGFuZ2VkKGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGUudmFsKCk7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IGRhdGUuYXR0cignbmFtZScpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRlLnBhcmVudHMoJ3RhYmxlJykuaGFzQ2xhc3MoJ21vbnRoMScpID8gJ21vbnRoMScgOiAnbW9udGgyJztcbiAgICAgICAgICAgIHZhciBvcHBvc2l0ZVR5cGUgPSB0eXBlID09PSAnbW9udGgxJyA/ICdtb250aDInIDogJ21vbnRoMSc7XG4gICAgICAgICAgICB2YXIgc3RhcnREYXRlID0gb3B0LnN0YXJ0RGF0ZSA/IG1vbWVudChvcHQuc3RhcnREYXRlKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBvcHQuZW5kRGF0ZSA/IG1vbWVudChvcHQuZW5kRGF0ZSkgOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBuZXdEYXRlID0gbW9tZW50KG9wdFt0eXBlXSlbbmFtZV0odmFsdWUpO1xuXG5cbiAgICAgICAgICAgIGlmIChzdGFydERhdGUgJiYgbmV3RGF0ZS5pc1NhbWVPckJlZm9yZShzdGFydERhdGUpKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0ZSA9IHN0YXJ0RGF0ZS5hZGQodHlwZSA9PT0gJ21vbnRoMicgPyAxIDogMCwgJ21vbnRoJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbmREYXRlICYmIG5ld0RhdGUuaXNTYW1lT3JBZnRlcihlbmREYXRlKSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGUgPSBlbmREYXRlLmFkZCghb3B0LnNpbmdsZU1vbnRoICYmIHR5cGUgPT09ICdtb250aDEnID8gLTEgOiAwLCAnbW9udGgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hvd01vbnRoKG5ld0RhdGUsIHR5cGUpO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ21vbnRoMScpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0aWNreU1vbnRocyB8fCBtb21lbnQobmV3RGF0ZSkuaXNTYW1lT3JBZnRlcihvcHRbb3Bwb3NpdGVUeXBlXSwgJ21vbnRoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd01vbnRoKG1vbWVudChuZXdEYXRlKS5hZGQoMSwgJ21vbnRoJyksIG9wcG9zaXRlVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0aWNreU1vbnRocyB8fCBtb21lbnQobmV3RGF0ZSkuaXNTYW1lT3JCZWZvcmUob3B0W29wcG9zaXRlVHlwZV0sICdtb250aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dNb250aChtb21lbnQobmV3RGF0ZSkuYWRkKC0xLCAnbW9udGgnKSwgb3Bwb3NpdGVUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNob3dHYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9jbG9zZSgpIHtcbiAgICAgICAgICAgIGlmIChvcHQuc2luZ2xlRGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWF0ZWQgJiYgb3B0LnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQuYXV0b0Nsb3NlKSBjbG9zZURhdGVQaWNrZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWF0ZWQgJiYgb3B0LnN0YXJ0ICYmIG9wdC5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5hdXRvQ2xvc2UpIGNsb3NlRGF0ZVBpY2tlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrU2VsZWN0aW9uVmFsaWQoKSB7XG4gICAgICAgICAgICB2YXIgZGF5cyA9IE1hdGguY2VpbCgob3B0LmVuZCAtIG9wdC5zdGFydCkgLyA4NjQwMDAwMCkgKyAxO1xuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKSB7IC8vIFZhbGlkYXRlIGlmIG9ubHkgc3RhcnQgaXMgdGhlcmVcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0ICYmICFvcHQuZW5kKVxuICAgICAgICAgICAgICAgICAgICBib3guZmluZCgnLmRycF90b3AtYmFyJykucmVtb3ZlQ2xhc3MoJ2Vycm9yJykuYWRkQ2xhc3MoJ25vcm1hbCcpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYm94LmZpbmQoJy5kcnBfdG9wLWJhcicpLnJlbW92ZUNsYXNzKCdlcnJvcicpLnJlbW92ZUNsYXNzKCdub3JtYWwnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0Lm1heERheXMgJiYgZGF5cyA+IG9wdC5tYXhEYXlzKSB7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF5JykucmVtb3ZlQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd0ZC1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgYm94LmZpbmQoJy5kcnBfdG9wLWJhcicpLnJlbW92ZUNsYXNzKCdub3JtYWwnKS5hZGRDbGFzcygnZXJyb3InKS5maW5kKCcuZXJyb3ItdG9wJykuaHRtbCh0cmFuc2xhdGUoJ2xlc3MtdGhhbicpLnJlcGxhY2UoJyVkJywgb3B0Lm1heERheXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0Lm1pbkRheXMgJiYgZGF5cyA8IG9wdC5taW5EYXlzKSB7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LmVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF5JykucmVtb3ZlQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd0ZC1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgYm94LmZpbmQoJy5kcnBfdG9wLWJhcicpLnJlbW92ZUNsYXNzKCdub3JtYWwnKS5hZGRDbGFzcygnZXJyb3InKS5maW5kKCcuZXJyb3ItdG9wJykuaHRtbCh0cmFuc2xhdGUoJ21vcmUtdGhhbicpLnJlcGxhY2UoJyVkJywgb3B0Lm1pbkRheXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zdGFydCB8fCBvcHQuZW5kKVxuICAgICAgICAgICAgICAgICAgICBib3guZmluZCgnLmRycF90b3AtYmFyJykucmVtb3ZlQ2xhc3MoJ2Vycm9yJykuYWRkQ2xhc3MoJ25vcm1hbCcpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYm94LmZpbmQoJy5kcnBfdG9wLWJhcicpLnJlbW92ZUNsYXNzKCdlcnJvcicpLnJlbW92ZUNsYXNzKCdub3JtYWwnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChvcHQuc2luZ2xlRGF0ZSAmJiBvcHQuc3RhcnQgJiYgIW9wdC5lbmQpIHx8ICghb3B0LnNpbmdsZURhdGUgJiYgb3B0LnN0YXJ0ICYmIG9wdC5lbmQpKSB7XG4gICAgICAgICAgICAgICAgYm94LmZpbmQoJy5hcHBseS1idG4nKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94LmZpbmQoJy5hcHBseS1idG4nKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdC5iYXRjaE1vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIChvcHQuc3RhcnQgJiYgb3B0LnN0YXJ0RGF0ZSAmJiBjb21wYXJlX2RheShvcHQuc3RhcnQsIG9wdC5zdGFydERhdGUpIDwgMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG9wdC5lbmQgJiYgb3B0LmVuZERhdGUgJiYgY29tcGFyZV9kYXkob3B0LmVuZCwgb3B0LmVuZERhdGUpID4gMClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYm94LmZpbmQoJy5kYXknKS5yZW1vdmVDbGFzcygnY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgICAgICBib3guZmluZCgnLmRheScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd0ZC1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvd1NlbGVjdGVkSW5mbyhmb3JjZVZhbGlkLCBzaWxlbnQpIHtcbiAgICAgICAgICAgIGJveC5maW5kKCcuc3RhcnQtZGF5JykuaHRtbCgnLi4uJyk7XG4gICAgICAgICAgICBib3guZmluZCgnLmVuZC1kYXknKS5odG1sKCcuLi4nKTtcbiAgICAgICAgICAgIGJveC5maW5kKCcuc2VsZWN0ZWQtZGF5cycpLmhpZGUoKTtcbiAgICAgICAgICAgIGlmIChvcHQuc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLnN0YXJ0LWRheScpLmh0bWwoZ2V0RGF0ZVN0cmluZyhuZXcgRGF0ZShwYXJzZUludChvcHQuc3RhcnQpKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdC5lbmQpIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmVuZC1kYXknKS5odG1sKGdldERhdGVTdHJpbmcobmV3IERhdGUocGFyc2VJbnQob3B0LmVuZCkpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF0ZVJhbmdlO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydCAmJiBvcHQuc2luZ2xlRGF0ZSkge1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuYXBwbHktYnRuJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgZGF0ZVJhbmdlID0gZ2V0RGF0ZVN0cmluZyhuZXcgRGF0ZShvcHQuc3RhcnQpKTtcbiAgICAgICAgICAgICAgICBvcHQuc2V0VmFsdWUuY2FsbChzZWxmRG9tLCBkYXRlUmFuZ2UsIGdldERhdGVTdHJpbmcobmV3IERhdGUob3B0LnN0YXJ0KSksIGdldERhdGVTdHJpbmcobmV3IERhdGUob3B0LmVuZCkpKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbml0aWF0ZWQgJiYgIXNpbGVudCkge1xuICAgICAgICAgICAgICAgICAgICAkKHNlbGYpLnRyaWdnZXIoJ2RhdGVwaWNrZXItY2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogZGF0ZVJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGUxJzogbmV3IERhdGUob3B0LnN0YXJ0KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5zdGFydCAmJiBvcHQuZW5kKSB7XG4gICAgICAgICAgICAgICAgYm94LmZpbmQoJy5zZWxlY3RlZC1kYXlzJykuc2hvdygpLmZpbmQoJy5zZWxlY3RlZC1kYXlzLW51bScpLmh0bWwoY291bnREYXlzKG9wdC5lbmQsIG9wdC5zdGFydCkpO1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuYXBwbHktYnRuJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgZGF0ZVJhbmdlID0gZ2V0RGF0ZVN0cmluZyhuZXcgRGF0ZShvcHQuc3RhcnQpKSArIG9wdC5zZXBhcmF0b3IgKyBnZXREYXRlU3RyaW5nKG5ldyBEYXRlKG9wdC5lbmQpKTtcbiAgICAgICAgICAgICAgICBvcHQuc2V0VmFsdWUuY2FsbChzZWxmRG9tLCBkYXRlUmFuZ2UsIGdldERhdGVTdHJpbmcobmV3IERhdGUob3B0LnN0YXJ0KSksIGdldERhdGVTdHJpbmcobmV3IERhdGUob3B0LmVuZCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhdGVkICYmICFzaWxlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJChzZWxmKS50cmlnZ2VyKCdkYXRlcGlja2VyLWNoYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IGRhdGVSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRlMSc6IG5ldyBEYXRlKG9wdC5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGF0ZTInOiBuZXcgRGF0ZShvcHQuZW5kKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcmNlVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmFwcGx5LWJ0bicpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3guZmluZCgnLmFwcGx5LWJ0bicpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY291bnREYXlzKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyhtb21lbnQoc3RhcnQpLmRpZmYobW9tZW50KGVuZCksICdkJykpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldERhdGVSYW5nZShkYXRlMSwgZGF0ZTIsIHNpbGVudCkge1xuICAgICAgICAgICAgaWYgKGRhdGUxLmdldFRpbWUoKSA+IGRhdGUyLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSBkYXRlMjtcbiAgICAgICAgICAgICAgICBkYXRlMiA9IGRhdGUxO1xuICAgICAgICAgICAgICAgIGRhdGUxID0gdG1wO1xuICAgICAgICAgICAgICAgIHRtcCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgY29tcGFyZV9kYXkoZGF0ZTEsIG9wdC5zdGFydERhdGUpIDwgMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvcHQuZW5kRGF0ZSAmJiBjb21wYXJlX2RheShkYXRlMiwgb3B0LmVuZERhdGUpID4gMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICBzaG93TW9udGgob3B0LnN0YXJ0RGF0ZSwgJ21vbnRoMScpO1xuICAgICAgICAgICAgICAgIHNob3dNb250aChuZXh0TW9udGgob3B0LnN0YXJ0RGF0ZSksICdtb250aDInKTtcbiAgICAgICAgICAgICAgICBzaG93R2FwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHQuc3RhcnQgPSBkYXRlMS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBvcHQuZW5kID0gZGF0ZTIuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBpZiAob3B0LnRpbWUuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlclRpbWUoJ3RpbWUxJywgZGF0ZTEpO1xuICAgICAgICAgICAgICAgIHJlbmRlclRpbWUoJ3RpbWUyJywgZGF0ZTIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0LnN0aWNreU1vbnRocyB8fCAoY29tcGFyZV9kYXkoZGF0ZTEsIGRhdGUyKSA+IDAgJiYgY29tcGFyZV9tb250aChkYXRlMSwgZGF0ZTIpID09PSAwKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHQubG9va0JlaGluZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlMSA9IHByZXZNb250aChkYXRlMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTIgPSBuZXh0TW9udGgoZGF0ZTEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdC5zdGlja3lNb250aHMgJiYgb3B0LmVuZERhdGUgIT09IGZhbHNlICYmIGNvbXBhcmVfbW9udGgoZGF0ZTIsIG9wdC5lbmREYXRlKSA+IDApIHtcbiAgICAgICAgICAgICAgICBkYXRlMSA9IHByZXZNb250aChkYXRlMSk7XG4gICAgICAgICAgICAgICAgZGF0ZTIgPSBwcmV2TW9udGgoZGF0ZTIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW9wdC5zdGlja3lNb250aHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZV9tb250aChkYXRlMSwgZGF0ZTIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQubG9va0JlaGluZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTEgPSBwcmV2TW9udGgoZGF0ZTIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTIgPSBuZXh0TW9udGgoZGF0ZTEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaG93TW9udGgoZGF0ZTEsICdtb250aDEnKTtcbiAgICAgICAgICAgIHNob3dNb250aChkYXRlMiwgJ21vbnRoMicpO1xuICAgICAgICAgICAgc2hvd0dhcCgpO1xuICAgICAgICAgICAgY2hlY2tTZWxlY3Rpb25WYWxpZCgpO1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkSW5mbyhmYWxzZSwgc2lsZW50KTtcbiAgICAgICAgICAgIGF1dG9jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U2luZ2xlRGF0ZShkYXRlMSkge1xuXG4gICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgY29tcGFyZV9kYXkoZGF0ZTEsIG9wdC5zdGFydERhdGUpIDwgMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvcHQuZW5kRGF0ZSAmJiBjb21wYXJlX2RheShkYXRlMSwgb3B0LmVuZERhdGUpID4gMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICBzaG93TW9udGgob3B0LnN0YXJ0RGF0ZSwgJ21vbnRoMScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0LnN0YXJ0ID0gZGF0ZTEuZ2V0VGltZSgpO1xuXG5cbiAgICAgICAgICAgIGlmIChvcHQudGltZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyVGltZSgndGltZTEnLCBkYXRlMSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3dNb250aChkYXRlMSwgJ21vbnRoMScpO1xuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVNb250aCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRlMiA9IG5leHRNb250aChkYXRlMSk7XG4gICAgICAgICAgICAgICAgc2hvd01vbnRoKGRhdGUyLCAnbW9udGgyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG93R2FwKCk7XG4gICAgICAgICAgICBzaG93U2VsZWN0ZWRJbmZvKCk7XG4gICAgICAgICAgICBhdXRvY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dTZWxlY3RlZERheXMoKSB7XG4gICAgICAgICAgICBpZiAoIW9wdC5zdGFydCAmJiAhb3B0LmVuZCkgcmV0dXJuO1xuICAgICAgICAgICAgYm94LmZpbmQoJy5kYXknKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lID0gcGFyc2VJbnQoJCh0aGlzKS5hdHRyKCd0aW1lJykpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG9wdC5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gb3B0LmVuZDtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnRpbWUuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lID0gbW9tZW50KHRpbWUpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBtb21lbnQoc3RhcnQgfHwgbW9tZW50KCkudmFsdWVPZigpKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG1vbWVudChlbmQgfHwgbW9tZW50KCkudmFsdWVPZigpKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKG9wdC5zdGFydCAmJiBvcHQuZW5kICYmIGVuZCA+PSB0aW1lICYmIHN0YXJ0IDw9IHRpbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIChvcHQuc3RhcnQgJiYgIW9wdC5lbmQgJiYgbW9tZW50KHN0YXJ0KS5mb3JtYXQoJ1lZWVktTU0tREQnKSA9PSBtb21lbnQodGltZSkuZm9ybWF0KCdZWVlZLU1NLUREJykpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygndGQtY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygndGQtY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vYWRkIGZpcnN0LWRhdGUtc2VsZWN0ZWQgY2xhc3MgbmFtZSB0byB0aGUgZmlyc3QgZGF0ZSBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIGlmIChvcHQuc3RhcnQgJiYgbW9tZW50KHN0YXJ0KS5mb3JtYXQoJ1lZWVktTU0tREQnKSA9PSBtb21lbnQodGltZSkuZm9ybWF0KCdZWVlZLU1NLUREJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnZmlyc3QtZGF0ZS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKCd0ZC1maXJzdC1kYXRlLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZmlyc3QtZGF0ZS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd0ZC1maXJzdC1kYXRlLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vYWRkIGxhc3QtZGF0ZS1zZWxlY3RlZFxuICAgICAgICAgICAgICAgIGlmIChvcHQuZW5kICYmIG1vbWVudChlbmQpLmZvcm1hdCgnWVlZWS1NTS1ERCcpID09IG1vbWVudCh0aW1lKS5mb3JtYXQoJ1lZWVktTU0tREQnKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdsYXN0LWRhdGUtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygndGQtbGFzdC1kYXRlLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnbGFzdC1kYXRlLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ3RkLWxhc3QtZGF0ZS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBib3guZmluZCgnLndlZWstbnVtYmVyJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCdkYXRhLXN0YXJ0LXRpbWUnKSA9PSBvcHQuc3RhcnRXZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3dlZWstbnVtYmVyLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG93TW9udGgoZGF0ZSwgbW9udGgpIHtcbiAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoZGF0ZSkudG9EYXRlKCk7XG4gICAgICAgICAgICB2YXIgbW9udGhFbGVtZW50ID0gZ2VuZXJhdGVNb250aEVsZW1lbnQoZGF0ZSwgbW9udGgpO1xuICAgICAgICAgICAgdmFyIHllYXJFbGVtZW50ID0gZ2VuZXJhdGVZZWFyRWxlbWVudChkYXRlLCBtb250aCk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcuJyArIG1vbnRoICsgJyAubW9udGgtbmFtZScpLmh0bWwobW9udGhFbGVtZW50ICsgJyAnICsgeWVhckVsZW1lbnQpO1xuICAgICAgICAgICAgYm94LmZpbmQoJy4nICsgbW9udGggKyAnIHRib2R5JykuaHRtbChjcmVhdGVNb250aEhUTUwoZGF0ZSkpO1xuICAgICAgICAgICAgb3B0W21vbnRoXSA9IGRhdGU7XG4gICAgICAgICAgICB1cGRhdGVTZWxlY3RhYmxlUmFuZ2UoKTtcbiAgICAgICAgICAgIGJpbmRFdmVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTW9udGhFbGVtZW50KGRhdGUsIG1vbnRoKSB7XG4gICAgICAgICAgICBkYXRlID0gbW9tZW50KGRhdGUpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRNb250aCA9IGRhdGUuZ2V0KCdtb250aCcpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRNb250aE5hbWUgPSBuYW1lTW9udGgoY3VycmVudE1vbnRoKTtcbiAgICAgICAgICAgIHZhciBub25TZWxlY3RhYmxlTW9udGggPSAnPGRpdiBjbGFzcz1cIm1vbnRoLWVsZW1lbnRcIj4nICsgY3VycmVudE1vbnRoTmFtZSArICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICBpZiAoIW9wdC5tb250aFNlbGVjdCkgeyByZXR1cm4gbm9uU2VsZWN0YWJsZU1vbnRoOyB9XG5cbiAgICAgICAgICAgIHZhciBzdGFydERhdGUgPSBvcHQuc3RhcnREYXRlID8gbW9tZW50KG9wdC5zdGFydERhdGUpLmFkZCghb3B0LnNpbmdsZU1vbnRoICYmIG1vbnRoID09PSAnbW9udGgyJyA/IDEgOiAwLCAnbW9udGgnKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBvcHQuZW5kRGF0ZSA/IG1vbWVudChvcHQuZW5kRGF0ZSkuYWRkKCFvcHQuc2luZ2xlTW9udGggJiYgbW9udGggPT09ICdtb250aDEnID8gLTEgOiAwLCAnbW9udGgnKSA6IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgbWluU2VsZWN0YWJsZU1vbnRoID0gc3RhcnREYXRlICYmIGRhdGUuaXNTYW1lKHN0YXJ0RGF0ZSwgJ3llYXInKSA/IHN0YXJ0RGF0ZS5nZXQoJ21vbnRoJykgOiAwO1xuICAgICAgICAgICAgdmFyIG1heFNlbGVjdGFibGVNb250aCA9IGVuZERhdGUgJiYgZGF0ZS5pc1NhbWUoZW5kRGF0ZSwgJ3llYXInKSA/IGVuZERhdGUuZ2V0KCdtb250aCcpIDogMTE7XG4gICAgICAgICAgICB2YXIgbWluVmlzaWJsZU1vbnRoID0gTWF0aC5taW4obWluU2VsZWN0YWJsZU1vbnRoLCBjdXJyZW50TW9udGgpO1xuICAgICAgICAgICAgdmFyIG1heFZpc2libGVNb250aCA9IE1hdGgubWF4KG1heFNlbGVjdGFibGVNb250aCwgY3VycmVudE1vbnRoKTtcblxuICAgICAgICAgICAgaWYgKG1pblZpc2libGVNb250aCA9PT0gbWF4VmlzaWJsZU1vbnRoKSB7IHJldHVybiBub25TZWxlY3RhYmxlTW9udGg7IH1cblxuICAgICAgICAgICAgdmFyIHNlbGVjdERhdGEgPSBnZW5lcmF0ZVNlbGVjdERhdGEoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtaW5TZWxlY3RhYmxlOiBtaW5TZWxlY3RhYmxlTW9udGgsXG4gICAgICAgICAgICAgICAgICAgIG1heFNlbGVjdGFibGU6IG1heFNlbGVjdGFibGVNb250aCxcbiAgICAgICAgICAgICAgICAgICAgbWluVmlzaWJsZTogbWluVmlzaWJsZU1vbnRoLFxuICAgICAgICAgICAgICAgICAgICBtYXhWaXNpYmxlOiBtYXhWaXNpYmxlTW9udGgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjdXJyZW50TW9udGgsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBuYW1lTW9udGgodmFsdWUpOyB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVTZWxlY3QoJ21vbnRoJywgc2VsZWN0RGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVllYXJFbGVtZW50KGRhdGUsIG1vbnRoKSB7XG4gICAgICAgICAgICBkYXRlID0gbW9tZW50KGRhdGUpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZGF0ZS5nZXQoJ3llYXInKTtcbiAgICAgICAgICAgIHZhciBub25TZWxlY3RhYmxlTW9udGggPSAnPGRpdiBjbGFzcz1cIm1vbnRoLWVsZW1lbnRcIj4nICsgY3VycmVudFllYXIgKyAnPC9kaXY+JztcblxuICAgICAgICAgICAgaWYgKCFvcHQueWVhclNlbGVjdCkgeyByZXR1cm4gbm9uU2VsZWN0YWJsZU1vbnRoOyB9XG5cbiAgICAgICAgICAgIHZhciBpc1llYXJGdW5jdGlvbiA9IG9wdC55ZWFyU2VsZWN0ICYmIHR5cGVvZiBvcHQueWVhclNlbGVjdCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgIHZhciBzdGFydERhdGUgPSBvcHQuc3RhcnREYXRlID8gbW9tZW50KG9wdC5zdGFydERhdGUpLmFkZCghb3B0LnNpbmdsZU1vbnRoICYmIG1vbnRoID09PSAnbW9udGgyJyA/IDEgOiAwLCAnbW9udGgnKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBvcHQuZW5kRGF0ZSA/IG1vbWVudChvcHQuZW5kRGF0ZSkuYWRkKCFvcHQuc2luZ2xlTW9udGggJiYgbW9udGggPT09ICdtb250aDEnID8gLTEgOiAwLCAnbW9udGgnKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gaXNZZWFyRnVuY3Rpb24gPyBvcHQueWVhclNlbGVjdChjdXJyZW50WWVhcikgOiBvcHQueWVhclNlbGVjdC5zbGljZSgpO1xuXG4gICAgICAgICAgICB2YXIgbWluU2VsZWN0YWJsZVllYXIgPSBzdGFydERhdGUgPyBNYXRoLm1heChyYW5nZVswXSwgc3RhcnREYXRlLmdldCgneWVhcicpKSA6IE1hdGgubWluKHJhbmdlWzBdLCBjdXJyZW50WWVhcik7XG4gICAgICAgICAgICB2YXIgbWF4U2VsZWN0YWJsZVllYXIgPSBlbmREYXRlID8gTWF0aC5taW4ocmFuZ2VbMV0sIGVuZERhdGUuZ2V0KCd5ZWFyJykpIDogTWF0aC5tYXgocmFuZ2VbMV0sIGN1cnJlbnRZZWFyKTtcbiAgICAgICAgICAgIHZhciBtaW5WaXNpYmxlWWVhciA9IE1hdGgubWluKG1pblNlbGVjdGFibGVZZWFyLCBjdXJyZW50WWVhcik7XG4gICAgICAgICAgICB2YXIgbWF4VmlzaWJsZVllYXIgPSBNYXRoLm1heChtYXhTZWxlY3RhYmxlWWVhciwgY3VycmVudFllYXIpO1xuXG4gICAgICAgICAgICBpZiAobWluVmlzaWJsZVllYXIgPT09IG1heFZpc2libGVZZWFyKSB7IHJldHVybiBub25TZWxlY3RhYmxlTW9udGg7IH1cblxuICAgICAgICAgICAgdmFyIHNlbGVjdERhdGEgPSBnZW5lcmF0ZVNlbGVjdERhdGEoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtaW5TZWxlY3RhYmxlOiBtaW5TZWxlY3RhYmxlWWVhcixcbiAgICAgICAgICAgICAgICAgICAgbWF4U2VsZWN0YWJsZTogbWF4U2VsZWN0YWJsZVllYXIsXG4gICAgICAgICAgICAgICAgICAgIG1pblZpc2libGU6IG1pblZpc2libGVZZWFyLFxuICAgICAgICAgICAgICAgICAgICBtYXhWaXNpYmxlOiBtYXhWaXNpYmxlWWVhcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRZZWFyXG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVTZWxlY3QoJ3llYXInLCBzZWxlY3REYXRhKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVTZWxlY3REYXRhKHJhbmdlLCBjdXJyZW50LCB2YWx1ZUJlYXV0aWZpZXIpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gW107XG4gICAgICAgICAgICB2YWx1ZUJlYXV0aWZpZXIgPSB2YWx1ZUJlYXV0aWZpZXIgfHwgZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcmFuZ2UubWluVmlzaWJsZTsgaSA8PSByYW5nZS5tYXhWaXNpYmxlOyBpKyspIHtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdmFsdWVCZWF1dGlmaWVyKGkpLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogaSA9PT0gY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICgoaSA8IHJhbmdlLm1pblNlbGVjdGFibGUpIHx8IChpID4gcmFuZ2UubWF4U2VsZWN0YWJsZSkpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU2VsZWN0KG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3QgPSAnPGRpdiBjbGFzcz1cInNlbGVjdC13cmFwcGVyXCI+PHNlbGVjdCBjbGFzcz1cIicgKyBuYW1lICsgJ1wiIG5hbWU9XCInICsgbmFtZSArICdcIj4nO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgc2VsZWN0ICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIGl0ZW0udmFsdWUgKyAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgKGl0ZW0uc2VsZWN0ZWQgPyAnIHNlbGVjdGVkJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChpdGVtLmRpc2FibGVkID8gJyBkaXNhYmxlZCcgOiAnJykgKyAnPicgK1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnRleHQgKyAnPC9vcHRpb24+JztcblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVtLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxlY3QgKz0gJzwvc2VsZWN0PicgKyBjdXJyZW50ICsgJzwvZGl2Pic7XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICAgICAgYm94LmZpbmQoJy5kYXknKS5vZmYoXCJjbGlja1wiKS5jbGljayhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBkYXlDbGlja2VkKCQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcuZGF5Jykub2ZmKFwibW91c2VlbnRlclwiKS5tb3VzZWVudGVyKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGRheUhvdmVyaW5nKCQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcuZGF5Jykub2ZmKFwibW91c2VsZWF2ZVwiKS5tb3VzZWxlYXZlKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGJveC5maW5kKCcuZGF0ZS1yYW5nZS1sZW5ndGgtdGlwJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGlmIChvcHQuc2luZ2xlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckhvdmVyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJveC5maW5kKCcud2Vlay1udW1iZXInKS5vZmYoXCJjbGlja1wiKS5jbGljayhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrTnVtYmVyQ2xpY2tlZCgkKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBib3guZmluZCgnLm1vbnRoJykub2ZmKFwiY2hhbmdlXCIpLmNoYW5nZShmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBkYXRlQ2hhbmdlZCgkKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBib3guZmluZCgnLnllYXInKS5vZmYoXCJjaGFuZ2VcIikuY2hhbmdlKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGRhdGVDaGFuZ2VkKCQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG93VGltZShkYXRlLCBuYW1lKSB7XG4gICAgICAgICAgICBib3guZmluZCgnLicgKyBuYW1lKS5hcHBlbmQoZ2V0VGltZUhUTUwoKSk7XG4gICAgICAgICAgICByZW5kZXJUaW1lKG5hbWUsIGRhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmFtZU1vbnRoKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUoJ21vbnRoLW5hbWUnKVttXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldERhdGVTdHJpbmcoZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkKS5mb3JtYXQob3B0LmZvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG93R2FwKCkge1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkRGF5cygpO1xuICAgICAgICAgICAgdmFyIG0xID0gcGFyc2VJbnQobW9tZW50KG9wdC5tb250aDEpLmZvcm1hdCgnWVlZWU1NJykpO1xuICAgICAgICAgICAgdmFyIG0yID0gcGFyc2VJbnQobW9tZW50KG9wdC5tb250aDIpLmZvcm1hdCgnWVlZWU1NJykpO1xuICAgICAgICAgICAgdmFyIHAgPSBNYXRoLmFicyhtMSAtIG0yKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRTaG93ID0gKHAgPiAxICYmIHAgIT0gODkpO1xuICAgICAgICAgICAgaWYgKHNob3VsZFNob3cpIHtcbiAgICAgICAgICAgICAgICBib3guYWRkQ2xhc3MoJ2hhcy1nYXAnKS5yZW1vdmVDbGFzcygnbm8tZ2FwJykuZmluZCgnLmdhcCcpLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJveC5yZW1vdmVDbGFzcygnaGFzLWdhcCcpLmFkZENsYXNzKCduby1nYXAnKS5maW5kKCcuZ2FwJykuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGgxID0gYm94LmZpbmQoJ3RhYmxlLm1vbnRoMScpLmhlaWdodCgpO1xuICAgICAgICAgICAgdmFyIGgyID0gYm94LmZpbmQoJ3RhYmxlLm1vbnRoMicpLmhlaWdodCgpO1xuICAgICAgICAgICAgYm94LmZpbmQoJy5nYXAnKS5oZWlnaHQoTWF0aC5tYXgoaDEsIGgyKSArIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsb3NlRGF0ZVBpY2tlcigpIHtcbiAgICAgICAgICAgIGlmIChvcHQuYWx3YXlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgYWZ0ZXJBbmltID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmKS5kYXRhKCdkYXRlLXBpY2tlci1vcGVuZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgJChzZWxmKS50cmlnZ2VyKCdkYXRlcGlja2VyLWNsb3NlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogYm94XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG9wdC5jdXN0b21DbG9zZUFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIG9wdC5jdXN0b21DbG9zZUFuaW1hdGlvbi5jYWxsKGJveC5nZXQoMCksIGFmdGVyQW5pbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoYm94KS5zbGlkZVVwKG9wdC5kdXJhdGlvbiwgYWZ0ZXJBbmltKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoc2VsZikudHJpZ2dlcignZGF0ZXBpY2tlci1jbG9zZScsIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBib3hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVkcmF3RGF0ZVBpY2tlcigpIHtcbiAgICAgICAgICAgIHNob3dNb250aChvcHQubW9udGgxLCAnbW9udGgxJyk7XG4gICAgICAgICAgICBzaG93TW9udGgob3B0Lm1vbnRoMiwgJ21vbnRoMicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZV9tb250aChtMSwgbTIpIHtcbiAgICAgICAgICAgIHZhciBwID0gcGFyc2VJbnQobW9tZW50KG0xKS5mb3JtYXQoJ1lZWVlNTScpKSAtIHBhcnNlSW50KG1vbWVudChtMikuZm9ybWF0KCdZWVlZTU0nKSk7XG4gICAgICAgICAgICBpZiAocCA+IDApIHJldHVybiAxO1xuICAgICAgICAgICAgaWYgKHAgPT09IDApIHJldHVybiAwO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZV9kYXkobTEsIG0yKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHBhcnNlSW50KG1vbWVudChtMSkuZm9ybWF0KCdZWVlZTU1ERCcpKSAtIHBhcnNlSW50KG1vbWVudChtMikuZm9ybWF0KCdZWVlZTU1ERCcpKTtcbiAgICAgICAgICAgIGlmIChwID4gMCkgcmV0dXJuIDE7XG4gICAgICAgICAgICBpZiAocCA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuZXh0TW9udGgobW9udGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQobW9udGgpLmFkZCgxLCAnbW9udGhzJykudG9EYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcmV2TW9udGgobW9udGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQobW9udGgpLmFkZCgtMSwgJ21vbnRocycpLnRvRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGltZUhUTUwoKSB7XG4gICAgICAgICAgICByZXR1cm4gJzxkaXY+JyArXG4gICAgICAgICAgICAgICAgJzxzcGFuPicgKyB0cmFuc2xhdGUoJ1RpbWUnKSArICc6IDxzcGFuIGNsYXNzPVwiaG91ci12YWxcIj4wMDwvc3Bhbj46PHNwYW4gY2xhc3M9XCJtaW51dGUtdmFsXCI+MDA8L3NwYW4+PC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImhvdXJcIj4nICtcbiAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyB0cmFuc2xhdGUoJ0hvdXInKSArICc6IDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBjbGFzcz1cImhvdXItcmFuZ2VcIiBuYW1lPVwiaG91clwiIG1pbj1cIjBcIiBtYXg9XCIyM1wiPjwvbGFiZWw+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWludXRlXCI+JyArXG4gICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgdHJhbnNsYXRlKCdNaW51dGUnKSArICc6IDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBjbGFzcz1cIm1pbnV0ZS1yYW5nZVwiIG5hbWU9XCJtaW51dGVcIiBtaW49XCIwXCIgbWF4PVwiNTlcIj48L2xhYmVsPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRG9tKCkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBjbGFzcz1cImRhdGUtcGlja2VyLXdyYXBwZXInO1xuICAgICAgICAgICAgaWYgKG9wdC5leHRyYUNsYXNzKSBodG1sICs9ICcgJyArIG9wdC5leHRyYUNsYXNzICsgJyAnO1xuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKSBodG1sICs9ICcgc2luZ2xlLWRhdGUgJztcbiAgICAgICAgICAgIGlmICghb3B0LnNob3dTaG9ydGN1dHMpIGh0bWwgKz0gJyBuby1zaG9ydGN1dHMgJztcbiAgICAgICAgICAgIGlmICghb3B0LnNob3dUb3BiYXIpIGh0bWwgKz0gJyBuby10b3BiYXIgJztcbiAgICAgICAgICAgIGlmIChvcHQuY3VzdG9tVG9wQmFyKSBodG1sICs9ICcgY3VzdG9tLXRvcGJhciAnO1xuICAgICAgICAgICAgaHRtbCArPSAnXCI+JztcblxuICAgICAgICAgICAgaWYgKG9wdC5zaG93VG9wYmFyKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cImRycF90b3AtYmFyXCI+JztcblxuICAgICAgICAgICAgICAgIGlmIChvcHQuY3VzdG9tVG9wQmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0LmN1c3RvbVRvcEJhciA9PSAnZnVuY3Rpb24nKSBvcHQuY3VzdG9tVG9wQmFyID0gb3B0LmN1c3RvbVRvcEJhcigpO1xuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiY3VzdG9tLXRvcFwiPicgKyBvcHQuY3VzdG9tVG9wQmFyICsgJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cIm5vcm1hbC10b3BcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdGlvbi10b3BcIj4nICsgdHJhbnNsYXRlKCdzZWxlY3RlZCcpICsgJyA8L3NwYW4+IDxiIGNsYXNzPVwic3RhcnQtZGF5XCI+Li4uPC9iPic7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0LnNpbmdsZURhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJyA8c3BhbiBjbGFzcz1cInNlcGFyYXRvci1kYXlcIj4nICsgb3B0LnNlcGFyYXRvciArICc8L3NwYW4+IDxiIGNsYXNzPVwiZW5kLWRheVwiPi4uLjwvYj4gPGkgY2xhc3M9XCJzZWxlY3RlZC1kYXlzXCI+KDxzcGFuIGNsYXNzPVwic2VsZWN0ZWQtZGF5cy1udW1cIj4zPC9zcGFuPiAnICsgdHJhbnNsYXRlKCdkYXlzJykgKyAnKTwvaT4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJlcnJvci10b3BcIj5lcnJvcjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkZWZhdWx0LXRvcFwiPmRlZmF1bHQ8L2Rpdj4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhcHBseS1idG4gZGlzYWJsZWQnICsgZ2V0QXBwbHlCdG5DbGFzcygpICsgJ1wiIHZhbHVlPVwiJyArIHRyYW5zbGF0ZSgnYXBwbHknKSArICdcIiAvPic7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC9kaXY+JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9jb2xzcGFuID0gb3B0LnNob3dXZWVrTnVtYmVycyA/IDYgOiA1O1xuXG4gICAgICAgICAgICB2YXIgYXJyb3dQcmV2ID0gJyZsdDsnO1xuICAgICAgICAgICAgaWYgKG9wdC5jdXN0b21BcnJvd1ByZXZTeW1ib2wpIGFycm93UHJldiA9IG9wdC5jdXN0b21BcnJvd1ByZXZTeW1ib2w7XG5cbiAgICAgICAgICAgIHZhciBhcnJvd05leHQgPSAnJmd0Oyc7XG4gICAgICAgICAgICBpZiAob3B0LmN1c3RvbUFycm93TmV4dFN5bWJvbCkgYXJyb3dOZXh0ID0gb3B0LmN1c3RvbUFycm93TmV4dFN5bWJvbDtcblxuICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cIm1vbnRoLXdyYXBwZXJcIj4nICtcbiAgICAgICAgICAgICAgICAnICAgPHRhYmxlIGNsYXNzPVwibW9udGgxXCIgY2VsbHNwYWNpbmc9XCIwXCIgYm9yZGVyPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgPHRoZWFkPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgICAgIDx0ciBjbGFzcz1cImNhcHRpb25cIj4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICAgICAgICAgPHRoPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmV2XCI+JyArXG4gICAgICAgICAgICAgICAgYXJyb3dQcmV2ICtcbiAgICAgICAgICAgICAgICAnICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICAgICAgICAgPC90aD4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49XCInICsgX2NvbHNwYW4gKyAnXCIgY2xhc3M9XCJtb250aC1uYW1lXCI+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgIDwvdGg+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgIDx0aD4nICtcbiAgICAgICAgICAgICAgICAob3B0LnNpbmdsZURhdGUgfHwgIW9wdC5zdGlja3lNb250aHMgPyAnPHNwYW4gY2xhc3M9XCJuZXh0XCI+JyArIGFycm93TmV4dCArICc8L3NwYW4+JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgIDwvdGg+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgICAgPC90cj4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICAgICA8dHIgY2xhc3M9XCJ3ZWVrLW5hbWVcIj4nICsgZ2V0V2Vla0hlYWQoKSArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8L3RoZWFkPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgPHRib2R5PjwvdGJvZHk+JyArXG4gICAgICAgICAgICAgICAgJyAgIDwvdGFibGU+JztcblxuICAgICAgICAgICAgaWYgKGhhc01vbnRoMigpKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cImdhcFwiPicgKyBnZXRHYXBIVE1MKCkgKyAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCJtb250aDJcIiBjZWxsc3BhY2luZz1cIjBcIiBib3JkZXI9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICcgICA8dGhlYWQ+JyArXG4gICAgICAgICAgICAgICAgICAgICcgICA8dHIgY2xhc3M9XCJjYXB0aW9uXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICcgICAgICAgPHRoPicgK1xuICAgICAgICAgICAgICAgICAgICAoIW9wdC5zdGlja3lNb250aHMgPyAnPHNwYW4gY2xhc3M9XCJwcmV2XCI+JyArIGFycm93UHJldiArICc8L3NwYW4+JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICcgICAgICAgPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8dGggY29sc3Bhbj1cIicgKyBfY29sc3BhbiArICdcIiBjbGFzcz1cIm1vbnRoLW5hbWVcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8L3RoPicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgICAgIDx0aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuZXh0XCI+JyArIGFycm93TmV4dCArICc8L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICcgICAgICAgPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgIDwvdHI+JyArXG4gICAgICAgICAgICAgICAgICAgICcgICA8dHIgY2xhc3M9XCJ3ZWVrLW5hbWVcIj4nICsgZ2V0V2Vla0hlYWQoKSArXG4gICAgICAgICAgICAgICAgICAgICcgICA8L3RoZWFkPicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgPHRib2R5PjwvdGJvZHk+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L3RhYmxlPic7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vKyc8L2Rpdj4nXG4gICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiZHAtY2xlYXJmaXhcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpbWVcIj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpbWUxXCI+PC9kaXY+JztcbiAgICAgICAgICAgIGlmICghb3B0LnNpbmdsZURhdGUpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwidGltZTJcIj48L2Rpdj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCArPSAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkcC1jbGVhcmZpeFwiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXJfX2Zvb3RlclwiPic7XG4gICAgICAgICAgICBpZiAob3B0LnNob3dTaG9ydGN1dHMpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwic2hvcnRjdXRzXCI+PGI+JyArIHRyYW5zbGF0ZSgnc2hvcnRjdXRzJykgKyAnPC9iPic7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG9wdC5zaG9ydGN1dHM7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhWydwcmV2LWRheXMnXSAmJiBkYXRhWydwcmV2LWRheXMnXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcmbmJzcDs8c3BhbiBjbGFzcz1cInByZXYtZGF5c1wiPicgKyB0cmFuc2xhdGUoJ3Bhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YVsncHJldi1kYXlzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gZGF0YVsncHJldi1kYXlzJ11baV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArPSAoZGF0YVsncHJldi1kYXlzJ11baV0gPiAxKSA/IHRyYW5zbGF0ZSgnZGF5cycpIDogdHJhbnNsYXRlKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcgPGEgaHJlZj1cImphdmFzY3JpcHQ6O1wiIHNob3J0Y3V0PVwiZGF5LC0nICsgZGF0YVsncHJldi1kYXlzJ11baV0gKyAnXCI+JyArIG5hbWUgKyAnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhWyduZXh0LWRheXMnXSAmJiBkYXRhWyduZXh0LWRheXMnXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcmbmJzcDs8c3BhbiBjbGFzcz1cIm5leHQtZGF5c1wiPicgKyB0cmFuc2xhdGUoJ2ZvbGxvd2luZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhWyduZXh0LWRheXMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBkYXRhWyduZXh0LWRheXMnXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICs9IChkYXRhWyduZXh0LWRheXMnXVtpXSA+IDEpID8gdHJhbnNsYXRlKCdkYXlzJykgOiB0cmFuc2xhdGUoJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJyA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgc2hvcnRjdXQ9XCJkYXksJyArIGRhdGFbJ25leHQtZGF5cyddW2ldICsgJ1wiPicgKyBuYW1lICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5wcmV2ICYmIGRhdGEucHJldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcmbmJzcDs8c3BhbiBjbGFzcz1cInByZXYtYnV0dG9uc1wiPicgKyB0cmFuc2xhdGUoJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEucHJldi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0cmFuc2xhdGUoJ3ByZXYtJyArIGRhdGEucHJldltpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnIDxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBzaG9ydGN1dD1cInByZXYsJyArIGRhdGEucHJldltpXSArICdcIj4nICsgbmFtZSArICc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubmV4dCAmJiBkYXRhLm5leHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJm5ic3A7PHNwYW4gY2xhc3M9XCJuZXh0LWJ1dHRvbnNcIj4nICsgdHJhbnNsYXRlKCduZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubmV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0cmFuc2xhdGUoJ25leHQtJyArIGRhdGEubmV4dFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnIDxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBzaG9ydGN1dD1cIm5leHQsJyArIGRhdGEubmV4dFtpXSArICdcIj4nICsgbmFtZSArICc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdC5jdXN0b21TaG9ydGN1dHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHQuY3VzdG9tU2hvcnRjdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2ggPSBvcHQuY3VzdG9tU2hvcnRjdXRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJm5ic3A7PHNwYW4gY2xhc3M9XCJjdXN0b20tc2hvcnRjdXRcIj48YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgc2hvcnRjdXQ9XCJjdXN0b21cIj4nICsgc2gubmFtZSArICc8L2E+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC9kaXY+JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIEN1c3RvbSBWYWx1ZXMgRG9tXG4gICAgICAgICAgICBpZiAob3B0LnNob3dDdXN0b21WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiY3VzdG9tVmFsdWVzXCI+PGI+JyArIChvcHQuY3VzdG9tVmFsdWVMYWJlbCB8fCB0cmFuc2xhdGUoJ2N1c3RvbS12YWx1ZXMnKSkgKyAnPC9iPic7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0LmN1c3RvbVZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdC5jdXN0b21WYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBvcHQuY3VzdG9tVmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJm5ic3A7PHNwYW4gY2xhc3M9XCJjdXN0b20tdmFsdWVcIj48YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY3VzdG9tPVwiJyArIHZhbC52YWx1ZSArICdcIj4nICsgdmFsLm5hbWUgKyAnPC9hPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ3VzdG9tIGNvZGUvIEFkZGluZyBidXR0b25zLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0hXG5cbi8qICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJjYWxlbmRhcl9fbGluay13cmFwXCI+PGEgY2xhc3M9XCJsaW5rIGNhbGVuZGFyX19saW5rX2NsZWFyIGxpbmtfZ3JleVwiPtCe0YfQuNGB0YLQuNGC0Yw8L2E+PGEgY2xhc3M9XCJsaW5rIGNhbGVuZGFyX19saW5rX2FwcGx5IGxpbmtfY29sb3JlZFwiPtCf0YDQuNC80LXQvdC40YLRjDwvYT4nOyAqL1xuXG4gICAgICAgICAgICBodG1sICs9ICc8L2Rpdj48L2Rpdj4nO1xuXG5cbiAgICAgICAgICAgIHJldHVybiAkKGh0bWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QXBwbHlCdG5DbGFzcygpIHtcbiAgICAgICAgICAgIHZhciBrbGFzcyA9ICcnO1xuICAgICAgICAgICAgaWYgKG9wdC5hdXRvQ2xvc2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBrbGFzcyArPSAnIGhpZGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdC5hcHBseUJ0bkNsYXNzICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGtsYXNzICs9ICcgJyArIG9wdC5hcHBseUJ0bkNsYXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtsYXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0V2Vla0hlYWQoKSB7XG4gICAgICAgICAgICB2YXIgcHJlcGVuZCA9IG9wdC5zaG93V2Vla051bWJlcnMgPyAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstbnVtYmVyJykgKyAnPC90aD4nIDogJyc7XG4gICAgICAgICAgICBpZiAob3B0LnN0YXJ0T2ZXZWVrID09ICdtb25kYXknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXBlbmQgKyAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstMScpICsgJzwvdGg+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGg+JyArIHRyYW5zbGF0ZSgnd2Vlay0yJykgKyAnPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0aD4nICsgdHJhbnNsYXRlKCd3ZWVrLTMnKSArICc8L3RoPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstNCcpICsgJzwvdGg+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGg+JyArIHRyYW5zbGF0ZSgnd2Vlay01JykgKyAnPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0aD4nICsgdHJhbnNsYXRlKCd3ZWVrLTYnKSArICc8L3RoPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstNycpICsgJzwvdGg+JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXBlbmQgKyAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstNycpICsgJzwvdGg+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGg+JyArIHRyYW5zbGF0ZSgnd2Vlay0xJykgKyAnPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0aD4nICsgdHJhbnNsYXRlKCd3ZWVrLTInKSArICc8L3RoPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstMycpICsgJzwvdGg+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGg+JyArIHRyYW5zbGF0ZSgnd2Vlay00JykgKyAnPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0aD4nICsgdHJhbnNsYXRlKCd3ZWVrLTUnKSArICc8L3RoPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRoPicgKyB0cmFuc2xhdGUoJ3dlZWstNicpICsgJzwvdGg+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzTW9udGhPdXRPZkJvdW5kcyhtb250aCkge1xuICAgICAgICAgICAgbW9udGggPSBtb21lbnQobW9udGgpO1xuICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgbW9udGguZW5kT2YoJ21vbnRoJykuaXNCZWZvcmUob3B0LnN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHQuZW5kRGF0ZSAmJiBtb250aC5zdGFydE9mKCdtb250aCcpLmlzQWZ0ZXIob3B0LmVuZERhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHYXBIVE1MKCkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSBbJzxkaXYgY2xhc3M9XCJnYXAtdG9wLW1hc2tcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZ2FwLWJvdHRvbS1tYXNrXCI+PC9kaXY+PGRpdiBjbGFzcz1cImdhcC1saW5lc1wiPiddO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwiZ2FwLWxpbmVcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJnYXAtMVwiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImdhcC0yXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZ2FwLTNcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj4nKTtcbiAgICAgICAgICAgIHJldHVybiBodG1sLmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFzTW9udGgyKCkge1xuICAgICAgICAgICAgcmV0dXJuICghb3B0LnNpbmdsZU1vbnRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGF0dHJpYnV0ZXNDYWxsYmFja3MoaW5pdGlhbE9iamVjdCwgY2FsbGJhY2tzQXJyYXksIHRvZGF5KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0T2JqZWN0ID0gJC5leHRlbmQodHJ1ZSwge30sIGluaXRpYWxPYmplY3QpO1xuXG4gICAgICAgICAgICAkLmVhY2goY2FsbGJhY2tzQXJyYXksIGZ1bmN0aW9uKGNiQXR0ckluZGV4LCBjYkF0dHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWRkQXR0cmlidXRlcyA9IGNiQXR0cih0b2RheSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBhZGRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRPYmplY3QuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdE9iamVjdFthdHRyXSArPSBhZGRBdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0T2JqZWN0W2F0dHJdID0gYWRkQXR0cmlidXRlc1thdHRyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgYXR0clN0cmluZyA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIHJlc3VsdE9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRPYmplY3QuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0clN0cmluZyArPSBhdHRyICsgJz1cIicgKyByZXN1bHRPYmplY3RbYXR0cl0gKyAnXCIgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhdHRyU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlTW9udGhIVE1MKGQpIHtcbiAgICAgICAgICAgIHZhciBkYXlzID0gW107XG4gICAgICAgICAgICBkLnNldERhdGUoMSk7XG4gICAgICAgICAgICB2YXIgbGFzdE1vbnRoID0gbmV3IERhdGUoZC5nZXRUaW1lKCkgLSA4NjQwMDAwMCk7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgdmFyIGRheU9mV2VlayA9IGQuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAoKGRheU9mV2VlayA9PT0gMCkgJiYgKG9wdC5zdGFydE9mV2VlayA9PT0gJ21vbmRheScpKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIG9uZSB3ZWVrXG4gICAgICAgICAgICAgICAgZGF5T2ZXZWVrID0gNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b2RheSwgdmFsaWQ7XG5cbiAgICAgICAgICAgIGlmIChkYXlPZldlZWsgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRheU9mV2VlazsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gbmV3IERhdGUoZC5nZXRUaW1lKCkgLSA4NjQwMDAwMCAqIGkpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGlzVmFsaWRUaW1lKGRheS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0RGF0ZSAmJiBjb21wYXJlX2RheShkYXksIG9wdC5zdGFydERhdGUpIDwgMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5lbmREYXRlICYmIGNvbXBhcmVfZGF5KGRheSwgb3B0LmVuZERhdGUpID4gMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZGF5cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsYXN0TW9udGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiBkYXkuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogZGF5LmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiB2YWxpZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG9Nb250aCA9IGQuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDA7IGkrKykge1xuICAgICAgICAgICAgICAgIHRvZGF5ID0gbW9tZW50KGQpLmFkZChpLCAnZGF5cycpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhbGlkID0gaXNWYWxpZFRpbWUodG9kYXkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0RGF0ZSAmJiBjb21wYXJlX2RheSh0b2RheSwgb3B0LnN0YXJ0RGF0ZSkgPCAwKSB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChvcHQuZW5kRGF0ZSAmJiBjb21wYXJlX2RheSh0b2RheSwgb3B0LmVuZERhdGUpID4gMCkgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBkYXlzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiB0b2RheSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdG9kYXkuZ2V0TW9udGgoKSA9PSB0b01vbnRoID8gJ3RvTW9udGgnIDogJ25leHRNb250aCcsXG4gICAgICAgICAgICAgICAgICAgIGRheTogdG9kYXkuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aW1lOiB0b2RheS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkOiB2YWxpZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGh0bWwgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHdlZWsgPSAwOyB3ZWVrIDwgNjsgd2VlaysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRheXNbd2VlayAqIDddLnR5cGUgPT0gJ25leHRNb250aCcpIGJyZWFrO1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHRyPicpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZGF5ID0gMDsgZGF5IDwgNzsgZGF5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9kYXkgPSAob3B0LnN0YXJ0T2ZXZWVrID09ICdtb25kYXknKSA/IGRheSArIDEgOiBkYXk7XG4gICAgICAgICAgICAgICAgICAgIHRvZGF5ID0gZGF5c1t3ZWVrICogNyArIF9kYXldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGlnaGxpZ2h0VG9kYXkgPSBtb21lbnQodG9kYXkudGltZSkuZm9ybWF0KCdMJykgPT0gbW9tZW50KG5vdykuZm9ybWF0KCdMJyk7XG4gICAgICAgICAgICAgICAgICAgIHRvZGF5LmV4dHJhQ2xhc3MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdG9kYXkudG9vbHRpcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9kYXkudmFsaWQgJiYgb3B0LmJlZm9yZVNob3dEYXkgJiYgdHlwZW9mIG9wdC5iZWZvcmVTaG93RGF5ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfciA9IG9wdC5iZWZvcmVTaG93RGF5KG1vbWVudCh0b2RheS50aW1lKS50b0RhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RheS52YWxpZCA9IF9yWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9kYXkuZXh0cmFDbGFzcyA9IF9yWzFdIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9kYXkudG9vbHRpcCA9IF9yWzJdIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvZGF5LnRvb2x0aXAgIT09ICcnKSB0b2RheS5leHRyYUNsYXNzICs9ICcgaGFzLXRvb2x0aXAgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2RheURpdkF0dHIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiB0b2RheS50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdG9vbHRpcCc6IHRvZGF5LnRvb2x0aXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnZGF5ICcgKyB0b2RheS50eXBlICsgJyAnICsgdG9kYXkuZXh0cmFDbGFzcyArICcgJyArICh0b2RheS52YWxpZCA/ICd2YWxpZCcgOiAnaW52YWxpZCcpICsgJyAnICsgKGhpZ2hsaWdodFRvZGF5ID8gJ3JlYWwtdG9kYXknIDogJycpXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRheSA9PT0gMCAmJiBvcHQuc2hvd1dlZWtOdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzx0ZD48ZGl2IGNsYXNzPVwid2Vlay1udW1iZXJcIiBkYXRhLXN0YXJ0LXRpbWU9XCInICsgdG9kYXkudGltZSArICdcIj4nICsgb3B0LmdldFdlZWtOdW1iZXIodG9kYXkuZGF0ZSkgKyAnPC9kaXY+PC90ZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHRkICcgKyBhdHRyaWJ1dGVzQ2FsbGJhY2tzKHt9LCBvcHQuZGF5VGRBdHRycywgdG9kYXkpICsgJz48ZGl2ICcgKyBhdHRyaWJ1dGVzQ2FsbGJhY2tzKHRvZGF5RGl2QXR0ciwgb3B0LmRheURpdkF0dHJzLCB0b2RheSkgKyAnPicgKyBzaG93RGF5SFRNTCh0b2RheS50aW1lLCB0b2RheS5kYXkpICsgJzwvZGl2PjwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC90cj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBodG1sLmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvd0RheUhUTUwodGltZSwgZGF0ZSkge1xuICAgICAgICAgICAgaWYgKG9wdC5zaG93RGF0ZUZpbHRlciAmJiB0eXBlb2Ygb3B0LnNob3dEYXRlRmlsdGVyID09ICdmdW5jdGlvbicpIHJldHVybiBvcHQuc2hvd0RhdGVGaWx0ZXIodGltZSwgZGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldExhbmd1YWdlcygpIHtcbiAgICAgICAgICAgIGlmIChvcHQubGFuZ3VhZ2UgPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhbmd1YWdlID0gbmF2aWdhdG9yLmxhbmd1YWdlID8gbmF2aWdhdG9yLmxhbmd1YWdlIDogbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmRhdGVSYW5nZVBpY2tlckxhbmd1YWdlc1snZGVmYXVsdCddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYW5ndWFnZSA9IGxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYobGFuZ3VhZ2UgaW4gJC5kYXRlUmFuZ2VQaWNrZXJMYW5ndWFnZXMpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5kYXRlUmFuZ2VQaWNrZXJMYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAkLmRhdGVSYW5nZVBpY2tlckxhbmd1YWdlc1snZGVmYXVsdCddO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQubGFuZ3VhZ2UgJiYgb3B0Lmxhbmd1YWdlIGluICQuZGF0ZVJhbmdlUGlja2VyTGFuZ3VhZ2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZGF0ZVJhbmdlUGlja2VyTGFuZ3VhZ2VzW29wdC5sYW5ndWFnZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmRhdGVSYW5nZVBpY2tlckxhbmd1YWdlc1snZGVmYXVsdCddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zbGF0ZSBsYW5ndWFnZSBzdHJpbmcsIHRyeSBib3RoIHRoZSBwcm92aWRlZCB0cmFuc2xhdGlvbiBrZXksIGFzIHRoZSBsb3dlciBjYXNlIHZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2xhdGlvbktleSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uS2V5TG93ZXJDYXNlID0gdHJhbnNsYXRpb25LZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAodHJhbnNsYXRpb25LZXkgaW4gbGFuZ3VhZ2VzKSA/IGxhbmd1YWdlc1t0cmFuc2xhdGlvbktleV0gOiAodHJhbnNsYXRpb25LZXlMb3dlckNhc2UgaW4gbGFuZ3VhZ2VzKSA/IGxhbmd1YWdlc1t0cmFuc2xhdGlvbktleUxvd2VyQ2FzZV0gOiBudWxsO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRMYW5ndWFnZSA9ICQuZGF0ZVJhbmdlUGlja2VyTGFuZ3VhZ2VzWydkZWZhdWx0J107XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHJlc3VsdCA9ICh0cmFuc2xhdGlvbktleSBpbiBkZWZhdWx0TGFuZ3VhZ2UpID8gZGVmYXVsdExhbmd1YWdlW3RyYW5zbGF0aW9uS2V5XSA6ICh0cmFuc2xhdGlvbktleUxvd2VyQ2FzZSBpbiBkZWZhdWx0TGFuZ3VhZ2UpID8gZGVmYXVsdExhbmd1YWdlW3RyYW5zbGF0aW9uS2V5TG93ZXJDYXNlXSA6ICcnO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdFRpbWUoKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFRpbWUgPSBvcHQuZGVmYXVsdFRpbWUgPyBvcHQuZGVmYXVsdFRpbWUgOiBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAob3B0Lmxvb2tCZWhpbmQpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0LnN0YXJ0RGF0ZSAmJiBjb21wYXJlX21vbnRoKGRlZmF1bHRUaW1lLCBvcHQuc3RhcnREYXRlKSA8IDApIGRlZmF1bHRUaW1lID0gbmV4dE1vbnRoKG1vbWVudChvcHQuc3RhcnREYXRlKS50b0RhdGUoKSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5lbmREYXRlICYmIGNvbXBhcmVfbW9udGgoZGVmYXVsdFRpbWUsIG9wdC5lbmREYXRlKSA+IDApIGRlZmF1bHRUaW1lID0gbW9tZW50KG9wdC5lbmREYXRlKS50b0RhdGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgY29tcGFyZV9tb250aChkZWZhdWx0VGltZSwgb3B0LnN0YXJ0RGF0ZSkgPCAwKSBkZWZhdWx0VGltZSA9IG1vbWVudChvcHQuc3RhcnREYXRlKS50b0RhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0LmVuZERhdGUgJiYgY29tcGFyZV9tb250aChuZXh0TW9udGgoZGVmYXVsdFRpbWUpLCBvcHQuZW5kRGF0ZSkgPiAwKSBkZWZhdWx0VGltZSA9IHByZXZNb250aChtb21lbnQob3B0LmVuZERhdGUpLnRvRGF0ZSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zdGFydERhdGUgJiYgY29tcGFyZV9tb250aChkZWZhdWx0VGltZSwgb3B0LnN0YXJ0RGF0ZSkgPCAwKSBkZWZhdWx0VGltZSA9IG1vbWVudChvcHQuc3RhcnREYXRlKS50b0RhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0LmVuZERhdGUgJiYgY29tcGFyZV9tb250aChkZWZhdWx0VGltZSwgb3B0LmVuZERhdGUpID4gMCkgZGVmYXVsdFRpbWUgPSBtb21lbnQob3B0LmVuZERhdGUpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNldE1vbnRoc1ZpZXcodGltZSkge1xuICAgICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IGdldERlZmF1bHRUaW1lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHQubG9va0JlaGluZCkge1xuICAgICAgICAgICAgICAgIHNob3dNb250aChwcmV2TW9udGgodGltZSksICdtb250aDEnKTtcbiAgICAgICAgICAgICAgICBzaG93TW9udGgodGltZSwgJ21vbnRoMicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93TW9udGgodGltZSwgJ21vbnRoMScpO1xuICAgICAgICAgICAgICAgIHNob3dNb250aChuZXh0TW9udGgodGltZSksICdtb250aDInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdC5zaW5nbGVEYXRlKSB7XG4gICAgICAgICAgICAgICAgc2hvd01vbnRoKHRpbWUsICdtb250aDEnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hvd1NlbGVjdGVkRGF5cygpO1xuICAgICAgICAgICAgc2hvd0dhcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3V0c2lkZUNsaWNrQ2xvc2UoZXZ0KSB7XG4gICAgICAgICAgICAvLyAhISFcbi8qICAgICAgICAgICAgIGlmICghSXNPd25EYXRlUGlja2VyQ2xpY2tlZChldnQsIHNlbGZbMF0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJveC5pcygnOnZpc2libGUnKSkgY2xvc2VEYXRlUGlja2VyKCk7XG4gICAgICAgICAgICB9ICovXG4gICAgICAgIH1cblxuICAgIH07XG59KSk7XG4iLCJpbXBvcnQgQ2xlYXZlIGZyb20gJ2NsZWF2ZS5qcyc7XHJcblxyXG4kKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdCQoJy5qcy10ZXh0LWZpZWxkLnRleHQtZmllbGRfbWFza2VkIGlucHV0JykuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcblx0XHRsZXQgcGFyYW1zID0ge307XHJcblxyXG5cdFx0aWYgKCAkKHRoaXMpLmF0dHIoJ2RhdGEtdHlwZScpICkge1xyXG5cdFx0XHRsZXQgdHlwZSA9ICQodGhpcykuYXR0cignZGF0YS10eXBlJyk7XHJcblx0XHRcdHBhcmFtc1t0eXBlXSA9IHRydWU7XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHBhcmFtc1t0eXBlICsgJ1BhdHRlcm4nXSA9ICQodGhpcykuYXR0cignZGF0YS1wYXR0ZXJuJykgP1xyXG5cdFx0XHRcdEpTT04ucGFyc2UoICQodGhpcykuYXR0cignZGF0YS1wYXR0ZXJuJykgKSA6XHJcblx0XHRcdFx0ZmFsc2U7XHRcdFx0XHRcclxuXHRcdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKGUuc3RhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cGFyYW1zWydkZWxpbWl0ZXInXSA9ICQodGhpcykuYXR0cignZGF0YS1kZWxpbWl0ZXInKSA/XHJcblx0XHQkKHRoaXMpLmF0dHIoJ2RhdGEtZGVsaW1pdGVyJykgOlxyXG5cdFx0ZmFsc2U7XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cGFyYW1zWydibG9ja3MnXSA9ICQodGhpcykuYXR0cignZGF0YS1ibG9ja3MnKSA/XHJcblx0XHRcdEpTT04ucGFyc2UoICQodGhpcykuYXR0cignZGF0YS1ibG9ja3MnKSApIDpcclxuXHRcdFx0ZmFsc2U7XHRcdFx0XHRcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRjb25zb2xlLndhcm4oZS5zdGFjayk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGNsZWF2ZSA9IG5ldyBDbGVhdmUoJCh0aGlzKSwgcGFyYW1zKTtcdFxyXG5cdH0pO1xyXG59KTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIkKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICQoXCIuanMtY291bnRlZC1pdGVtX19vcGVyYXRpb25cIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgJGl0ZW0gPSAkKHRoaXMpLmNsb3Nlc3QoJy5qcy1jb3VudGVkLWl0ZW0nKTtcclxuICAgICAgICAgICAgbGV0ICR2YWx1ZU5vZGUgPSAkaXRlbS5maW5kKFwiLmpzLWNvdW50ZWQtaXRlbV9fdmFsdWVcIik7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICR2YWx1ZU5vZGUudGV4dCgpICogMTtcclxuICAgICAgICAgICAgbGV0IHRleHQgPSAkaXRlbS5maW5kKFwiLmpzLWNvdW50ZWQtaXRlbV9fdGV4dFwiKS50ZXh0KCk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKCAhJCh0aGlzKS5oYXNDbGFzcyhcImNvdW50ZWQtaXRlbV9fb3BlcmF0aW9uX2Rpc2FibGVkXCIpICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAkKHRoaXMpLmhhc0NsYXNzKFwianMtY291bnRlZC1pdGVtX19vcGVyYXRpb25fZGVjXCIpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICR2YWx1ZU5vZGUudGV4dCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PSAwICkgeyAkKHRoaXMpLmFkZENsYXNzKFwiY291bnRlZC1pdGVtX19vcGVyYXRpb25fZGlzYWJsZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT0gOTggKSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCIuanMtY291bnRlZC1pdGVtX19vcGVyYXRpb25faW5jXCIpLnJlbW92ZUNsYXNzKFwiY291bnRlZC1pdGVtX19vcGVyYXRpb25fZGlzYWJsZWRcIik7IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgJHZhbHVlTm9kZS50ZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09IDk5ICkgeyAkKHRoaXMpLmFkZENsYXNzKFwiY291bnRlZC1pdGVtX19vcGVyYXRpb25fZGlzYWJsZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT0gMSApIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuZmluZChcIi5qcy1jb3VudGVkLWl0ZW1fX29wZXJhdGlvbl9kZWNcIikucmVtb3ZlQ2xhc3MoXCJjb3VudGVkLWl0ZW1fX29wZXJhdGlvbl9kaXNhYmxlZFwiKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZXh0ID0gdmFsdWUgPT0gMCA/ICcnIDogdmFsdWUgKyAnICcgKyB0ZXh0O1xyXG4gICAgICAgICAgICAkaXRlbS5hdHRyKCdkYXRhLWNvdW50ZWQtaXRlbScsIHRleHQpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNvdW50ZWQtaXRlbScpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG5cclxuICAgICAgICBsZXQgdmFsdWVOb2RlID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuanMtY291bnRlZC1pdGVtX192YWx1ZScpO1xyXG4gICAgICAgIGxldCBkZWMgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb3VudGVkLWl0ZW1fX29wZXJhdGlvbl9kZWMnKTtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW1PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgY2xlYXIgPSBpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS1jbGVhcicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBjbGVhciApIHsgXHJcbiAgICAgICAgICAgICAgICB2YWx1ZU5vZGUudGV4dENvbnRlbnQgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICBkZWMuY2xhc3NMaXN0LmFkZCgnY291bnRlZC1pdGVtX19vcGVyYXRpb25fZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1jb3VudGVkLWl0ZW0nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1jbGVhcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0ZW1PYnNlcnZlci5vYnNlcnZlKGl0ZW0sIHthdHRyaWJ1dGVzOiB0cnVlfSk7XHJcbiAgICB9KTtcclxufSk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICQoXCIuanMtZHJvcGRvd25fX2Fycm93XCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCAkZHJvcGRvd24gPSAkKHRoaXMpLmNsb3Nlc3QoJy5qcy1kcm9wZG93bicpO1xyXG5cclxuICAgICAgICAgICAgJGRyb3Bkb3duLmNoaWxkcmVuKFwiLmpzLWRyb3Bkb3duX19wb3B1cFwiKS5zbGlkZVRvZ2dsZSgyMDAsIFwibGluZWFyXCIpO1xyXG4gICAgICAgICAgICAkZHJvcGRvd24udG9nZ2xlQ2xhc3MoXCJkcm9wZG93bl9vcGVuXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoXCIuanMtZHJvcGRvd25fX2FjdGlvbl9jbGVhclwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgJGRyb3Bkb3duID0gJCh0aGlzKS5jbG9zZXN0KCcuanMtZHJvcGRvd24nKTtcclxuICAgICAgICAgICAgbGV0ICRpdGVtcyA9ICRkcm9wZG93bi5maW5kKCcuanMtZHJvcGRvd25fX2l0ZW0tZGF0YScpO1xyXG5cclxuICAgICAgICAgICAgJGl0ZW1zLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWNsZWFyJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImRyb3Bkb3duX19hY3Rpb25faGlkZGVuXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoXCIuanMtZHJvcGRvd25fX2FjdGlvbl9hcHBseVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgJGRyb3Bkb3duID0gJCh0aGlzKS5jbG9zZXN0KCcuanMtZHJvcGRvd24nKTtcclxuXHJcbiAgICAgICAgICAgICRkcm9wZG93bi5maW5kKCcuanMtZHJvcGRvd25fX3BvcHVwJykuc2xpZGVUb2dnbGUoMjAwLCBcImxpbmVhclwiKS5wYXJlbnQoKS50b2dnbGVDbGFzcyhcImRyb3Bkb3duX29wZW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWRyb3Bkb3duJykuZm9yRWFjaChmdW5jdGlvbiAoZHJvcGRvd24pIHtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW1zID0gZHJvcGRvd24ucXVlcnlTZWxlY3RvckFsbCgnLmpzLWRyb3Bkb3duX19pdGVtLWRhdGEnKTtcclxuICAgICAgICBsZXQgdGV4dEZpZWxkID0gZHJvcGRvd24ucXVlcnlTZWxlY3RvcignLmpzLWRyb3Bkb3duX190ZXh0Jyk7XHJcbiAgICAgICAgbGV0IGNsZWFyID0gZHJvcGRvd24ucXVlcnlTZWxlY3RvcignLmpzLWRyb3Bkb3duX19hY3Rpb25fY2xlYXInKTtcclxuICAgICAgICBsZXQgaW5pdGlhbFRleHQgPSBkcm9wZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5pdGlhbC10ZXh0Jyk7XHJcbiAgICAgICAgbGV0IHRleHQgPSAnJztcclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgZHJvcGRvd25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBpdGVtVGV4dDtcclxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbVRleHQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1jb3VudGVkLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgIHRleHQgPSBpdGVtVGV4dCAhPSAnJyA/IHRleHQgKyBpdGVtVGV4dCArICcsICcgOiB0ZXh0O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAodGV4dC5zbGljZSgwLCAtMikpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjbGVhcikge2NsZWFyLmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3Bkb3duX19hY3Rpb25faGlkZGVuJyl9O1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFyKSB7Y2xlYXIuY2xhc3NMaXN0LmFkZCgnZHJvcGRvd25fX2FjdGlvbl9oaWRkZW4nKX07XHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gaW5pdGlhbFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRleHRGaWVsZC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgICAgIHRleHQgPSAnJztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBkcm9wZG93bk9ic2VydmVyLm9ic2VydmUoaXRlbSwge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxufSk7IiwiJCggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcbiAgICAkKCcuanMtZGF0ZS1kcm9wZG93bicpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBsZXQgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgIGxldCAkZmlyc3QgPSAkdGhpcy5maW5kKCcuanMtZGF0ZS1kcm9wZG93bl9fZGF0ZV9vcmRlcl9maXJzdCBpbnB1dCcpO1xyXG4gICAgICAgIGxldCAkbGFzdCA9ICR0aGlzLmZpbmQoJy5qcy1kYXRlLWRyb3Bkb3duX19kYXRlX29yZGVyX2xhc3QgaW5wdXQnKTtcclxuICAgICAgICBsZXQgJGNhbGVuZGFyID0gJHRoaXMuZmluZCgnLmpzLWRhdGUtZHJvcGRvd25fX2NhbGVuZGFyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGZpcnN0RGF0ZSA9ICR0aGlzLmZpbmQoJy5qcy1kYXRlLWRyb3Bkb3duX19kYXRlX29yZGVyX2ZpcnN0JykuYXR0cignZGF0YS1kYXRlJykgfHwgZmFsc2U7XHJcbiAgICAgICAgbGV0IGxhc3REYXRlID0gJHRoaXMuZmluZCgnLmpzLWRhdGUtZHJvcGRvd25fX2RhdGVfb3JkZXJfbGFzdCcpLmF0dHIoJ2RhdGEtZGF0ZScpIHx8IGZhbHNlO1xyXG4gICAgICAgIGxldCBsYW5ndWFnZSA9ICR0aGlzLmF0dHIoJ2RhdGEtbGFuZ3VhZ2UnKTtcclxuICAgICAgICBsZXQgYnV0dG9uQ2xlYXIgPSAkdGhpcy5hdHRyKCdkYXRhLWJ1dHRvbi10by1jbGVhcicpO1xyXG4gICAgICAgIGxldCBidXR0b25BcHBseSA9ICR0aGlzLmF0dHIoJ2RhdGEtYnV0dG9uLXRvLWFwcGx5Jyk7XHJcblxyXG4gICAgICAgICR0aGlzLmRhdGVSYW5nZVBpY2tlcih7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcclxuICAgICAgICAgICAgc2luZ2xlTW9udGg6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dTaG9ydGN1dHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93VG9wYmFyOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGFydE9mV2VlazogJ21vbmRheScsXHJcbiAgICAgICAgICAgIGZvcm1hdDogJ0RELk1NLllZWVknLFxyXG4gICAgICAgICAgICBob3ZlcmluZ1Rvb2x0aXA6IGZhbHNlLFxyXG4gICAgICAgICAgICBzZXRWYWx1ZTogZnVuY3Rpb24ocyxzMSxzMikge1xyXG4gICAgICAgICAgICAgICAgJGZpcnN0LnZhbChzMSk7XHJcbiAgICAgICAgICAgICAgICAkbGFzdC52YWwoczIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbmxpbmU6IHRydWUsXHJcbiAgICAgICAgICAgIGN1c3RvbUFycm93UHJldlN5bWJvbDogJzxkaXYgY2xhc3M9XCJjYWxlbmRhcl9fYXJyb3cganMtY2FsZW5kYXJfX2Fycm93XCI+PGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPmFycm93X2JhY2s8L2k+PC9kaXY+JyxcclxuICAgICAgICAgICAgY3VzdG9tQXJyb3dOZXh0U3ltYm9sOiAnPGRpdiBjbGFzcz1cImNhbGVuZGFyX19hcnJvdyBqcy1jYWxlbmRhcl9fYXJyb3dcIj48aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+YXJyb3dfZm9yd2FyZDwvaT48L2Rpdj4nLFxyXG4gICAgICAgICAgICBjb250YWluZXI6ICRjYWxlbmRhclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEPQvtCx0YvRgtC40Y8gXCLQv9GA0LjQvdGP0YLRjFwiINC4IFwi0L7Rh9C40YHRgtC40YLRjFwiINGB0L7Qt9C00LDRjtGC0YHRjyDQv9C+0YHQu9C1INC+0YLQutGA0YvRgtC40Y9cclxuICAgICAgICAkdGhpcy5iaW5kKCdkYXRlcGlja2VyLW9wZW5lZCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgJGNhbGVuZGFyLmFkZENsYXNzKCcuZGF0ZS1kcm9wZG93bl9fY2FsZW5kYXJfb3BlbicpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICR0aGlzLmZpbmQoJy5qcy1jYWxlbmRhcl9faWNvbi1saW5rX2FjdGlvbl9jbGVhcicpLmNsaWNrKGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnZGF0ZVJhbmdlUGlja2VyJykuY2xlYXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgJHRoaXMuZmluZCgnLmpzLWNhbGVuZGFyX19pY29uLWxpbmtfYWN0aW9uX2FwcGx5JykuY2xpY2soZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkYXRlUmFuZ2VQaWNrZXInKS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgJGNhbGVuZGFyLnJlbW92ZUNsYXNzKCcuZGF0ZS1kcm9wZG93bl9fY2FsZW5kYXJfb3BlbicpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICR0aGlzLmZpbmQoJy5kYXRlLWRyb3Bkb3duX19hcnJvdycpLmNsaWNrKGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRjYWxlbmRhci5oYXNDbGFzcygnLmRhdGUtZHJvcGRvd25fX2NhbGVuZGFyX29wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkYXRlUmFuZ2VQaWNrZXInKS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjYWxlbmRhci5yZW1vdmVDbGFzcygnLmRhdGUtZHJvcGRvd25fX2NhbGVuZGFyX29wZW4nKTsgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LrQvdC+0L/QutC4IFwi0L7Rh9C40YHRgtC40YLRjFwiINC4IFwi0L/RgNC40L3Rj9GC0YxcIlxyXG4gICAgICAgICRjYWxlbmRhci5maW5kKCcuZGF0ZS1waWNrZXItd3JhcHBlcicpLmFwcGVuZChcclxuICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJpY29uLWxpbmsgY2FsZW5kYXJfX2ljb24tbGlua19hY3Rpb25fY2xlYXIganMtY2FsZW5kYXJfX2ljb24tbGlua19hY3Rpb25fY2xlYXJcIiB0eXBlPVwiYnV0dG9uXCI+JyArXHJcbiAgICAgICAgICAgIGJ1dHRvbkNsZWFyICsgXHJcbiAgICAgICAgICAgICc8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiaWNvbi1saW5rIGljb24tbGlua19wcmltYXJ5IGNhbGVuZGFyX19pY29uLWxpbmtfYWN0aW9uX2FwcGx5IGpzLWNhbGVuZGFyX19pY29uLWxpbmtfYWN0aW9uX2FwcGx5XCIgdHlwZT1cImJ1dHRvblwiPicgKyBcclxuICAgICAgICAgICAgYnV0dG9uQXBwbHkgKyAnPC9idXR0b24+Jyk7XHJcblxyXG5cclxuICAgICAgICAvLyDQldGB0LvQuCDQstC+0LfQvNC+0LbQvdC+LCDRg9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNCw0YLRg1xyXG4gICAgICAgIGlmIChmaXJzdERhdGUgJiYgbGFzdERhdGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2RhdGVSYW5nZVBpY2tlcicpLnNldERhdGVSYW5nZShmaXJzdERhdGUsIGxhc3REYXRlKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dyb25nIGRhdGUgZm9ybWF0Jyk7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vINCS0LLQvtC0INC00LDRgtGLINCy0YDRg9GH0L3Rg9GOXHJcbiAgICAgICAgJGZpcnN0Lm9uKCdibHVyJywgaW5wdXRPbkJsdXIpO1xyXG4gICAgICAgICRsYXN0Lm9uKCdibHVyJywgaW5wdXRPbkJsdXIpO1xyXG5cclxuICAgICAgICAkZmlyc3Qub24oJ2tleXByZXNzJywgaW5wdXRPbktleXByZXNzKTtcclxuICAgICAgICAkbGFzdC5vbigna2V5cHJlc3MnLCBpbnB1dE9uS2V5cHJlc3MpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbnB1dE9uQmx1cigpIHtcclxuICAgICAgICAgICAgaWYgKCAkZmlyc3QudmFsKCkgJiYgJGxhc3QudmFsKCkgKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2RhdGVSYW5nZVBpY2tlcicpLnNldERhdGVSYW5nZSgkZmlyc3QudmFsKCksICRsYXN0LnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkYXRlUmFuZ2VQaWNrZXInKS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbmNvcnJlY3QgZGF0ZXMnKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5wdXRPbktleXByZXNzKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dE9uQmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCIvLy0tLS0tLS0tLS0tLS0tLSBpbXBvcnQgc2NzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaW1wb3J0ICcuLi8uLi9zY3NzL21haW4uc2Nzcyc7XHJcbmltcG9ydCAnLi9jYXJkcy5zY3NzJztcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tIGltcG9ydCBsaWJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5pbXBvcnQgXCJqcXVlcnktZGF0ZS1yYW5nZS1waWNrZXIvZGlzdC9qcXVlcnkuZGF0ZXJhbmdlcGlja2VyLmpzXCI7XHJcblxyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCdcclxuaW1wb3J0ICdtb21lbnQvbG9jYWxlL3J1JyBcclxubW9tZW50LmxvY2FsZSgncnUnKTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tIGltcG9ydCBjb21tb24ganMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmltcG9ydCBcIi4uLy4uL2pzL21haW4uanNcIjtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLSBpbXBvcnQgYmxvY2tzIHNjcmlwdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmltcG9ydCBcIi4uLy4uL2Jsb2Nrcy1iYXNlL3RleHQtZmllbGQvdGV4dC1maWVsZC5qc1wiO1xyXG5pbXBvcnQgXCIuLi8uLi9ibG9ja3MtYmFzZS9jb3VudGVkLWl0ZW0vY291bnRlZC1pdGVtLmpzXCI7XHJcbmltcG9ydCBcIi4uLy4uL2Jsb2Nrcy1iYXNlL2Ryb3Bkb3duL2Ryb3Bkb3duLmpzXCI7XHJcbmltcG9ydCBcIi4uLy4uL2Jsb2Nrcy1iYXNlL2RhdGUtZHJvcGRvd24vZGF0ZS1kcm9wZG93bi5qc1wiO1xyXG5cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8vINCe0YLQutGA0YvRgtGL0Lkg0LrQsNC70LXQvdC00LDRgNGMINCyINC60LDRgNGC0L7Rh9C60LDRhVxyXG4gICAgXHJcbiAgICAkKCcuanMtY2FyZHNfX2NhbGVuZGFyJykuZGF0ZVJhbmdlUGlja2VyKHtcclxuICAgICAgICBsYW5ndWFnZTogJ3J1JyxcclxuICAgICAgICBzaW5nbGVNb250aDogdHJ1ZSxcclxuICAgICAgICBzaG93U2hvcnRjdXRzOiBmYWxzZSxcclxuICAgICAgICBzaG93VG9wYmFyOiBmYWxzZSxcclxuICAgICAgICBzdGFydE9mV2VlazogJ21vbmRheScsXHJcbiAgICAgICAgaG92ZXJpbmdUb29sdGlwOiBmYWxzZSxcclxuXHJcbiAgICAgICAgY3VzdG9tQXJyb3dQcmV2U3ltYm9sOiAnPGRpdiBjbGFzcz1cImNhbGVuZGFyX19hcnJvdyBhcnJvd1wiPjxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5hcnJvd19iYWNrPC9pPjwvZGl2PicsXHJcbiAgICAgICAgY3VzdG9tQXJyb3dOZXh0U3ltYm9sOiAnPGRpdiBjbGFzcz1cImNhbGVuZGFyX19hcnJvdyBhcnJvd1wiPjxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5hcnJvd19mb3J3YXJkPC9pPjwvZGl2PicsXHJcblxyXG4gICAgICAgIGlubGluZTogdHJ1ZSxcclxuICAgICAgICBjb250YWluZXI6ICcuY2FsZW5kYXItd3JhcCcsXHJcbiAgICAgICAgYWx3YXlzT3BlbjogdHJ1ZSwgXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQutC90L7Qv9C60LggXCLQvtGH0LjRgdGC0LjRgtGMXCIg0LggXCLQv9GA0LjQvdGP0YLRjFwiXHJcbiAgICAkKCcuY2FsZW5kYXItd3JhcCcpLmZpbmQoJy5kYXRlLXBpY2tlci13cmFwcGVyJykuYXBwZW5kKFxyXG4gICAgICAgICc8YnV0dG9uIGNsYXNzPVwiaWNvbi1saW5rIGNhbGVuZGFyX19pY29uLWxpbmtfYWN0aW9uX2NsZWFyIGpzLWNhbGVuZGFyX19pY29uLWxpbmtfYWN0aW9uX2NsZWFyXCI+0J7Rh9C40YHRgtC40YLRjDwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJpY29uLWxpbmsgaWNvbi1saW5rX3ByaW1hcnkgY2FsZW5kYXJfX2ljb24tbGlua19hY3Rpb25fYXBwbHkganMtY2FsZW5kYXJfX2ljb24tbGlua19hY3Rpb25fYXBwbHlcIj7Qn9GA0LjQvNC10L3QuNGC0Yw8L2J1dHRvbj4nXHJcbiAgICApO1xyXG5cclxuICAgICQoJy5qcy1jYXJkc19fY2FsZW5kYXInKS5kYXRhKCdkYXRlUmFuZ2VQaWNrZXInKS5zZXREYXRlUmFuZ2UoJzIwMTkvMDgvMTknLCcyMDE5LzA4LzIzJyk7XHJcblxyXG4gICAgJCgnLmpzLWNhcmRzX19jYWxlbmRhci13cmFwIC5qcy1jYWxlbmRhcl9faWNvbi1saW5rX2FjdGlvbl9jbGVhcicpLmNsaWNrKGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAkKCcuanMtY2FyZHNfX2NhbGVuZGFyJykuZGF0YSgnZGF0ZVJhbmdlUGlja2VyJykuY2xlYXIoKTtcclxuICAgIH0pO1xyXG5cclxufSk7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYXJkcy5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FyZHMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYXJkcy5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==